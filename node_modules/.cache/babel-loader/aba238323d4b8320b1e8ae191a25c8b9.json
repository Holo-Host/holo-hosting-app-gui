{"ast":null,"code":"import { combineReducers } from 'redux';\nimport resources, { getResources as resourceGetResources, getReferenceResource as resourceGetReferenceResource } from './resource';\nimport loading from './loading';\nimport notifications from './notifications';\nimport record from './record';\nimport references, { getPossibleReferenceValues as referencesGetPossibleReferenceValues } from './references';\nimport saving from './saving';\nimport ui from './ui';\nimport auth, { isLoggedIn as authIsLoggedIn } from './auth';\nexport default combineReducers({\n  resources: resources,\n  loading: loading,\n  notifications: notifications,\n  record: record,\n  references: references,\n  saving: saving,\n  ui: ui,\n  auth: auth\n});\nexport var getPossibleReferenceValues = function getPossibleReferenceValues(state, props) {\n  return referencesGetPossibleReferenceValues(state.references, props);\n};\nexport var getResources = function getResources(state) {\n  return resourceGetResources(state.resources);\n};\nexport var getReferenceResource = function getReferenceResource(state, props) {\n  return resourceGetReferenceResource(state.resources, props);\n};\nexport var isLoggedIn = function isLoggedIn(state) {\n  return authIsLoggedIn(state.auth);\n};\nexport { getPossibleReferences } from './references';","map":null,"metadata":{},"sourceType":"module"}