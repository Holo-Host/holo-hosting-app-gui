{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm } from 'redux-form';\nimport classnames from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport compose from 'recompose/compose';\nimport withProps from 'recompose/withProps';\nimport lodashSet from 'lodash/set';\nimport FilterFormInput from './FilterFormInput';\n\nvar styles = function styles(_a) {\n  var primary1Color = _a.palette.primary1Color;\n  return {\n    form: {\n      marginTop: '-10px',\n      paddingTop: 0,\n      display: 'flex',\n      alignItems: 'flex-end',\n      flexWrap: 'wrap'\n    },\n    body: {\n      display: 'flex',\n      alignItems: 'flex-end'\n    },\n    spacer: {\n      width: '1em'\n    },\n    icon: {\n      color: primary1Color || '#00bcd4',\n      paddingBottom: 0\n    },\n    clearFix: {\n      clear: 'right'\n    }\n  };\n};\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var anyTouched = _a.anyTouched,\n      asyncValidate = _a.asyncValidate,\n      asyncValidating = _a.asyncValidating,\n      autofill = _a.autofill,\n      blur = _a.blur,\n      change = _a.change,\n      clearAsyncError = _a.clearAsyncError,\n      clearFields = _a.clearFields,\n      clearSubmit = _a.clearSubmit,\n      clearSubmitErrors = _a.clearSubmitErrors,\n      destroy = _a.destroy,\n      dirty = _a.dirty,\n      dispatch = _a.dispatch,\n      displayedFilters = _a.displayedFilters,\n      filterValues = _a.filterValues,\n      handleSubmit = _a.handleSubmit,\n      hideFilter = _a.hideFilter,\n      initialize = _a.initialize,\n      initialized = _a.initialized,\n      initialValues = _a.initialValues,\n      invalid = _a.invalid,\n      pristine = _a.pristine,\n      pure = _a.pure,\n      reset = _a.reset,\n      resetSection = _a.resetSection,\n      save = _a.save,\n      setFilter = _a.setFilter,\n      setFilters = _a.setFilters,\n      submit = _a.submit,\n      submitFailed = _a.submitFailed,\n      submitSucceeded = _a.submitSucceeded,\n      submitting = _a.submitting,\n      touch = _a.touch,\n      triggerSubmit = _a.triggerSubmit,\n      untouch = _a.untouch,\n      valid = _a.valid,\n      validate = _a.validate,\n      props = __rest(_a, [\"anyTouched\", \"asyncValidate\", \"asyncValidating\", \"autofill\", \"blur\", \"change\", \"clearAsyncError\", \"clearFields\", \"clearSubmit\", \"clearSubmitErrors\", \"destroy\", \"dirty\", \"dispatch\", \"displayedFilters\", \"filterValues\", \"handleSubmit\", \"hideFilter\", \"initialize\", \"initialized\", \"initialValues\", \"invalid\", \"pristine\", \"pure\", \"reset\", \"resetSection\", \"save\", \"setFilter\", \"setFilters\", \"submit\", \"submitFailed\", \"submitSucceeded\", \"submitting\", \"touch\", \"triggerSubmit\", \"untouch\", \"valid\", \"validate\"]);\n\n  return props;\n};\n\nvar FilterForm =\n/** @class */\nfunction (_super) {\n  __extends(FilterForm, _super);\n\n  function FilterForm() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleHide = function (event) {\n      return _this.props.hideFilter(event.currentTarget.dataset.key);\n    };\n\n    return _this;\n  }\n\n  FilterForm.prototype.componentDidMount = function () {\n    this.props.filters.forEach(function (filter) {\n      if (filter.props.alwaysOn && filter.props.defaultValue) {\n        throw new Error('Cannot use alwaysOn and defaultValue on a filter input. Please set the filterDefaultValues props on the <List> element instead.');\n      }\n    });\n  };\n\n  FilterForm.prototype.getShownFilters = function () {\n    var _a = this.props,\n        filters = _a.filters,\n        displayedFilters = _a.displayedFilters,\n        initialValues = _a.initialValues;\n    return filters.filter(function (filterElement) {\n      return filterElement.props.alwaysOn || displayedFilters[filterElement.props.source] || typeof initialValues[filterElement.props.source] !== 'undefined';\n    });\n  };\n\n  FilterForm.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        _b = _a.classes,\n        classes = _b === void 0 ? {} : _b,\n        className = _a.className,\n        resource = _a.resource,\n        rest = __rest(_a, [\"classes\", \"className\", \"resource\"]);\n\n    return React.createElement(\"div\", __assign({\n      className: classnames(className, classes.form)\n    }, sanitizeRestProps(rest)), this.getShownFilters().map(function (filterElement) {\n      return React.createElement(FilterFormInput, {\n        key: filterElement.props.source,\n        filterElement: filterElement,\n        handleHide: _this.handleHide,\n        classes: classes,\n        resource: resource\n      });\n    }), React.createElement(\"div\", {\n      className: classes.clearFix\n    }));\n  };\n\n  return FilterForm;\n}(Component);\n\nexport { FilterForm };\nFilterForm.propTypes = {\n  resource: PropTypes.string.isRequired,\n  filters: PropTypes.arrayOf(PropTypes.node).isRequired,\n  displayedFilters: PropTypes.object.isRequired,\n  hideFilter: PropTypes.func.isRequired,\n  initialValues: PropTypes.object,\n  classes: PropTypes.object,\n  className: PropTypes.string\n};\nexport var mergeInitialValuesWithDefaultValues = function mergeInitialValuesWithDefaultValues(_a) {\n  var initialValues = _a.initialValues,\n      filters = _a.filters;\n  return {\n    initialValues: __assign({}, filters.filter(function (filterElement) {\n      return filterElement.props.alwaysOn && filterElement.props.defaultValue;\n    }).reduce(function (acc, filterElement) {\n      return lodashSet(__assign({}, acc), filterElement.props.source, filterElement.props.defaultValue);\n    }, {}), initialValues)\n  };\n};\nvar enhance = compose(withStyles(styles), withProps(mergeInitialValuesWithDefaultValues), reduxForm({\n  form: 'filterForm',\n  enableReinitialize: true,\n  destroyOnUnmount: false,\n  onChange: function onChange(values, dispatch, props) {\n    return props && props.setFilters(values);\n  }\n}));\nexport default enhance(FilterForm);","map":null,"metadata":{},"sourceType":"module"}