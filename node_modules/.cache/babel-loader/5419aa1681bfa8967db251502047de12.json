{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport compose from 'recompose/compose';\nimport { addField, translate, FieldTitle } from 'ra-core';\nimport ResettableTextField from './ResettableTextField';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var addLabel = _a.addLabel,\n      allowEmpty = _a.allowEmpty,\n      emptyValue = _a.emptyValue,\n      basePath = _a.basePath,\n      choices = _a.choices,\n      className = _a.className,\n      component = _a.component,\n      crudGetMatching = _a.crudGetMatching,\n      crudGetOne = _a.crudGetOne,\n      defaultValue = _a.defaultValue,\n      filter = _a.filter,\n      filterToQuery = _a.filterToQuery,\n      formClassName = _a.formClassName,\n      initializeForm = _a.initializeForm,\n      input = _a.input,\n      isRequired = _a.isRequired,\n      label = _a.label,\n      locale = _a.locale,\n      meta = _a.meta,\n      onChange = _a.onChange,\n      options = _a.options,\n      optionValue = _a.optionValue,\n      optionText = _a.optionText,\n      disableValue = _a.disableValue,\n      perPage = _a.perPage,\n      record = _a.record,\n      reference = _a.reference,\n      resource = _a.resource,\n      setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      sort = _a.sort,\n      source = _a.source,\n      textAlign = _a.textAlign,\n      translate = _a.translate,\n      translateChoice = _a.translateChoice,\n      validation = _a.validation,\n      rest = __rest(_a, [\"addLabel\", \"allowEmpty\", \"emptyValue\", \"basePath\", \"choices\", \"className\", \"component\", \"crudGetMatching\", \"crudGetOne\", \"defaultValue\", \"filter\", \"filterToQuery\", \"formClassName\", \"initializeForm\", \"input\", \"isRequired\", \"label\", \"locale\", \"meta\", \"onChange\", \"options\", \"optionValue\", \"optionText\", \"disableValue\", \"perPage\", \"record\", \"reference\", \"resource\", \"setFilter\", \"setPagination\", \"setSort\", \"sort\", \"source\", \"textAlign\", \"translate\", \"translateChoice\", \"validation\"]);\n\n  return rest;\n};\n\nvar styles = function styles(theme) {\n  return createStyles({\n    input: {\n      minWidth: theme.spacing.unit * 20\n    }\n  });\n};\n/**\n * An Input component for a select box, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectInput source=\"gender\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectInput source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectInput source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectInput source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <Select> component\n *\n * You can disable some choices by providing a `disableValue` field which name is `disabled` by default\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', disabled: true },\n * ];\n *\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n *    { id: 976, first_name: 'William', last_name: 'Rinkerd', not_available: true },\n * ];\n * <SelectInput source=\"gender\" choices={choices} disableValue=\"not_available\" />\n *\n */\n\n\nvar SelectInput =\n/** @class */\nfunction (_super) {\n  __extends(SelectInput, _super);\n\n  function SelectInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /*\n     * Using state to bypass a redux-form comparison but which prevents re-rendering\n     * @see https://github.com/erikras/redux-form/issues/2456\n     */\n\n\n    _this.state = {\n      value: _this.props.input.value\n    };\n\n    _this.handleChange = function (eventOrValue) {\n      var value = eventOrValue.target ? eventOrValue.target.value : eventOrValue;\n\n      _this.props.input.onChange(value); // HACK: For some reason, redux-form does not consider this input touched without calling onBlur manually\n\n\n      _this.props.input.onBlur(value);\n\n      _this.setState({\n        value: value\n      });\n    };\n\n    _this.addAllowEmpty = function (choices) {\n      if (_this.props.allowEmpty) {\n        return [React.createElement(MenuItem, {\n          value: _this.props.emptyValue,\n          key: \"null\"\n        })].concat(choices);\n      }\n\n      return choices;\n    };\n\n    _this.renderMenuItemOption = function (choice) {\n      var _a = _this.props,\n          optionText = _a.optionText,\n          translate = _a.translate,\n          translateChoice = _a.translateChoice;\n      if (React.isValidElement(optionText)) return React.cloneElement(optionText, {\n        record: choice\n      });\n      var choiceName = typeof optionText === 'function' ? optionText(choice) : get(choice, optionText);\n      return translateChoice ? translate(choiceName, {\n        _: choiceName\n      }) : choiceName;\n    };\n\n    _this.renderMenuItem = function (choice) {\n      var _a = _this.props,\n          optionValue = _a.optionValue,\n          disableValue = _a.disableValue;\n      return React.createElement(MenuItem, {\n        key: get(choice, optionValue),\n        value: get(choice, optionValue),\n        disabled: get(choice, disableValue)\n      }, _this.renderMenuItemOption(choice));\n    };\n\n    return _this;\n  }\n\n  SelectInput.prototype.componentWillReceiveProps = function (nextProps) {\n    if (nextProps.input.value !== this.props.input.value) {\n      this.setState({\n        value: nextProps.input.value\n      });\n    }\n  };\n\n  SelectInput.prototype.render = function () {\n    var _a = this.props,\n        allowEmpty = _a.allowEmpty,\n        choices = _a.choices,\n        classes = _a.classes,\n        className = _a.className,\n        input = _a.input,\n        isRequired = _a.isRequired,\n        label = _a.label,\n        meta = _a.meta,\n        options = _a.options,\n        resource = _a.resource,\n        source = _a.source,\n        rest = __rest(_a, [\"allowEmpty\", \"choices\", \"classes\", \"className\", \"input\", \"isRequired\", \"label\", \"meta\", \"options\", \"resource\", \"source\"]);\n\n    if (typeof meta === 'undefined') {\n      throw new Error(\"The SelectInput component wasn't called within a redux-form <Field>. Did you decorate it and forget to add the addField prop to your component? See https://marmelab.com/react-admin/Inputs.html#writing-your-own-input-component for details.\");\n    }\n\n    var touched = meta.touched,\n        error = meta.error,\n        _b = meta.helperText,\n        helperText = _b === void 0 ? false : _b;\n    return React.createElement(ResettableTextField, __assign({\n      select: true,\n      margin: \"normal\",\n      value: this.state.value,\n      label: React.createElement(FieldTitle, {\n        label: label,\n        source: source,\n        resource: resource,\n        isRequired: isRequired\n      }),\n      name: input.name,\n      className: classes.input + \" \" + className,\n      clearAlwaysVisible: true,\n      error: !!(touched && error),\n      helperText: touched && error || helperText\n    }, options, sanitizeRestProps(rest), {\n      onChange: this.handleChange\n    }), this.addAllowEmpty(choices.map(this.renderMenuItem)));\n  };\n\n  return SelectInput;\n}(Component);\n\nexport { SelectInput };\nSelectInput.propTypes = {\n  allowEmpty: PropTypes.bool.isRequired,\n  emptyValue: PropTypes.any,\n  choices: PropTypes.arrayOf(PropTypes.object),\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  input: PropTypes.object,\n  isRequired: PropTypes.bool,\n  label: PropTypes.string,\n  meta: PropTypes.object,\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]).isRequired,\n  optionValue: PropTypes.string.isRequired,\n  disableValue: PropTypes.string,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  translate: PropTypes.func.isRequired,\n  translateChoice: PropTypes.bool\n};\nSelectInput.defaultProps = {\n  allowEmpty: false,\n  emptyValue: '',\n  classes: {},\n  choices: [],\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true,\n  disableValue: 'disabled'\n};\nexport default compose(addField, translate, withStyles(styles))(SelectInput);","map":null,"metadata":{},"sourceType":"module"}