{"ast":null,"code":"import uniq from 'lodash/uniq';\nimport { CRUD_GET_LIST_SUCCESS, CRUD_GET_MANY_SUCCESS, CRUD_GET_MANY_REFERENCE_SUCCESS, CRUD_GET_ONE_SUCCESS, CRUD_CREATE_SUCCESS, CRUD_UPDATE_SUCCESS } from '../../../../actions/dataActions';\nimport getFetchedAt from '../../../../util/getFetchedAt';\nimport { DELETE, DELETE_MANY } from '../../../../dataFetchActions';\nexport var addRecordIdsFactory = function addRecordIdsFactory(getFetchedAtCallback) {\n  return function (newRecordIds, oldRecordIds) {\n    if (newRecordIds === void 0) {\n      newRecordIds = [];\n    }\n\n    var newFetchedAt = getFetchedAtCallback(newRecordIds, oldRecordIds.fetchedAt);\n    var recordIds = uniq(oldRecordIds.filter(function (id) {\n      return !!newFetchedAt[id];\n    }).concat(newRecordIds));\n    Object.defineProperty(recordIds, 'fetchedAt', {\n      value: newFetchedAt\n    }); // non enumerable by default\n\n    return recordIds;\n  };\n};\nvar addRecordIds = addRecordIdsFactory(getFetchedAt);\n\nvar idsReducer = function idsReducer(previousState, action) {\n  if (previousState === void 0) {\n    previousState = [];\n  }\n\n  if (action.meta && action.meta.optimistic) {\n    if (action.meta.fetch === DELETE) {\n      var index = previousState.map(function (el) {\n        return el === action.payload.id;\n      }) // eslint-disable-line eqeqeq\n      .indexOf(true);\n\n      if (index === -1) {\n        return previousState;\n      }\n\n      var newState = previousState.slice(0, index).concat(previousState.slice(index + 1));\n      Object.defineProperty(newState, 'fetchedAt', {\n        value: previousState.fetchedAt\n      });\n      return newState;\n    }\n\n    if (action.meta.fetch === DELETE_MANY) {\n      var newState = previousState.filter(function (el) {\n        return !action.payload.ids.includes(el);\n      });\n      Object.defineProperty(newState, 'fetchedAt', {\n        value: previousState.fetchedAt\n      });\n      return newState;\n    }\n  }\n\n  switch (action.type) {\n    case CRUD_GET_LIST_SUCCESS:\n      return addRecordIds(action.payload.data.map(function (_a) {\n        var id = _a.id;\n        return id;\n      }), []);\n\n    case CRUD_GET_MANY_SUCCESS:\n    case CRUD_GET_MANY_REFERENCE_SUCCESS:\n      return addRecordIds(action.payload.data.map(function (_a) {\n        var id = _a.id;\n        return id;\n      }).filter(function (id) {\n        return previousState.indexOf(id) !== -1;\n      }), previousState);\n\n    case CRUD_GET_ONE_SUCCESS:\n    case CRUD_CREATE_SUCCESS:\n    case CRUD_UPDATE_SUCCESS:\n      return addRecordIds([action.payload.data.id], previousState);\n\n    default:\n      return previousState;\n  }\n};\n\nexport default idsReducer;\nexport var getIds = function getIds(state) {\n  return state;\n};","map":null,"metadata":{},"sourceType":"module"}