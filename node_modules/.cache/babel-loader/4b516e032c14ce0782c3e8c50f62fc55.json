{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport { addField, FieldTitle } from 'ra-core';\nimport sanitizeRestProps from './sanitizeRestProps';\n/**\n * Convert Date object to String\n *\n * @param {Date} v value to convert\n * @returns {String} A standardized date (yyyy-MM-dd), to be passed to an <input type=\"date\" />\n */\n\nvar dateFormatter = function dateFormatter(v) {\n  if (!(v instanceof Date) || isNaN(v)) return;\n  var pad = '00';\n  var yyyy = v.getFullYear().toString();\n  var MM = (v.getMonth() + 1).toString();\n  var dd = v.getDate().toString();\n  return yyyy + \"-\" + (pad + MM).slice(-2) + \"-\" + (pad + dd).slice(-2);\n};\n\nvar dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n\nvar sanitizeValue = function sanitizeValue(value) {\n  // null, undefined and empty string values should not go through dateFormatter\n  // otherwise, it returns undefined and will make the input an uncontrolled one.\n  if (value == null || value === '') {\n    return '';\n  } // valid dates should not be converted\n\n\n  if (dateRegex.test(value)) {\n    return value;\n  }\n\n  var finalValue = typeof value instanceof Date ? value : new Date(value);\n  return dateFormatter(finalValue);\n};\n\nvar DateInput =\n/** @class */\nfunction (_super) {\n  __extends(DateInput, _super);\n\n  function DateInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onChange = function (event) {\n      _this.props.input.onChange(event.target.value);\n    };\n\n    return _this;\n  }\n\n  DateInput.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        meta = _a.meta,\n        input = _a.input,\n        isRequired = _a.isRequired,\n        label = _a.label,\n        options = _a.options,\n        source = _a.source,\n        resource = _a.resource,\n        rest = __rest(_a, [\"className\", \"meta\", \"input\", \"isRequired\", \"label\", \"options\", \"source\", \"resource\"]);\n\n    if (typeof meta === 'undefined') {\n      throw new Error(\"The DateInput component wasn't called within a redux-form <Field>. Did you decorate it and forget to add the addField prop to your component? See https://marmelab.com/react-admin/Inputs.html#writing-your-own-input-component for details.\");\n    }\n\n    var touched = meta.touched,\n        error = meta.error;\n    var value = sanitizeValue(input.value);\n    return React.createElement(TextField, __assign({}, input, {\n      className: className,\n      type: \"date\",\n      margin: \"normal\",\n      error: !!(touched && error),\n      helperText: touched && error,\n      label: React.createElement(FieldTitle, {\n        label: label,\n        source: source,\n        resource: resource,\n        isRequired: isRequired\n      }),\n      InputLabelProps: {\n        shrink: true\n      }\n    }, options, sanitizeRestProps(rest), {\n      value: value,\n      onChange: this.onChange\n    }));\n  };\n\n  return DateInput;\n}(Component);\n\nexport { DateInput };\nDateInput.propTypes = {\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  input: PropTypes.object,\n  isRequired: PropTypes.bool,\n  label: PropTypes.string,\n  meta: PropTypes.object,\n  options: PropTypes.object,\n  resource: PropTypes.string,\n  source: PropTypes.string\n};\nDateInput.defaultProps = {\n  options: {}\n};\nexport default addField(DateInput);","map":null,"metadata":{},"sourceType":"module"}