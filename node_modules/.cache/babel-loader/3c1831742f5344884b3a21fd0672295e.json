{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport pickBy from 'lodash/pickBy';\nvar defaultCacheDuration = 10 * 60 * 1000; // ten minutes\n\n/**\n * Returns a list of fetch dates by record id\n *\n * Given a list of new record ids and a previous list of fetch dates by record id,\n * add the new record ids at the current date,\n * and removes those among the old record ids that are stale.\n *\n * @param newRecordIds an array of record identifiers, e.g. [34, 56]\n * @param oldRecordFetchedAt the fetch dates of old records, e.g. { 12: new Date('12 minutes ago), 34: new Date('5 minutes ago') }\n * @param now Current time (useful for tests)\n * @param cacheDuration How long until an old record is removed from the list\n */\n\nvar getFetchedAt = function getFetchedAt(newRecordIds, oldRecordFetchedAt, now, cacheDuration) {\n  if (newRecordIds === void 0) {\n    newRecordIds = [];\n  }\n\n  if (oldRecordFetchedAt === void 0) {\n    oldRecordFetchedAt = {};\n  }\n\n  if (now === void 0) {\n    now = new Date();\n  }\n\n  if (cacheDuration === void 0) {\n    cacheDuration = defaultCacheDuration;\n  } // prepare new records and timestamp them\n\n\n  var newFetchedAt = newRecordIds.reduce(function (prev, recordId) {\n    var _a;\n\n    return __assign({}, prev, (_a = {}, _a[recordId] = now, _a));\n  }, {}); // remove outdated entry\n\n  var latestValidDate = new Date();\n  latestValidDate.setTime(latestValidDate.getTime() - cacheDuration);\n  var stillValidFetchedAt = pickBy(oldRecordFetchedAt, function (date) {\n    return date > latestValidDate;\n  });\n  return __assign({}, stillValidFetchedAt, newFetchedAt);\n};\n\nexport default getFetchedAt;","map":null,"metadata":{},"sourceType":"module"}