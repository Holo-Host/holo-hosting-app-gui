{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport compose from 'recompose/compose';\nimport inflection from 'inflection';\nimport { reset } from 'redux-form';\nimport withTranslate from '../i18n/translate';\nimport { crudGetOne, crudUpdate, startUndoable as startUndoableAction } from '../actions';\nimport { REDUX_FORM_NAME } from '../form';\nimport checkMinimumRequiredProps from './checkMinimumRequiredProps';\n/**\n * Page component for the Edit view\n *\n * The `<Edit>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes pass the `record` as prop.\n *\n * The `<Edit>` component accepts the following props:\n *\n * - title\n * - actions\n *\n * Both expect an element for value.\n *\n * @example\n *     // in src/posts.js\n *     import React from 'react';\n *     import { Edit, SimpleForm, TextInput } from 'react-admin';\n *\n *     export const PostEdit = (props) => (\n *         <Edit {...props}>\n *             <SimpleForm>\n *                 <TextInput source=\"title\" />\n *             </SimpleForm>\n *         </Edit>\n *     );\n *\n *     // in src/App.js\n *     import React from 'react';\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostEdit } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" edit={PostEdit} />\n *         </Admin>\n *     );\n *     export default App;\n */\n\nvar UnconnectedEditController =\n/** @class */\nfunction (_super) {\n  __extends(UnconnectedEditController, _super);\n\n  function UnconnectedEditController() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.save = function (data, redirect) {\n      var _a = _this.props,\n          _b = _a.undoable,\n          undoable = _b === void 0 ? true : _b,\n          startUndoable = _a.startUndoable,\n          dispatchCrudUpdate = _a.dispatchCrudUpdate;\n\n      if (undoable) {\n        startUndoable(crudUpdate(_this.props.resource, _this.props.id, data, _this.props.record, _this.props.basePath, redirect));\n      } else {\n        dispatchCrudUpdate(_this.props.resource, _this.props.id, data, _this.props.record, _this.props.basePath, redirect);\n      }\n    };\n\n    return _this;\n  }\n\n  UnconnectedEditController.prototype.componentDidMount = function () {\n    this.updateData();\n  };\n\n  UnconnectedEditController.prototype.componentWillReceiveProps = function (nextProps) {\n    if (this.props.id !== nextProps.id || nextProps.version !== this.props.version) {\n      this.props.resetForm(REDUX_FORM_NAME);\n      this.updateData(nextProps.resource, nextProps.id);\n    }\n  };\n\n  UnconnectedEditController.prototype.defaultRedirectRoute = function () {\n    return 'list';\n  };\n\n  UnconnectedEditController.prototype.updateData = function (resource, id) {\n    if (resource === void 0) {\n      resource = this.props.resource;\n    }\n\n    if (id === void 0) {\n      id = this.props.id;\n    }\n\n    this.props.crudGetOne(resource, id, this.props.basePath);\n  };\n\n  UnconnectedEditController.prototype.render = function () {\n    var _a = this.props,\n        basePath = _a.basePath,\n        children = _a.children,\n        id = _a.id,\n        isLoading = _a.isLoading,\n        record = _a.record,\n        resource = _a.resource,\n        translate = _a.translate,\n        version = _a.version;\n\n    if (!children) {\n      return null;\n    }\n\n    var resourceName = translate(\"resources.\" + resource + \".name\", {\n      smart_count: 1,\n      _: inflection.humanize(inflection.singularize(resource))\n    });\n    var defaultTitle = translate('ra.page.edit', {\n      name: \"\" + resourceName,\n      id: id,\n      record: record\n    });\n    return children({\n      isLoading: isLoading,\n      defaultTitle: defaultTitle,\n      save: this.save,\n      resource: resource,\n      basePath: basePath,\n      record: record,\n      redirect: this.defaultRedirectRoute(),\n      translate: translate,\n      version: version\n    });\n  };\n\n  return UnconnectedEditController;\n}(Component);\n\nexport { UnconnectedEditController };\n\nfunction mapStateToProps(state, props) {\n  return {\n    id: props.id,\n    record: state.admin.resources[props.resource] ? state.admin.resources[props.resource].data[props.id] : null,\n    isLoading: state.admin.loading > 0,\n    version: state.admin.ui.viewVersion\n  };\n}\n\nvar EditController = compose(checkMinimumRequiredProps('Edit', ['basePath', 'resource']), connect(mapStateToProps, {\n  crudGetOne: crudGetOne,\n  dispatchCrudUpdate: crudUpdate,\n  startUndoable: startUndoableAction,\n  resetForm: reset\n}), withTranslate)(UnconnectedEditController);\nexport default EditController;","map":null,"metadata":{},"sourceType":"module"}