{"ast":null,"code":"'use strict';\n\nvar _create = require('babel-runtime/core-js/object/create');\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar setUpAndTearDown = require('./set-up-and-tear-down');\n\nvar fetchHandler = require('./fetch-handler');\n\nvar inspecting = require('./inspecting');\n\nvar FetchMock = (0, _assign2.default)({}, fetchHandler, setUpAndTearDown, inspecting);\nFetchMock.config = {\n  fallbackToNetwork: false,\n  includeContentLength: true,\n  sendAsJson: true,\n  warnOnFallback: true,\n  overwriteRoutes: undefined\n};\n\nFetchMock.createInstance = function () {\n  var instance = (0, _create2.default)(FetchMock);\n  instance._uncompiledRoutes = (this._uncompiledRoutes || []).slice();\n  instance.routes = instance._uncompiledRoutes.map(function (config) {\n    return instance.compileRoute(config);\n  });\n  instance.fallbackResponse = this.fallbackResponse || undefined;\n  instance.config = (0, _assign2.default)({}, this.config || FetchMock.config);\n  instance._calls = {};\n  instance._allCalls = [];\n  instance._holdingPromises = [];\n  instance.bindMethods();\n  return instance;\n};\n\nFetchMock.bindMethods = function () {\n  this.fetchHandler = FetchMock.fetchHandler.bind(this);\n  this.restore = FetchMock.restore.bind(this);\n  this.reset = FetchMock.reset.bind(this);\n};\n\nFetchMock.sandbox = function () {\n  // this construct allows us to create a fetch-mock instance which is also\n  // a callable function, while circumventing circularity when defining the\n  // object that this function should be bound to\n  var proxy = function proxy(url, options) {\n    return sandbox.fetchHandler(url, options);\n  };\n\n  var sandbox = (0, _assign2.default)(proxy, // Ensures that the entire returned object is a callable function\n  FetchMock, // prototype methods\n  this.createInstance() // instance data\n  );\n  sandbox.bindMethods();\n  sandbox.isSandbox = true;\n  return sandbox;\n};\n\nmodule.exports = FetchMock;","map":null,"metadata":{},"sourceType":"script"}