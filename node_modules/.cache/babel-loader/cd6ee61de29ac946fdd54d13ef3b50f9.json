{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport { default as wrapDisplayName } from 'recompose/wrapDisplayName';\nimport { default as warning } from '../util/warning';\nimport { TranslationContext } from './TranslationContext';\n/**\n * Higher-Order Component for getting access to the `translate` function in props.\n *\n * Requires that the app is decorated by the <TranslationProvider> to inject\n * the translation dictionaries and function in the context.\n *\n * @example\n *     import React from 'react';\n *     import { translate } from 'react-admin';\n *\n *     const MyHelloButton = ({ translate }) => (\n *         <button>{translate('myroot.hello.world')}</button>\n *     );\n *\n *     export default translate(MyHelloButton);\n *\n * @param {*} BaseComponent The component to decorate\n */\n\nvar withTranslate = function withTranslate(BaseComponent) {\n  warning(typeof BaseComponent === 'string', \"The translate function is a Higher Order Component, and should not be called directly with a translation key. Use the translate function passed as prop to your component props instead:\\n\\nconst MyHelloButton = ({ translate }) => (\\n    <button>{translate('myroot.hello.world')}</button>\\n);\"); // tslint:disable-next-line:no-shadowed-variable\n\n  var _a = BaseComponent.defaultProps || {},\n      translateToDiscard = _a.translate,\n      defaultProps = __rest(_a, [\"translate\"]);\n\n  var TranslatedComponent =\n  /** @class */\n  function (_super) {\n    __extends(TranslatedComponent, _super);\n\n    function TranslatedComponent() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    TranslatedComponent.prototype.render = function () {\n      var _this = this;\n\n      return React.createElement(TranslationContext.Consumer, null, function (_a) {\n        var translate = _a.translate,\n            locale = _a.locale;\n        return React.createElement(BaseComponent, __assign({\n          translate: translate,\n          locale: locale\n        }, _this.props));\n      });\n    };\n\n    TranslatedComponent.defaultProps = defaultProps;\n    TranslatedComponent.displayName = wrapDisplayName(BaseComponent, 'translate');\n    return TranslatedComponent;\n  }(Component);\n\n  return TranslatedComponent;\n};\n\nexport default withTranslate;","map":null,"metadata":{},"sourceType":"module"}