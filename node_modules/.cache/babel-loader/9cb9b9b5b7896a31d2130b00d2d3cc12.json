{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { crudGetMany, crudGetMatching } from './dataActions';\nexport var CRUD_GET_MANY_ACCUMULATE = 'RA/CRUD_GET_MANY_ACCUMULATE';\nexport var crudGetManyAccumulate = function crudGetManyAccumulate(resource, ids) {\n  return {\n    type: CRUD_GET_MANY_ACCUMULATE,\n    payload: {\n      resource: resource,\n      ids: ids\n    },\n    meta: {\n      accumulate: crudGetMany\n    }\n  };\n};\nexport var CRUD_GET_MATCHING_ACCUMULATE = 'RA/CRUD_GET_MATCHING_ACCUMULATE';\nexport var crudGetMatchingAccumulate = function crudGetMatchingAccumulate(reference, relatedTo, pagination, sort, filter) {\n  var action = crudGetMatching(reference, relatedTo, pagination, sort, filter);\n  return {\n    type: CRUD_GET_MATCHING_ACCUMULATE,\n    meta: {\n      accumulate: function accumulate() {\n        return action;\n      },\n      accumulateValues: function accumulateValues() {\n        return true;\n      },\n      accumulateKey: JSON.stringify(__assign({\n        resource: reference,\n        relatedTo: relatedTo\n      }, action.payload))\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}