{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport CardContentInner from '../layout/CardContentInner';\nimport Labeled from '../input/Labeled';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var children = _a.children,\n      className = _a.className,\n      record = _a.record,\n      resource = _a.resource,\n      basePath = _a.basePath,\n      version = _a.version,\n      initialValues = _a.initialValues,\n      translate = _a.translate,\n      rest = __rest(_a, [\"children\", \"className\", \"record\", \"resource\", \"basePath\", \"version\", \"initialValues\", \"translate\"]);\n\n  return rest;\n};\n/**\n * Simple Layout for a Show view, showing fields in one column.\n *\n * Receives the current `record` from the parent `<Show>` component,\n * and passes it to its childen. Children should be Field-like components.\n *\n * @example\n *     // in src/posts.js\n *     import React from 'react';\n *     import { Show, SimpleShowLayout, TextField } from 'react-admin';\n *\n *     export const PostShow = (props) => (\n *         <Show {...props}>\n *             <SimpleShowLayout>\n *                 <TextField source=\"title\" />\n *             </SimpleShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import React from 'react';\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\n\n\nexport var SimpleShowLayout = function SimpleShowLayout(_a) {\n  var basePath = _a.basePath,\n      className = _a.className,\n      children = _a.children,\n      record = _a.record,\n      resource = _a.resource,\n      version = _a.version,\n      rest = __rest(_a, [\"basePath\", \"className\", \"children\", \"record\", \"resource\", \"version\"]);\n\n  return React.createElement(CardContentInner, __assign({\n    className: className,\n    key: version\n  }, sanitizeRestProps(rest)), Children.map(children, function (field) {\n    return field ? React.createElement(\"div\", {\n      key: field.props.source,\n      className: classnames(\"ra-field ra-field-\" + field.props.source, field.props.className)\n    }, field.props.addLabel ? React.createElement(Labeled, {\n      record: record,\n      resource: resource,\n      basePath: basePath,\n      label: field.props.label,\n      source: field.props.source,\n      disabled: false\n    }, field) : typeof field.type === 'string' ? field : React.cloneElement(field, {\n      record: record,\n      resource: resource,\n      basePath: basePath\n    })) : null;\n  }));\n};\nSimpleShowLayout.propTypes = {\n  basePath: PropTypes.string,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  record: PropTypes.object,\n  resource: PropTypes.string,\n  version: PropTypes.number\n};\nexport default SimpleShowLayout;","map":null,"metadata":{},"sourceType":"module"}