{"ast":null,"code":"var isMatchingReferencesError = function isMatchingReferencesError(matchingReferences) {\n  return matchingReferences && matchingReferences.error !== undefined;\n};\n\nexport var getStatusForInput = function getStatusForInput(_a) {\n  var input = _a.input,\n      matchingReferences = _a.matchingReferences,\n      referenceRecord = _a.referenceRecord,\n      _b = _a.translate,\n      translate = _b === void 0 ? function (x) {\n    return x;\n  } : _b;\n  var matchingReferencesError = isMatchingReferencesError(matchingReferences) ? translate(matchingReferences.error, {\n    _: matchingReferences.error\n  }) : null;\n  var selectedReferenceError = input.value && !referenceRecord ? translate('ra.input.references.single_missing', {\n    _: 'ra.input.references.single_missing'\n  }) : null;\n  return {\n    waiting: input.value && selectedReferenceError && !matchingReferences || !input.value && !matchingReferences,\n    error: input.value && selectedReferenceError && matchingReferencesError || !input.value && matchingReferencesError ? input.value ? selectedReferenceError : matchingReferencesError : null,\n    warning: selectedReferenceError || matchingReferencesError,\n    choices: Array.isArray(matchingReferences) ? matchingReferences : [referenceRecord].filter(function (choice) {\n      return choice;\n    })\n  };\n};\nexport var REFERENCES_STATUS_READY = 'REFERENCES_STATUS_READY';\nexport var REFERENCES_STATUS_INCOMPLETE = 'REFERENCES_STATUS_INCOMPLETE';\nexport var REFERENCES_STATUS_EMPTY = 'REFERENCES_STATUS_EMPTY';\nexport var getSelectedReferencesStatus = function getSelectedReferencesStatus(input, referenceRecords) {\n  return !input.value || input.value.length === referenceRecords.length ? REFERENCES_STATUS_READY : referenceRecords.length > 0 ? REFERENCES_STATUS_INCOMPLETE : REFERENCES_STATUS_EMPTY;\n};\nexport var getStatusForArrayInput = function getStatusForArrayInput(_a) {\n  var input = _a.input,\n      matchingReferences = _a.matchingReferences,\n      referenceRecords = _a.referenceRecords,\n      _b = _a.translate,\n      translate = _b === void 0 ? function (x) {\n    return x;\n  } : _b; // selectedReferencesData can be \"empty\" (no data was found for references from input.value)\n  // or \"incomplete\" (Not all of the reference data was found)\n  // or \"ready\" (all references data was found or there is no references from input.value)\n\n  var selectedReferencesData = getSelectedReferencesStatus(input, referenceRecords);\n  var matchingReferencesError = isMatchingReferencesError(matchingReferences) ? translate(matchingReferences.error, {\n    _: matchingReferences.error\n  }) : null;\n  return {\n    waiting: !matchingReferences && input.value && selectedReferencesData === REFERENCES_STATUS_EMPTY || !matchingReferences && !input.value,\n    error: matchingReferencesError && (!input.value || input.value && selectedReferencesData === REFERENCES_STATUS_EMPTY) ? translate('ra.input.references.all_missing', {\n      _: 'ra.input.references.all_missing'\n    }) : null,\n    warning: matchingReferencesError || input.value && selectedReferencesData !== REFERENCES_STATUS_READY ? matchingReferencesError || translate('ra.input.references.many_missing', {\n      _: 'ra.input.references.many_missing'\n    }) : null,\n    choices: Array.isArray(matchingReferences) ? matchingReferences : referenceRecords\n  };\n};","map":null,"metadata":{},"sourceType":"module"}