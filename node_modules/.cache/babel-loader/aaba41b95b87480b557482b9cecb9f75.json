{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { GET_LIST, GET_MANY, GET_MANY_REFERENCE, DELETE } from 'ra-core';\nimport { QUERY_TYPES } from 'ra-data-graphql';\nimport { TypeKind } from 'graphql';\nimport * as gqlTypes from 'graphql-ast-types-browser';\nimport getFinalType from './getFinalType';\nimport isList from './isList';\nimport isRequired from './isRequired';\nexport var buildFields = function buildFields(introspectionResults) {\n  return function (fields) {\n    return fields.reduce(function (acc, field) {\n      var type = getFinalType(field.type);\n\n      if (type.name.startsWith('_')) {\n        return acc;\n      }\n\n      if (type.kind !== TypeKind.OBJECT) {\n        return acc.concat([gqlTypes.field(gqlTypes.name(field.name))]);\n      }\n\n      var linkedResource = introspectionResults.resources.find(function (r) {\n        return r.type.name === type.name;\n      });\n\n      if (linkedResource) {\n        return acc.concat([gqlTypes.field(gqlTypes.name(field.name), null, null, null, gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name('id'))]))]);\n      }\n\n      var linkedType = introspectionResults.types.find(function (t) {\n        return t.name === type.name;\n      });\n\n      if (linkedType) {\n        return acc.concat([gqlTypes.field(gqlTypes.name(field.name), null, null, null, gqlTypes.selectionSet(buildFields(introspectionResults)(linkedType.fields)))]);\n      } // NOTE: We might have to handle linked types which are not resources but will have to be careful about\n      // ending with endless circular dependencies\n\n\n      return acc;\n    }, []);\n  };\n};\nexport var getArgType = function getArgType(arg) {\n  var type = getFinalType(arg.type);\n  var required = isRequired(arg.type);\n  var list = isList(arg.type);\n\n  if (list) {\n    if (required) {\n      return gqlTypes.listType(gqlTypes.nonNullType(gqlTypes.namedType(gqlTypes.name(type.name))));\n    }\n\n    return gqlTypes.listType(gqlTypes.namedType(gqlTypes.name(type.name)));\n  }\n\n  if (required) {\n    return gqlTypes.nonNullType(gqlTypes.namedType(gqlTypes.name(type.name)));\n  }\n\n  return gqlTypes.namedType(gqlTypes.name(type.name));\n};\nexport var buildArgs = function buildArgs(query, variables) {\n  if (query.args.length === 0) {\n    return [];\n  }\n\n  var validVariables = Object.keys(variables).filter(function (k) {\n    return typeof variables[k] !== 'undefined';\n  });\n  var args = query.args.filter(function (a) {\n    return validVariables.includes(a.name);\n  }).reduce(function (acc, arg) {\n    return acc.concat([gqlTypes.argument(gqlTypes.name(arg.name), gqlTypes.variable(gqlTypes.name(arg.name)))]);\n  }, []);\n  return args;\n};\nexport var buildApolloArgs = function buildApolloArgs(query, variables) {\n  if (query.args.length === 0) {\n    return [];\n  }\n\n  var validVariables = Object.keys(variables).filter(function (k) {\n    return typeof variables[k] !== 'undefined';\n  });\n  var args = query.args.filter(function (a) {\n    return validVariables.includes(a.name);\n  }).reduce(function (acc, arg) {\n    return acc.concat([gqlTypes.variableDefinition(gqlTypes.variable(gqlTypes.name(arg.name)), getArgType(arg))]);\n  }, []);\n  return args;\n};\nexport default (function (introspectionResults) {\n  return function (resource, aorFetchType, queryType, variables) {\n    var sortField = variables.sortField,\n        sortOrder = variables.sortOrder,\n        metaVariables = __rest(variables, [\"sortField\", \"sortOrder\"]);\n\n    var apolloArgs = buildApolloArgs(queryType, variables);\n    var args = buildArgs(queryType, variables);\n    var metaArgs = buildArgs(queryType, metaVariables);\n    var fields = buildFields(introspectionResults)(resource.type.fields);\n\n    if (aorFetchType === GET_LIST || aorFetchType === GET_MANY || aorFetchType === GET_MANY_REFERENCE) {\n      return gqlTypes.document([gqlTypes.operationDefinition('query', gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name(queryType.name), gqlTypes.name('items'), args, null, gqlTypes.selectionSet(fields)), gqlTypes.field(gqlTypes.name(\"_\" + queryType.name + \"Meta\"), gqlTypes.name('total'), metaArgs, null, gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name('count'))]))]), gqlTypes.name(queryType.name), apolloArgs)]);\n    }\n\n    if (aorFetchType === DELETE) {\n      return gqlTypes.document([gqlTypes.operationDefinition('mutation', gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name(queryType.name), gqlTypes.name('data'), args, null, gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name('id'))]))]), gqlTypes.name(queryType.name), apolloArgs)]);\n    }\n\n    return gqlTypes.document([gqlTypes.operationDefinition(QUERY_TYPES.includes(aorFetchType) ? 'query' : 'mutation', gqlTypes.selectionSet([gqlTypes.field(gqlTypes.name(queryType.name), gqlTypes.name('data'), args, null, gqlTypes.selectionSet(fields))]), gqlTypes.name(queryType.name), apolloArgs)]);\n  };\n});","map":null,"metadata":{},"sourceType":"module"}