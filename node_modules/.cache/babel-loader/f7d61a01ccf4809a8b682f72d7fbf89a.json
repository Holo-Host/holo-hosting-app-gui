{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { take, takeEvery, put, race } from 'redux-saga/effects';\nimport { showNotification } from '../actions/notificationActions';\nimport { UNDOABLE, UNDO, COMPLETE, startOptimisticMode, stopOptimisticMode } from '../actions/undoActions';\nimport { refreshView } from '../actions/uiActions';\nexport function handleUndoRace(undoableAction) {\n  var action, _a, onSuccess, onFailure, metaWithoutSideEffects, complete;\n\n  return __generator(this, function (_b) {\n    switch (_b.label) {\n      case 0:\n        action = undoableAction.payload.action;\n        _a = action.meta, onSuccess = _a.onSuccess, onFailure = _a.onFailure, metaWithoutSideEffects = __rest(_a, [\"onSuccess\", \"onFailure\"]);\n        return [4\n        /*yield*/\n        , put(startOptimisticMode())];\n\n      case 1:\n        _b.sent(); // dispatch action in optimistic mode (no fetch), with success side effects\n\n\n        return [4\n        /*yield*/\n        , put(__assign({}, action, {\n          type: action.type + \"_OPTIMISTIC\",\n          meta: __assign({}, metaWithoutSideEffects, onSuccess, {\n            optimistic: true\n          })\n        }))];\n\n      case 2:\n        // dispatch action in optimistic mode (no fetch), with success side effects\n        _b.sent();\n\n        return [4\n        /*yield*/\n        , race({\n          undo: take(UNDO),\n          complete: take(COMPLETE)\n        })];\n\n      case 3:\n        complete = _b.sent().complete;\n        return [4\n        /*yield*/\n        , put(stopOptimisticMode())];\n\n      case 4:\n        _b.sent();\n\n        if (!complete) return [3\n        /*break*/\n        , 6]; // if not cancelled, redispatch the action, this time immediate, and without success side effect\n\n        return [4\n        /*yield*/\n        , put(__assign({}, action, {\n          meta: __assign({}, metaWithoutSideEffects, {\n            onSuccess: {\n              refresh: true\n            },\n            onFailure: __assign({}, onFailure, {\n              refresh: true\n            })\n          })\n        }))];\n\n      case 5:\n        // if not cancelled, redispatch the action, this time immediate, and without success side effect\n        _b.sent();\n\n        return [3\n        /*break*/\n        , 9];\n\n      case 6:\n        return [4\n        /*yield*/\n        , put(showNotification('ra.notification.canceled'))];\n\n      case 7:\n        _b.sent();\n\n        return [4\n        /*yield*/\n        , put(refreshView())];\n\n      case 8:\n        _b.sent();\n\n        _b.label = 9;\n\n      case 9:\n        return [2\n        /*return*/\n        ];\n    }\n  });\n}\nexport default function watchUndoable() {\n  return __generator(this, function (_a) {\n    switch (_a.label) {\n      case 0:\n        // @ts-ignore\n        return [4\n        /*yield*/\n        , takeEvery(UNDOABLE, handleUndoRace)];\n\n      case 1:\n        // @ts-ignore\n        _a.sent();\n\n        return [2\n        /*return*/\n        ];\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}