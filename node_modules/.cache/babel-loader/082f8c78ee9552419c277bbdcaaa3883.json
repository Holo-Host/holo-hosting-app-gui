{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport React, { Children, Component } from 'react';\nimport Polyglot from 'node-polyglot';\nimport { connect } from 'react-redux';\nimport defaultMessages from 'ra-language-english';\nimport defaultsDeep from 'lodash/defaultsDeep';\nimport { TranslationContext } from './TranslationContext';\n/**\n * Creates a translation context, available to its children\n *\n * Must be called within a Redux app.\n *\n * @example\n *     const MyApp = () => (\n *         <Provider store={store}>\n *             <TranslationProvider locale=\"fr\" messages={messages}>\n *                 <!-- Child components go here -->\n *             </TranslationProvider>\n *         </Provider>\n *     );\n */\n\nvar TranslationProviderView =\n/** @class */\nfunction (_super) {\n  __extends(TranslationProviderView, _super);\n\n  function TranslationProviderView(props) {\n    var _this = _super.call(this, props) || this;\n\n    var locale = props.locale,\n        messages = props.messages;\n    var polyglot = new Polyglot({\n      locale: locale,\n      phrases: defaultsDeep({\n        '': ''\n      }, messages, defaultMessages)\n    });\n    _this.state = {\n      contextValues: {\n        locale: locale,\n        translate: polyglot.t.bind(polyglot)\n      }\n    };\n    return _this;\n  }\n\n  TranslationProviderView.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.locale !== this.props.locale) {\n      var _a = this.props,\n          locale = _a.locale,\n          messages = _a.messages;\n      var polyglot = new Polyglot({\n        locale: locale,\n        phrases: defaultsDeep({\n          '': ''\n        }, messages, defaultMessages)\n      });\n      this.setState({\n        contextValues: {\n          locale: locale,\n          translate: polyglot.t.bind(polyglot)\n        }\n      });\n    }\n  };\n\n  TranslationProviderView.prototype.render = function () {\n    var children = this.props.children;\n    var contextValues = this.state.contextValues;\n    return React.createElement(TranslationContext.Provider, {\n      value: contextValues\n    }, Children.only(children));\n  };\n\n  return TranslationProviderView;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    locale: state.i18n.locale,\n    messages: state.i18n.messages\n  };\n};\n\nvar TranslationProvider = connect(mapStateToProps)(TranslationProviderView);\nexport default TranslationProvider;","map":null,"metadata":{},"sourceType":"module"}