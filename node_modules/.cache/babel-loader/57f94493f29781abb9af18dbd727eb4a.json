{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultChipRenderer = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Input = require('@material-ui/core/Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nvar _InputLabel = require('@material-ui/core/InputLabel');\n\nvar _InputLabel2 = _interopRequireDefault(_InputLabel);\n\nvar _Chip = require('@material-ui/core/Chip');\n\nvar _Chip2 = _interopRequireDefault(_Chip);\n\nvar _withStyles = require('@material-ui/core/styles/withStyles');\n\nvar _withStyles2 = _interopRequireDefault(_withStyles);\n\nvar _blue = require('@material-ui/core/colors/blue');\n\nvar _blue2 = _interopRequireDefault(_blue);\n\nvar _FormControl = require('@material-ui/core/FormControl');\n\nvar _FormControl2 = _interopRequireDefault(_FormControl);\n\nvar _FormHelperText = require('@material-ui/core/FormHelperText');\n\nvar _FormHelperText2 = _interopRequireDefault(_FormHelperText);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Notice: Some code was adapted from Material-UI's text field.\n *         Copyright (c) 2014 Call-Em-All (https://github.com/callemall/material-ui)\n */\n\n\nvar styles = function styles(theme) {\n  var light = theme.palette.type === 'light';\n  var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';\n  return {\n    root: {},\n    inputRoot: {\n      display: 'inline-block',\n      marginTop: 0\n    },\n    input: {\n      display: 'inline-block',\n      appearance: 'none',\n      // Remove border in Safari, doesn't seem to break anything in other browsers\n      WebkitTapHighlightColor: 'rgba(0,0,0,0)',\n      // Remove mobile color flashing (deprecated style).\n      float: 'left'\n    },\n    chipContainer: {\n      cursor: 'text',\n      marginBottom: -2,\n      minHeight: 40,\n      '&$labeled': {\n        marginTop: 18\n      }\n    },\n    labeled: {},\n    label: {\n      top: 4\n    },\n    labelShrink: {\n      top: 0\n    },\n    helperText: {\n      marginBottom: -20\n    },\n    inkbar: {\n      '&:after': {\n        backgroundColor: theme.palette.primary[light ? 'dark' : 'light'],\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\"',\n        height: 2,\n        position: 'absolute',\n        right: 0,\n        transform: 'scaleX(0)',\n        transition: theme.transitions.create('transform', {\n          duration: theme.transitions.duration.shorter,\n          easing: theme.transitions.easing.easeOut\n        }),\n        pointerEvents: 'none' // Transparent to the hover style.\n\n      },\n      '&$focused:after': {\n        transform: 'scaleX(1)'\n      }\n    },\n    focused: {},\n    disabled: {},\n    underline: {\n      '&:before': {\n        backgroundColor: bottomLineColor,\n        left: 0,\n        bottom: 0,\n        // Doing the other way around crash on IE11 \"''\" https://github.com/cssinjs/jss/issues/242\n        content: '\"\"',\n        height: 1,\n        position: 'absolute',\n        right: 0,\n        transition: theme.transitions.create('background-color', {\n          duration: theme.transitions.duration.shorter,\n          easing: theme.transitions.easing.ease\n        }),\n        pointerEvents: 'none' // Transparent to the hover style.\n\n      },\n      '&:hover:not($disabled):before': {\n        backgroundColor: theme.palette.text.primary,\n        height: 2\n      },\n      '&$disabled:before': {\n        background: 'transparent',\n        backgroundImage: 'linear-gradient(to right, ' + bottomLineColor + ' 33%, transparent 0%)',\n        backgroundPosition: 'left top',\n        backgroundRepeat: 'repeat-x',\n        backgroundSize: '5px 1px'\n      }\n    },\n    error: {\n      '&:after': {\n        backgroundColor: theme.palette.error.main,\n        transform: 'scaleX(1)' // error is always underlined in red\n\n      }\n    },\n    chip: {\n      margin: '0 8px 8px 0',\n      float: 'left'\n    }\n  };\n};\n\nvar ChipInput = function (_React$Component) {\n  _inherits(ChipInput, _React$Component);\n\n  function ChipInput(props) {\n    _classCallCheck(this, ChipInput);\n\n    var _this = _possibleConstructorReturn(this, (ChipInput.__proto__ || Object.getPrototypeOf(ChipInput)).call(this, props));\n\n    _this.state = {\n      isFocused: false,\n      errorText: undefined,\n      isClean: true,\n      chips: [],\n      focusedChip: null,\n      inputValue: ''\n    };\n\n    _this.focus = function () {\n      _this.actualInput.focus();\n\n      if (_this.state.focusedChip != null) {\n        _this.setState({\n          focusedChip: null\n        });\n      }\n    };\n\n    _this.handleInputBlur = function (event) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event);\n      }\n\n      _this.setState({\n        isFocused: false\n      });\n\n      if (_this.state.focusedChip != null) {\n        _this.setState({\n          focusedChip: null\n        });\n      }\n\n      if (_this.props.blurBehavior === 'add') {\n        // Lets assume that we only want to add the existing content as chip, when\n        // another event has not added a chip within 200ms .\n        // e.g. onSelection Callback in Autocomplete case\n        var numChipsBefore = (_this.props.value || _this.state.chips).length;\n        var value = event.target.value;\n        _this.inputBlurTimeout = setTimeout(function () {\n          var numChipsAfter = (_this.props.value || _this.state.chips).length;\n\n          if (numChipsBefore === numChipsAfter) {\n            _this.handleAddChip(value);\n          } else {\n            _this.clearInput();\n          }\n        }, 150);\n      } else if (_this.props.blurBehavior === 'clear') {\n        _this.clearInput();\n      }\n    };\n\n    _this.handleInputFocus = function (event) {\n      _this.setState({\n        isFocused: true\n      });\n\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n    };\n\n    _this.handleKeyDown = function (event) {\n      var focusedChip = _this.state.focusedChip;\n\n      _this.setState({\n        keyPressed: false,\n        preventChipCreation: false\n      });\n\n      if (_this.props.onKeyDown) {\n        // Needed for arrow controls on menu in autocomplete scenario\n        _this.props.onKeyDown(event); // Check if the callback marked the event as isDefaultPrevented() and skip further actions\n        // enter key for example should not always add the current value of the inputField\n\n\n        if (event.isDefaultPrevented()) {\n          return;\n        }\n      }\n\n      if (_this.props.newChipKeyCodes.indexOf(event.keyCode) >= 0) {\n        var result = _this.handleAddChip(event.target.value);\n\n        if (result !== false) {\n          event.preventDefault();\n        }\n      } else if (event.keyCode === 8 || event.keyCode === 46) {\n        if (event.target.value === '') {\n          var chips = _this.props.value || _this.state.chips;\n\n          if (focusedChip == null && event.keyCode === 8) {\n            _this.setState({\n              focusedChip: chips.length - 1\n            });\n          } else if (focusedChip != null) {\n            var _chips = _this.props.value || _this.state.chips;\n\n            var value = _chips[focusedChip];\n\n            _this.handleDeleteChip(value, focusedChip);\n\n            if (event.keyCode === 8 && focusedChip > 0) {\n              _this.setState({\n                focusedChip: focusedChip - 1\n              });\n            } else if (event.keyCode === 46 && focusedChip <= _chips.length - 1) {\n              _this.setState({\n                focusedChip: focusedChip\n              });\n            }\n          }\n        }\n      } else if (event.keyCode === 37) {\n        var _chips2 = _this.props.value || _this.state.chips;\n\n        if (focusedChip == null && event.target.value === '' && _chips2.length) {\n          return _this.setState({\n            focusedChip: _chips2.length - 1\n          });\n        }\n\n        if (focusedChip != null && focusedChip > 0) {\n          _this.setState({\n            focusedChip: focusedChip - 1\n          });\n        }\n      } else if (event.keyCode === 39) {\n        var _chips3 = _this.props.value || _this.state.chips;\n\n        if (focusedChip != null && focusedChip < _chips3.length - 1) {\n          _this.setState({\n            focusedChip: focusedChip + 1\n          });\n        } else {\n          _this.setState({\n            focusedChip: null\n          });\n        }\n      } else {\n        _this.setState({\n          focusedChip: null\n        });\n      }\n    };\n\n    _this.handleKeyUp = function (event) {\n      if (!_this.state.preventChipCreation && _this.props.newChipKeyCodes.indexOf(event.keyCode) > 0 && _this.state.keyPressed) {\n        _this.clearInput();\n      } else {\n        _this.setState({\n          inputValue: event.target.value\n        });\n      }\n\n      if (_this.props.onKeyUp) {\n        _this.props.onKeyUp(event);\n      }\n    };\n\n    _this.handleKeyPress = function (event) {\n      _this.setState({\n        keyPressed: true\n      });\n\n      if (_this.props.onKeyPress) {\n        _this.props.onKeyPress(event);\n      }\n    };\n\n    _this.handleUpdateInput = function (e) {\n      _this.setState({\n        inputValue: e.target.value\n      });\n\n      if (_this.props.onUpdateInput) {\n        _this.props.onUpdateInput(e);\n      }\n    };\n\n    _this.setInputRef = function (input) {\n      _this.input = input;\n    };\n\n    _this.setActualInputRef = function (ref) {\n      _this.actualInput = ref;\n\n      if (_this.props.inputRef) {\n        _this.props.inputRef(ref);\n      }\n    };\n\n    if (props.defaultValue) {\n      _this.state.chips = props.defaultValue;\n    }\n\n    return _this;\n  }\n\n  _createClass(ChipInput, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.inputBlurTimeout);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.disabled) {\n        this.setState({\n          focusedChip: null\n        });\n      } // Lets assume that if the chips have changed, the inputValue should be empty\n      // otherwise, we would need to make inputValue a controlled value. which is quite messy\n\n\n      if (nextProps.value && this.props.clearInputValueOnChange && nextProps.value.length !== this.props.value.length) {\n        this.setState({\n          inputValue: ''\n        });\n      }\n    }\n    /**\n     * Blurs this component.\n     * @public\n     */\n\n  }, {\n    key: 'blur',\n    value: function blur() {\n      if (this.input) this.actualInput.blur();\n    }\n    /**\n     * Focuses this component.\n     * @public\n     */\n\n  }, {\n    key: 'handleAddChip',\n\n    /**\n     * Handles adding a chip.\n     * @param {string|object} chip Value of the chip, either a string or an object (if dataSourceConfig is set)\n     * @returns True if the chip was added (or at least `onAdd` was called), false if adding the chip was prevented\n     */\n    value: function handleAddChip(chip) {\n      var _this2 = this;\n\n      if (this.props.onBeforeAdd && !this.props.onBeforeAdd(chip)) {\n        this.setState({\n          preventChipCreation: true\n        });\n        return false;\n      }\n\n      this.setState({\n        inputValue: ''\n      });\n      var chips = this.props.value || this.state.chips;\n\n      if (this.props.dataSourceConfig) {\n        if (typeof chip === 'string') {\n          var _chip;\n\n          chip = (_chip = {}, _defineProperty(_chip, this.props.dataSourceConfig.text, chip), _defineProperty(_chip, this.props.dataSourceConfig.value, chip), _chip);\n        }\n\n        if (this.props.allowDuplicates || !chips.some(function (c) {\n          return c[_this2.props.dataSourceConfig.value] === chip[_this2.props.dataSourceConfig.value];\n        })) {\n          if (this.props.value && this.props.onAdd) {\n            this.props.onAdd(chip);\n          } else {\n            this.setState({\n              chips: [].concat(_toConsumableArray(this.state.chips), [chip])\n            });\n\n            if (this.props.onChange) {\n              this.props.onChange([].concat(_toConsumableArray(this.state.chips), [chip]));\n            }\n          }\n        }\n      } else if (chip.trim().length > 0) {\n        if (this.props.allowDuplicates || chips.indexOf(chip) === -1) {\n          if (this.props.value && this.props.onAdd) {\n            this.props.onAdd(chip);\n          } else {\n            this.setState({\n              chips: [].concat(_toConsumableArray(this.state.chips), [chip])\n            });\n\n            if (this.props.onChange) {\n              this.props.onChange([].concat(_toConsumableArray(this.state.chips), [chip]));\n            }\n          }\n        }\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'handleDeleteChip',\n    value: function handleDeleteChip(chip, i) {\n      if (this.props.value) {\n        if (this.props.onDelete) {\n          this.props.onDelete(chip, i);\n        }\n      } else {\n        var chips = this.state.chips.slice();\n        var changed = chips.splice(i, 1); // remove the chip at index i\n\n        if (changed) {\n          var focusedChip = this.state.focusedChip;\n\n          if (this.state.focusedChip === i) {\n            focusedChip = null;\n          } else if (this.state.focusedChip > i) {\n            focusedChip = this.state.focusedChip - 1;\n          }\n\n          this.setState({\n            chips: chips,\n            focusedChip: focusedChip\n          });\n\n          if (this.props.onChange) {\n            this.props.onChange(chips);\n          }\n        }\n      }\n    }\n    /**\n     * Clears the text field for adding new chips.\n     * @public\n     */\n\n  }, {\n    key: 'clearInput',\n    value: function clearInput() {\n      this.setState({\n        inputValue: ''\n      });\n    }\n    /**\n     * Sets a reference to the Material-UI Input component.\n     * @param {object} input - The Input reference\n     */\n\n    /**\n     * Set the reference to the actual input, that is the input of the Input.\n     * @param {object} ref - The reference\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _cx,\n          _this3 = this;\n\n      var _props = this.props,\n          allowDuplicates = _props.allowDuplicates,\n          blurBehavior = _props.blurBehavior,\n          children = _props.children,\n          _props$chipRenderer = _props.chipRenderer,\n          chipRenderer = _props$chipRenderer === undefined ? defaultChipRenderer : _props$chipRenderer,\n          classes = _props.classes,\n          className = _props.className,\n          clearInputValueOnChange = _props.clearInputValueOnChange,\n          defaultValue = _props.defaultValue,\n          dataSource = _props.dataSource,\n          dataSourceConfig = _props.dataSourceConfig,\n          disabled = _props.disabled,\n          disableUnderline = _props.disableUnderline,\n          error = _props.error,\n          filter = _props.filter,\n          FormHelperTextProps = _props.FormHelperTextProps,\n          fullWidth = _props.fullWidth,\n          fullWidthInput = _props.fullWidthInput,\n          helperText = _props.helperText,\n          id = _props.id,\n          InputProps = _props.InputProps,\n          inputRef = _props.inputRef,\n          _props$InputLabelProp = _props.InputLabelProps,\n          InputLabelProps = _props$InputLabelProp === undefined ? {} : _props$InputLabelProp,\n          label = _props.label,\n          newChipKeyCodes = _props.newChipKeyCodes,\n          onBeforeAdd = _props.onBeforeAdd,\n          onAdd = _props.onAdd,\n          onBlur = _props.onBlur,\n          onDelete = _props.onDelete,\n          onChange = _props.onChange,\n          onFocus = _props.onFocus,\n          onKeyDown = _props.onKeyDown,\n          onKeyPress = _props.onKeyPress,\n          onKeyUp = _props.onKeyUp,\n          onUpdateInput = _props.onUpdateInput,\n          placeholder = _props.placeholder,\n          required = _props.required,\n          rootRef = _props.rootRef,\n          value = _props.value,\n          other = _objectWithoutProperties(_props, ['allowDuplicates', 'blurBehavior', 'children', 'chipRenderer', 'classes', 'className', 'clearInputValueOnChange', 'defaultValue', 'dataSource', 'dataSourceConfig', 'disabled', 'disableUnderline', 'error', 'filter', 'FormHelperTextProps', 'fullWidth', 'fullWidthInput', 'helperText', 'id', 'InputProps', 'inputRef', 'InputLabelProps', 'label', 'newChipKeyCodes', 'onBeforeAdd', 'onAdd', 'onBlur', 'onDelete', 'onChange', 'onFocus', 'onKeyDown', 'onKeyPress', 'onKeyUp', 'onUpdateInput', 'placeholder', 'required', 'rootRef', 'value']);\n\n      var chips = this.props.value || this.state.chips;\n      var hasInput = (this.props.value || this.state.chips).length > 0 || this.state.inputValue.length > 0;\n      var shrinkFloatingLabel = InputLabelProps.shrink != null ? InputLabelProps.shrink : label != null && (hasInput || this.state.isFocused);\n      return _react2.default.createElement(_FormControl2.default, _extends({\n        ref: rootRef,\n        fullWidth: fullWidth,\n        className: (0, _classnames2.default)(className, classes.root),\n        error: error,\n        required: required,\n        onClick: this.focus,\n        disabled: disabled\n      }, other), label && _react2.default.createElement(_InputLabel2.default, _extends({\n        htmlFor: id,\n        classes: {\n          root: classes.label,\n          shrink: classes.labelShrink\n        },\n        shrink: shrinkFloatingLabel,\n        focused: this.state.isFocused\n      }, InputLabelProps), label), _react2.default.createElement('div', {\n        className: (0, _classnames2.default)(classes.chipContainer, (_cx = {}, _defineProperty(_cx, classes.inkbar, !disableUnderline), _defineProperty(_cx, classes.focused, this.state.isFocused), _defineProperty(_cx, classes.underline, !disableUnderline), _defineProperty(_cx, classes.disabled, disabled), _defineProperty(_cx, classes.labeled, label != null), _defineProperty(_cx, classes.error, error), _cx))\n      }, chips.map(function (tag, i) {\n        var value = dataSourceConfig ? tag[dataSourceConfig.value] : tag;\n        return chipRenderer({\n          value: value,\n          text: dataSourceConfig ? tag[dataSourceConfig.text] : tag,\n          chip: tag,\n          isDisabled: !!disabled,\n          isFocused: _this3.state.focusedChip === i,\n          handleClick: function handleClick() {\n            return _this3.setState({\n              focusedChip: i\n            });\n          },\n          handleDelete: function handleDelete() {\n            return _this3.handleDeleteChip(value, i);\n          },\n          className: classes.chip\n        }, i);\n      }), _react2.default.createElement(_Input2.default, _extends({\n        ref: this.setInputRef,\n        classes: {\n          input: classes.input,\n          root: classes.inputRoot\n        },\n        id: id,\n        value: this.state.inputValue,\n        onChange: this.handleUpdateInput,\n        onKeyDown: this.handleKeyDown,\n        onKeyPress: this.handleKeyPress,\n        onKeyUp: this.handleKeyUp,\n        onFocus: this.handleInputFocus,\n        onBlur: this.handleInputBlur,\n        inputRef: this.setActualInputRef,\n        disabled: disabled,\n        disableUnderline: true,\n        fullWidth: fullWidthInput,\n        placeholder: !hasInput && (shrinkFloatingLabel || label == null) ? placeholder : null\n      }, InputProps))), helperText && _react2.default.createElement(_FormHelperText2.default, _extends({}, FormHelperTextProps, {\n        className: FormHelperTextProps ? (0, _classnames2.default)(FormHelperTextProps.className, classes.helperText) : classes.helperText\n      }), helperText));\n    }\n  }]);\n\n  return ChipInput;\n}(_react2.default.Component);\n\nChipInput.propTypes = {\n  /** Allows duplicate chips if set to true. */\n  allowDuplicates: _propTypes2.default.bool,\n\n  /** Behavior when the chip input is blurred: `'clear'` clears the input, `'add'` creates a chip and `'ignore'` keeps the input. */\n  blurBehavior: _propTypes2.default.oneOf(['clear', 'add', 'ignore']),\n\n  /** A function of the type `({ value, text, chip, isFocused, isDisabled, handleClick, handleDelete, className }, key) => node` that returns a chip based on the given properties. This can be used to customize chip styles.  Each item in the `dataSource` array will be passed to `chipRenderer` as arguments `chip`, `value` and `text`. If `dataSource` is an array of objects and `dataSourceConfig` is present, then `value` and `text` will instead correspond to the object values defined in `dataSourceConfig`. If `dataSourceConfig` is not set and `dataSource` is an array of objects, then a custom `chipRenderer` must be set. `chip` is always the raw value from `dataSource`, either an object or a string. */\n  chipRenderer: _propTypes2.default.func,\n\n  /** Whether the input value should be cleared if the `value` prop is changed. */\n  clearInputValueOnChange: _propTypes2.default.bool,\n\n  /** Data source for auto complete. This should be an array of strings or objects. */\n  dataSource: _propTypes2.default.array,\n\n  /** Config for objects list dataSource, e.g. `{ text: 'text', value: 'value' }`. If not specified, the `dataSource` must be a flat array of strings or a custom `chipRenderer` must be set to handle the objects. */\n  dataSourceConfig: _propTypes2.default.shape({\n    text: _propTypes2.default.string.isRequired,\n    value: _propTypes2.default.string.isRequired\n  }),\n\n  /** The chips to display by default (for uncontrolled mode). */\n  defaultValue: _propTypes2.default.array,\n\n  /** Disables the chip input if set to true. */\n  disabled: _propTypes2.default.bool,\n\n  /** Props to pass through to the `FormHelperText` component. */\n  FormHelperTextProps: _propTypes2.default.object,\n\n  /** If true, the chip input will fill the available width. */\n  fullWidth: _propTypes2.default.bool,\n\n  /** If true, the input field will always be below the chips and fill the available space. By default, it will try to be beside the chips. */\n  fullWidthInput: _propTypes2.default.bool,\n\n  /** Helper text that is displayed below the input. */\n  helperText: _propTypes2.default.node,\n\n  /** Props to pass through to the `InputLabel`. */\n  InputLabelProps: _propTypes2.default.object,\n\n  /** Props to pass through to the `Input`. */\n  InputProps: _propTypes2.default.object,\n\n  /** Use this property to pass a ref callback to the native input component. */\n  inputRef: _propTypes2.default.func,\n\n  /* The content of the floating label. */\n  label: _propTypes2.default.node,\n\n  /** The key codes used to determine when to create a new chip. */\n  newChipKeyCodes: _propTypes2.default.arrayOf(_propTypes2.default.number),\n\n  /** Callback function that is called when a new chip was added (in controlled mode). */\n  onAdd: _propTypes2.default.func,\n\n  /** Callback function that is called with the chip to be added and should return true to add the chip or false to prevent the chip from being added without clearing the text input. */\n  onBeforeAdd: _propTypes2.default.func,\n\n  /** Callback function that is called when the chips change (in uncontrolled mode). */\n  onChange: _propTypes2.default.func,\n\n  /** Callback function that is called when a new chip was removed (in controlled mode). */\n  onDelete: _propTypes2.default.func,\n\n  /** Callback function that is called when the input changes. */\n  onUpdateInput: _propTypes2.default.func,\n\n  /** A placeholder that is displayed if the input has no values. */\n  placeholder: _propTypes2.default.string,\n\n  /** The chips to display (enables controlled mode if set). */\n  value: _propTypes2.default.array\n};\nChipInput.defaultProps = {\n  allowDuplicates: false,\n  blurBehavior: 'clear',\n  clearInputValueOnChange: false,\n  newChipKeyCodes: [13]\n};\nexports.default = (0, _withStyles2.default)(styles)(ChipInput);\n\nvar defaultChipRenderer = exports.defaultChipRenderer = function defaultChipRenderer(_ref, key) {\n  var value = _ref.value,\n      text = _ref.text,\n      isFocused = _ref.isFocused,\n      isDisabled = _ref.isDisabled,\n      handleClick = _ref.handleClick,\n      handleDelete = _ref.handleDelete,\n      className = _ref.className;\n  return _react2.default.createElement(_Chip2.default, {\n    key: key,\n    className: className,\n    style: {\n      pointerEvents: isDisabled ? 'none' : undefined,\n      backgroundColor: isFocused ? _blue2.default[300] : undefined\n    },\n    onClick: handleClick,\n    onDelete: handleDelete,\n    label: text\n  });\n};","map":null,"metadata":{},"sourceType":"script"}