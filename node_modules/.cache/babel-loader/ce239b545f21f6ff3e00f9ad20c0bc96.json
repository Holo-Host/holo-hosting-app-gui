{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual } from 'recompose';\nimport Dropzone from 'react-dropzone';\nimport compose from 'recompose/compose';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport classnames from 'classnames';\nimport { addField, translate } from 'ra-core';\nimport Labeled from './Labeled';\nimport FileInputPreview from './FileInputPreview';\nimport sanitizeRestProps from './sanitizeRestProps';\nvar styles = {\n  dropZone: {\n    background: '#efefef',\n    cursor: 'pointer',\n    padding: '1rem',\n    textAlign: 'center',\n    color: '#999'\n  },\n  preview: {},\n  removeButton: {},\n  root: {\n    width: '100%'\n  }\n};\n\nvar FileInput =\n/** @class */\nfunction (_super) {\n  __extends(FileInput, _super);\n\n  function FileInput(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onDrop = function (files) {\n      var updatedFiles = _this.props.multiple ? _this.state.files.concat(files.map(_this.transformFile)) : files.map(_this.transformFile).slice();\n\n      _this.setState({\n        files: updatedFiles\n      });\n\n      if (_this.props.multiple) {\n        // Use onBlur to ensure redux-form set the input as touched\n        _this.props.input.onBlur(updatedFiles);\n      } else {\n        _this.props.input.onBlur(updatedFiles[0]);\n      }\n    };\n\n    _this.onRemove = function (file) {\n      return function () {\n        var filteredFiles = _this.state.files.filter(function (stateFile) {\n          return !shallowEqual(stateFile, file);\n        });\n\n        _this.setState({\n          files: filteredFiles\n        }); // Use onBlur to ensure redux-form set the input as touched\n\n\n        if (_this.props.multiple) {\n          _this.props.input.onBlur(filteredFiles);\n        } else {\n          _this.props.input.onBlur(null);\n        }\n      };\n    }; // turn a browser dropped file structure into expected structure\n\n\n    _this.transformFile = function (file) {\n      var _a;\n\n      if (!(file instanceof File)) {\n        return file;\n      }\n\n      var _b = React.Children.toArray(_this.props.children)[0].props,\n          source = _b.source,\n          title = _b.title;\n      var transformedFile = (_a = {\n        rawFile: file\n      }, _a[source] = file.preview, _a);\n\n      if (title) {\n        transformedFile[title] = file.name;\n      }\n\n      return transformedFile;\n    };\n\n    var files = props.input.value || [];\n\n    if (!Array.isArray(files)) {\n      files = [files];\n    }\n\n    _this.state = {\n      files: files.map(_this.transformFile)\n    };\n    return _this;\n  }\n\n  FileInput.prototype.componentWillReceiveProps = function (nextProps) {\n    var files = nextProps.input.value || [];\n\n    if (!Array.isArray(files)) {\n      files = [files];\n    }\n\n    this.setState({\n      files: files.map(this.transformFile)\n    });\n  };\n\n  FileInput.prototype.label = function () {\n    var _a = this.props,\n        translate = _a.translate,\n        placeholder = _a.placeholder,\n        labelMultiple = _a.labelMultiple,\n        labelSingle = _a.labelSingle;\n\n    if (placeholder) {\n      return placeholder;\n    }\n\n    if (this.props.multiple) {\n      return React.createElement(\"p\", null, translate(labelMultiple));\n    }\n\n    return React.createElement(\"p\", null, translate(labelSingle));\n  };\n\n  FileInput.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        accept = _a.accept,\n        children = _a.children,\n        _b = _a.classes,\n        classes = _b === void 0 ? {} : _b,\n        className = _a.className,\n        disableClick = _a.disableClick,\n        id = _a.id,\n        isRequired = _a.isRequired,\n        label = _a.label,\n        maxSize = _a.maxSize,\n        meta = _a.meta,\n        minSize = _a.minSize,\n        multiple = _a.multiple,\n        resource = _a.resource,\n        source = _a.source,\n        translate = _a.translate,\n        _c = _a.options,\n        options = _c === void 0 ? {} : _c,\n        rest = __rest(_a, [\"accept\", \"children\", \"classes\", \"className\", \"disableClick\", \"id\", \"isRequired\", \"label\", \"maxSize\", \"meta\", \"minSize\", \"multiple\", \"resource\", \"source\", \"translate\", \"options\"]);\n\n    return React.createElement(Labeled, __assign({\n      id: id,\n      label: label,\n      className: classnames(classes.root, className),\n      source: source,\n      resource: resource,\n      isRequired: isRequired,\n      meta: meta\n    }, sanitizeRestProps(rest)), React.createElement(\"span\", null, React.createElement(Dropzone, __assign({\n      onDrop: this.onDrop,\n      accept: accept,\n      disableClick: disableClick,\n      maxSize: maxSize,\n      minSize: minSize,\n      multiple: multiple,\n      className: classes.dropZone\n    }, options, {\n      inputProps: __assign({\n        id: id\n      }, options.inputProps)\n    }), this.label()), children && React.createElement(\"div\", {\n      className: \"previews\"\n    }, this.state.files.map(function (file, index) {\n      return React.createElement(FileInputPreview, {\n        key: index,\n        file: file,\n        onRemove: _this.onRemove(file),\n        className: classes.removeButton\n      }, React.cloneElement(children, {\n        record: file,\n        className: classes.preview\n      }));\n    })), meta && meta.touched && meta.error && React.createElement(FormHelperText, null, translate(meta.error))));\n  };\n\n  FileInput.propTypes = {\n    accept: PropTypes.string,\n    children: PropTypes.element,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    disableClick: PropTypes.bool,\n    id: PropTypes.string,\n    input: PropTypes.object,\n    isRequired: PropTypes.bool,\n    label: PropTypes.string,\n    labelMultiple: PropTypes.string,\n    labelSingle: PropTypes.string,\n    maxSize: PropTypes.number,\n    minSize: PropTypes.number,\n    multiple: PropTypes.bool,\n    options: PropTypes.object,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    translate: PropTypes.func.isRequired,\n    placeholder: PropTypes.node\n  };\n  FileInput.defaultProps = {\n    labelMultiple: 'ra.input.file.upload_several',\n    labelSingle: 'ra.input.file.upload_single',\n    multiple: false,\n    onUpload: function onUpload() {},\n    translate: function translate(id) {\n      return id;\n    }\n  };\n  return FileInput;\n}(Component);\n\nexport { FileInput };\nexport default compose(addField, translate, withStyles(styles))(FileInput);","map":null,"metadata":{},"sourceType":"module"}