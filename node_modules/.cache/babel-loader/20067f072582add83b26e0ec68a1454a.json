{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport React, { Children, cloneElement, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport compose from 'recompose/compose';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { withStyles } from '@material-ui/core/styles';\nimport CloseIcon from '@material-ui/icons/RemoveCircleOutline';\nimport AddIcon from '@material-ui/icons/AddCircleOutline';\nimport { translate } from 'ra-core';\nimport classNames from 'classnames';\nimport FormInput from '../form/FormInput';\n\nvar styles = function styles(theme) {\n  var _a, _b;\n\n  return {\n    root: {\n      padding: 0,\n      marginBottom: 0,\n      '& > li:last-child': {\n        borderBottom: 'none'\n      }\n    },\n    line: (_a = {\n      display: 'flex',\n      listStyleType: 'none',\n      borderBottom: \"solid 1px \" + theme.palette.divider\n    }, _a[theme.breakpoints.down('xs')] = {\n      display: 'block'\n    }, _a['&.fade-enter'] = {\n      opacity: 0.01,\n      transform: 'translateX(100vw)'\n    }, _a['&.fade-enter-active'] = {\n      opacity: 1,\n      transform: 'translateX(0)',\n      transition: 'all 500ms ease-in'\n    }, _a['&.fade-exit'] = {\n      opacity: 1,\n      transform: 'translateX(0)'\n    }, _a['&.fade-exit-active'] = {\n      opacity: 0.01,\n      transform: 'translateX(100vw)',\n      transition: 'all 500ms ease-in'\n    }, _a),\n    index: (_b = {\n      width: '3em',\n      paddingTop: '1em'\n    }, _b[theme.breakpoints.down('sm')] = {\n      display: 'none'\n    }, _b),\n    form: {\n      flex: 2\n    },\n    action: {\n      paddingTop: '0.5em'\n    },\n    leftIcon: {\n      marginRight: theme.spacing.unit\n    }\n  };\n};\n\nvar SimpleFormIterator =\n/** @class */\nfunction (_super) {\n  __extends(SimpleFormIterator, _super);\n\n  function SimpleFormIterator(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.removeField = function (index) {\n      return function () {\n        var fields = _this.props.fields;\n\n        _this.ids.splice(index, 1);\n\n        fields.remove(index);\n      };\n    };\n\n    _this.addField = function () {\n      var fields = _this.props.fields;\n\n      _this.ids.push(_this.nextId++);\n\n      fields.push({});\n    }; // we need a unique id for each field for a proper enter/exit animation\n    // but redux-form doesn't provide one (cf https://github.com/erikras/redux-form/issues/2735)\n    // so we keep an internal map between the field position and an autoincrement id\n\n\n    _this.nextId = props.fields.length ? props.fields.length : props.defaultValue ? props.defaultValue.length : 0; // We check whether we have a defaultValue (which must be an array) before checking\n    // the fields prop which will always be empty for a new record.\n    // Without it, our ids wouldn't match the default value and we would get key warnings\n    // on the CssTransition element inside our render method\n\n    _this.ids = _this.nextId > 0 ? Array.from(Array(_this.nextId).keys()) : [];\n    return _this;\n  }\n\n  SimpleFormIterator.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        basePath = _a.basePath,\n        _b = _a.classes,\n        classes = _b === void 0 ? {} : _b,\n        children = _a.children,\n        fields = _a.fields,\n        _c = _a.meta,\n        error = _c.error,\n        submitFailed = _c.submitFailed,\n        record = _a.record,\n        resource = _a.resource,\n        source = _a.source,\n        translate = _a.translate,\n        disableAdd = _a.disableAdd,\n        disableRemove = _a.disableRemove;\n    var records = get(record, source);\n    return fields ? React.createElement(\"ul\", {\n      className: classes.root\n    }, submitFailed && error && React.createElement(FormHelperText, {\n      error: true\n    }, error), React.createElement(TransitionGroup, null, fields.map(function (member, index) {\n      return React.createElement(CSSTransition, {\n        key: _this.ids[index],\n        timeout: 500,\n        classNames: \"fade\"\n      }, React.createElement(\"li\", {\n        className: classes.line\n      }, React.createElement(Typography, {\n        variant: \"body1\",\n        className: classes.index\n      }, index + 1), React.createElement(\"section\", {\n        className: classes.form\n      }, Children.map(children, function (input, index2) {\n        return React.createElement(FormInput, {\n          basePath: input.props.basePath || basePath,\n          input: cloneElement(input, {\n            source: input.props.source ? member + \".\" + input.props.source : member,\n            index: input.props.source ? undefined : index2,\n            label: input.props.label || input.props.source\n          }),\n          record: records && records[index] || {},\n          resource: resource\n        });\n      })), !disableRemove && React.createElement(\"span\", {\n        className: classes.action\n      }, React.createElement(Button, {\n        className: classNames('button-remove', \"button-remove-\" + source + \"-\" + index),\n        size: \"small\",\n        onClick: _this.removeField(index)\n      }, React.createElement(CloseIcon, {\n        className: classes.leftIcon\n      }), translate('ra.action.remove')))));\n    })), !disableAdd && React.createElement(\"li\", {\n      className: classes.line\n    }, React.createElement(\"span\", {\n      className: classes.action\n    }, React.createElement(Button, {\n      className: classNames('button-add', \"button-add-\" + source),\n      size: \"small\",\n      onClick: this.addField\n    }, React.createElement(AddIcon, {\n      className: classes.leftIcon\n    }), translate('ra.action.add'))))) : null;\n  };\n\n  return SimpleFormIterator;\n}(Component);\n\nexport { SimpleFormIterator };\nSimpleFormIterator.defaultProps = {\n  disableAdd: false,\n  disableRemove: false\n};\nSimpleFormIterator.propTypes = {\n  defaultValue: PropTypes.any,\n  basePath: PropTypes.string,\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  fields: PropTypes.object,\n  meta: PropTypes.object,\n  record: PropTypes.object,\n  source: PropTypes.string,\n  resource: PropTypes.string,\n  translate: PropTypes.func,\n  disableAdd: PropTypes.bool,\n  disableRemove: PropTypes.bool\n};\nexport default compose(translate, withStyles(styles))(SimpleFormIterator);","map":null,"metadata":{},"sourceType":"module"}