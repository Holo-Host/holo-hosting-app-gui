{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { withStyles } from '@material-ui/core/styles';\nimport { ReferenceArrayFieldController } from 'ra-core';\nvar styles = {\n  progress: {\n    marginTop: '1em'\n  }\n};\nexport var ReferenceArrayFieldView = function ReferenceArrayFieldView(_a) {\n  var children = _a.children,\n      className = _a.className,\n      _b = _a.classes,\n      classes = _b === void 0 ? {} : _b,\n      data = _a.data,\n      ids = _a.ids,\n      loadedOnce = _a.loadedOnce,\n      reference = _a.reference,\n      referenceBasePath = _a.referenceBasePath;\n\n  if (loadedOnce === false) {\n    return React.createElement(LinearProgress, {\n      className: classes.progress\n    });\n  }\n\n  return React.cloneElement(children, {\n    className: className,\n    resource: reference,\n    ids: ids,\n    data: data,\n    loadedOnce: loadedOnce,\n    basePath: referenceBasePath,\n    currentSort: {}\n  });\n};\nReferenceArrayFieldView.propTypes = {\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  data: PropTypes.object,\n  ids: PropTypes.array,\n  loadedOnce: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  reference: PropTypes.string.isRequired,\n  referenceBasePath: PropTypes.string\n};\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n */\n\nexport var ReferenceArrayField = function ReferenceArrayField(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceArrayField> only accepts a single child (like <Datagrid>)');\n  }\n\n  return React.createElement(ReferenceArrayFieldController, __assign({}, props), function (controllerProps) {\n    return React.createElement(ReferenceArrayFieldView, __assign({}, props, __assign({\n      children: children\n    }, controllerProps)));\n  });\n};\nReferenceArrayField.propTypes = {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  label: PropTypes.string,\n  record: PropTypes.object.isRequired,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string.isRequired,\n  sortBy: PropTypes.string,\n  source: PropTypes.string.isRequired\n};\nvar EnhancedReferenceArrayField = withStyles(styles)(ReferenceArrayField);\nEnhancedReferenceArrayField.defaultProps = {\n  addLabel: true\n};\nexport default EnhancedReferenceArrayField;","map":null,"metadata":{},"sourceType":"module"}