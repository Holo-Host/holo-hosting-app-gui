{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.default = defineType;\nexports.chain = chain;\nexports.assertEach = assertEach;\nexports.assertOneOf = assertOneOf;\nexports.assertNodeType = assertNodeType;\nexports.assertNodeOrValueType = assertNodeOrValueType;\nexports.assertValueType = assertValueType;\nexports.assertArrayOf = assertArrayOf;\n\nvar t = require(\"../index\");\n\nvar BUILDER_KEYS = exports.BUILDER_KEYS = {};\nvar NODE_FIELDS = exports.NODE_FIELDS = {};\nvar ALIAS_KEYS = exports.ALIAS_KEYS = {};\n/**\n * Used to define an AST node.\n * @param {String} type The AST node name\n * @param {Object} opts Type definition object\n * @returns {void}\n */\n\nfunction defineType(type) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$fields = _ref.fields,\n      fields = _ref$fields === undefined ? {} : _ref$fields,\n      _ref$aliases = _ref.aliases,\n      aliases = _ref$aliases === undefined ? [] : _ref$aliases,\n      _ref$builder = _ref.builder,\n      builder = _ref$builder === undefined ? [] : _ref$builder;\n\n  for (var key in fields) {\n    var field = fields[key]; // Sets field as optional if builder exist but validator does not.\n\n    if (builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n  }\n\n  BUILDER_KEYS[type] = builder;\n  NODE_FIELDS[type] = fields;\n  ALIAS_KEYS[type] = aliases;\n}\n\nfunction getType(val) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else if (val === undefined) {\n    return \"undefined\";\n  } else {\n    return typeof val === \"undefined\" ? \"undefined\" : _typeof(val);\n  }\n} // Validation helpers\n\n\nfunction chain() {\n  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function validate() {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    fns.forEach(function (fn) {\n      return fn.apply(undefined, args);\n    });\n  };\n}\n\nfunction assertEach(callback) {\n  function validator(node, key, val) {\n    if (!Array.isArray(val)) {\n      return;\n    }\n\n    val.forEach(function (it, i) {\n      return callback(node, key + \"[\" + i + \"]\", it);\n    });\n  }\n\n  return validator;\n}\n\nfunction assertOneOf() {\n  for (var _len3 = arguments.length, vals = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    vals[_key3] = arguments[_key3];\n  }\n\n  function validate(node, key, val) {\n    if (vals.indexOf(val.kind) < 0) {\n      throw new TypeError(\"Property \" + key + \" expected value to be one of \" + JSON.stringify(vals) + \" but got \" + JSON.stringify(val));\n    }\n  }\n\n  return validate;\n}\n\nfunction assertNodeType() {\n  for (var _len4 = arguments.length, types = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    types[_key4] = arguments[_key4];\n  }\n\n  function validate(node, key, val) {\n    var valid = types.every(function (type) {\n      return t.is(type, val);\n    });\n\n    if (!valid) {\n      throw new TypeError(\"Property \" + key + \" of \" + node.type + \" expected node to be of a type \" + JSON.stringify(types) + \" \" + (\"but instead got \" + JSON.stringify(val && val.type)));\n    }\n  }\n\n  return validate;\n}\n\nfunction assertNodeOrValueType() {\n  for (var _len5 = arguments.length, types = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    types[_key5] = arguments[_key5];\n  }\n\n  function validate(node, key, val) {\n    var valid = types.every(function (type) {\n      return getType(val) === type || t.is(type, val);\n    });\n\n    if (!valid) {\n      throw new TypeError(\"Property \" + key + \" of \" + node.type + \" expected node to be of a type \" + JSON.stringify(types) + \" \" + (\"but instead got \" + JSON.stringify(val && val.type)));\n    }\n  }\n\n  return validate;\n}\n\nfunction assertValueType(type) {\n  function validate(node, key, val) {\n    var valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(\"Property \" + key + \" expected type of \" + type + \" but got \" + getType(val));\n    }\n  }\n\n  return validate;\n}\n\nfunction assertArrayOf(cb) {\n  return chain(assertValueType(\"array\"), assertEach(cb));\n}","map":null,"metadata":{},"sourceType":"script"}