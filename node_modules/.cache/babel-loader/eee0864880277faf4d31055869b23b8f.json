{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { TypeKind } from 'graphql';\nimport { GET_LIST, GET_MANY, GET_MANY_REFERENCE } from 'ra-core';\nimport getFinalType from './getFinalType';\n\nvar sanitizeResource = function sanitizeResource(introspectionResults, resource) {\n  return function (data) {\n    var result = Object.keys(data).reduce(function (acc, key) {\n      var _a, _b, _c, _d;\n\n      if (key.startsWith('_')) {\n        return acc;\n      }\n\n      var field = resource.type.fields.find(function (f) {\n        return f.name === key;\n      });\n      var type = getFinalType(field.type);\n\n      if (type.kind !== TypeKind.OBJECT) {\n        return __assign({}, acc, (_a = {}, _a[field.name] = data[field.name], _a));\n      } // FIXME: We might have to handle linked types which are not resources but will have to be careful about\n      // endless circular dependencies\n\n\n      var linkedResource = introspectionResults.resources.find(function (r) {\n        return r.type.name === type.name;\n      });\n\n      if (linkedResource) {\n        var linkedResourceData = data[field.name];\n\n        if (Array.isArray(linkedResourceData)) {\n          return __assign({}, acc, (_b = {}, _b[field.name] = data[field.name].map(sanitizeResource(introspectionResults, linkedResource)), _b[field.name + \"Ids\"] = data[field.name].map(function (d) {\n            return d.id;\n          }), _b));\n        }\n\n        return __assign({}, acc, (_c = {}, _c[field.name + \".id\"] = linkedResourceData ? data[field.name].id : undefined, _c[field.name] = linkedResourceData ? sanitizeResource(introspectionResults, linkedResource)(data[field.name]) : undefined, _c));\n      }\n\n      return __assign({}, acc, (_d = {}, _d[field.name] = data[field.name], _d));\n    }, {});\n    return result;\n  };\n};\n\nexport default (function (introspectionResults) {\n  return function (aorFetchType, resource) {\n    return function (response) {\n      var sanitize = sanitizeResource(introspectionResults, resource);\n      var data = response.data;\n\n      if (aorFetchType === GET_LIST || aorFetchType === GET_MANY || aorFetchType === GET_MANY_REFERENCE) {\n        return {\n          data: response.data.items.map(sanitize),\n          total: response.data.total.count\n        };\n      }\n\n      return {\n        data: sanitize(data.data)\n      };\n    };\n  };\n});","map":null,"metadata":{},"sourceType":"module"}