{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport { ShowController } from 'ra-core';\nimport DefaultActions from './ShowActions';\nimport TitleForRecord from '../layout/TitleForRecord';\nimport CardContentInner from '../layout/CardContentInner';\nexport var styles = createStyles({\n  root: {\n    display: 'flex'\n  },\n  card: {\n    flex: '1 1 auto'\n  }\n});\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var actions = _a.actions,\n      aside = _a.aside,\n      title = _a.title,\n      children = _a.children,\n      className = _a.className,\n      crudGetOne = _a.crudGetOne,\n      id = _a.id,\n      data = _a.data,\n      isLoading = _a.isLoading,\n      resource = _a.resource,\n      hasCreate = _a.hasCreate,\n      hasEdit = _a.hasEdit,\n      hasList = _a.hasList,\n      hasShow = _a.hasShow,\n      translate = _a.translate,\n      version = _a.version,\n      match = _a.match,\n      location = _a.location,\n      history = _a.history,\n      options = _a.options,\n      locale = _a.locale,\n      permissions = _a.permissions,\n      rest = __rest(_a, [\"actions\", \"aside\", \"title\", \"children\", \"className\", \"crudGetOne\", \"id\", \"data\", \"isLoading\", \"resource\", \"hasCreate\", \"hasEdit\", \"hasList\", \"hasShow\", \"translate\", \"version\", \"match\", \"location\", \"history\", \"options\", \"locale\", \"permissions\"]);\n\n  return rest;\n};\n\nexport var ShowView = function ShowView(_a) {\n  var actions = _a.actions,\n      aside = _a.aside,\n      basePath = _a.basePath,\n      children = _a.children,\n      classes = _a.classes,\n      className = _a.className,\n      defaultTitle = _a.defaultTitle,\n      hasEdit = _a.hasEdit,\n      hasList = _a.hasList,\n      isLoading = _a.isLoading,\n      record = _a.record,\n      resource = _a.resource,\n      title = _a.title,\n      version = _a.version,\n      rest = __rest(_a, [\"actions\", \"aside\", \"basePath\", \"children\", \"classes\", \"className\", \"defaultTitle\", \"hasEdit\", \"hasList\", \"isLoading\", \"record\", \"resource\", \"title\", \"version\"]);\n\n  if (typeof actions === 'undefined' && hasEdit) {\n    actions = React.createElement(DefaultActions, null);\n  }\n\n  if (!children) {\n    return null;\n  }\n\n  return React.createElement(\"div\", __assign({\n    className: classnames('show-page', classes.root, className)\n  }, sanitizeRestProps(rest)), React.createElement(TitleForRecord, {\n    title: title,\n    record: record,\n    defaultTitle: defaultTitle\n  }), React.createElement(Card, {\n    className: classes.card\n  }, actions && React.createElement(CardContentInner, null, cloneElement(actions, {\n    basePath: basePath,\n    data: record,\n    hasList: hasList,\n    hasEdit: hasEdit,\n    resource: resource\n  })), record && cloneElement(Children.only(children), {\n    resource: resource,\n    basePath: basePath,\n    record: record,\n    version: version\n  })), aside && cloneElement(aside, {\n    resource: resource,\n    basePath: basePath,\n    record: record,\n    version: version\n  }));\n};\nShowView.propTypes = {\n  actions: PropTypes.element,\n  aside: PropTypes.node,\n  basePath: PropTypes.string,\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  defaultTitle: PropTypes.any,\n  hasEdit: PropTypes.bool,\n  hasList: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  record: PropTypes.object,\n  resource: PropTypes.string,\n  title: PropTypes.any,\n  version: PropTypes.number\n};\nShowView.defaultProps = {\n  classes: {}\n};\n/**\n * Page component for the Show view\n *\n * The `<Show>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleShowLayout>`),\n * to which it passes pass the `record` as prop.\n *\n * The `<Show>` component accepts the following props:\n *\n * - title\n * - actions\n *\n * Both expect an element for value.\n *\n * @example\n *     // in src/posts.js\n *     import React from 'react';\n *     import { Show, SimpleShowLayout, TextField } from 'react-admin';\n *\n *     export const PostShow = (props) => (\n *         <Show {...props}>\n *             <SimpleShowLayout>\n *                 <TextField source=\"title\" />\n *             </SimpleShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import React from 'react';\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\n\nexport var Show = function Show(props) {\n  return React.createElement(ShowController, __assign({}, props), function (controllerProps) {\n    return React.createElement(ShowView, __assign({}, props, controllerProps));\n  });\n};\nShow.propTypes = {\n  actions: PropTypes.element,\n  aside: PropTypes.node,\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasList: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  id: PropTypes.any.isRequired,\n  resource: PropTypes.string.isRequired,\n  title: PropTypes.any\n};\nexport default withStyles(styles)(Show);","map":null,"metadata":{},"sourceType":"module"}