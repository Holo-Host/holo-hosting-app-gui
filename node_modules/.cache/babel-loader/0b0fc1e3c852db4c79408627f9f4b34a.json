{"ast":null,"code":"module.exports = function (glob, opts) {\n  if (typeof glob !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  var str = String(glob); // The regexp we are building, as a string.\n\n  var reStr = \"\"; // Whether we are matching so called \"extended\" globs (like bash) and should\n  // support single character matching, matching ranges of characters, group\n  // matching, etc.\n\n  var extended = opts ? !!opts.extended : false; // When globstar is _false_ (default), '/foo/*' is translated a regexp like\n  // '^\\/foo\\/.*$' which will match any string beginning with '/foo/'\n  // When globstar is _true_, '/foo/*' is translated to regexp like\n  // '^\\/foo\\/[^/]*$' which will match any string beginning with '/foo/' BUT\n  // which does not have a '/' to the right of it.\n  // E.g. with '/foo/*' these will match: '/foo/bar', '/foo/bar.txt' but\n  // these will not '/foo/bar/baz', '/foo/bar/baz.txt'\n  // Lastely, when globstar is _true_, '/foo/**' is equivelant to '/foo/*' when\n  // globstar is _false_\n\n  var globstar = opts ? !!opts.globstar : false; // If we are doing extended matching, this boolean is true when we are inside\n  // a group (eg {*.html,*.js}), and false otherwise.\n\n  var inGroup = false; // RegExp flags (eg \"i\" ) to pass in to RegExp constructor.\n\n  var flags = opts && typeof opts.flags === \"string\" ? opts.flags : \"\";\n  var c;\n\n  for (var i = 0, len = str.length; i < len; i++) {\n    c = str[i];\n\n    switch (c) {\n      case \"/\":\n      case \"$\":\n      case \"^\":\n      case \"+\":\n      case \".\":\n      case \"(\":\n      case \")\":\n      case \"=\":\n      case \"!\":\n      case \"|\":\n        reStr += \"\\\\\" + c;\n        break;\n\n      case \"?\":\n        if (extended) {\n          reStr += \".\";\n          break;\n        }\n\n      case \"[\":\n      case \"]\":\n        if (extended) {\n          reStr += c;\n          break;\n        }\n\n      case \"{\":\n        if (extended) {\n          inGroup = true;\n          reStr += \"(\";\n          break;\n        }\n\n      case \"}\":\n        if (extended) {\n          inGroup = false;\n          reStr += \")\";\n          break;\n        }\n\n      case \",\":\n        if (inGroup) {\n          reStr += \"|\";\n          break;\n        }\n\n        reStr += \"\\\\\" + c;\n        break;\n\n      case \"*\":\n        // Move over all consecutive \"*\"'s.\n        // Also store the previous and next characters\n        var prevChar = str[i - 1];\n        var starCount = 1;\n\n        while (str[i + 1] === \"*\") {\n          starCount++;\n          i++;\n        }\n\n        var nextChar = str[i + 1];\n\n        if (!globstar) {\n          // globstar is disabled, so treat any number of \"*\" as one\n          reStr += \".*\";\n        } else {\n          // globstar is enabled, so determine if this is a globstar segment\n          var isGlobstar = starCount > 1 // multiple \"*\"'s\n          && (prevChar === \"/\" || prevChar === undefined) // from the start of the segment\n          && (nextChar === \"/\" || nextChar === undefined); // to the end of the segment\n\n          if (isGlobstar) {\n            // it's a globstar, so match zero or more path segments\n            reStr += \"((?:[^/]*(?:\\/|$))*)\";\n            i++; // move over the \"/\"\n          } else {\n            // it's not a globstar, so only match one path segment\n            reStr += \"([^/]*)\";\n          }\n        }\n\n        break;\n\n      default:\n        reStr += c;\n    }\n  } // When regexp 'g' flag is specified don't\n  // constrain the regular expression with ^ & $\n\n\n  if (!flags || !~flags.indexOf('g')) {\n    reStr = \"^\" + reStr + \"$\";\n  }\n\n  return new RegExp(reStr, flags);\n};","map":null,"metadata":{},"sourceType":"script"}