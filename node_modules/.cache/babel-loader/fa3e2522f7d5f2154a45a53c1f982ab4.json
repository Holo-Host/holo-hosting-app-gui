{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { GET_LIST, GET_ONE, GET_MANY, GET_MANY_REFERENCE, CREATE, UPDATE, DELETE } from 'ra-core';\nimport getFinalType from './getFinalType';\nimport isList from './isList';\n\nvar sanitizeValue = function sanitizeValue(type, value) {\n  if (type.name === 'Int') {\n    return parseInt(value, 10);\n  }\n\n  if (type.name === 'Float') {\n    return parseFloat(value);\n  }\n\n  return value;\n};\n\nvar buildGetListVariables = function buildGetListVariables(introspectionResults) {\n  return function (resource, aorFetchType, params) {\n    var filter = Object.keys(params.filter).reduce(function (acc, key) {\n      var _a, _b, _c, _d, _e, _f, _g;\n\n      if (key === 'ids') {\n        return __assign({}, acc, {\n          ids: params.filter[key]\n        });\n      }\n\n      if (typeof params.filter[key] === 'object') {\n        var type = introspectionResults.types.find(function (t) {\n          return t.name === resource.type.name + \"Filter\";\n        });\n        var filterSome = type.inputFields.find(function (t) {\n          return t.name === key + \"_some\";\n        });\n\n        if (filterSome) {\n          var filter_1 = Object.keys(params.filter[key]).reduce(function (acc, k) {\n            var _a;\n\n            return __assign({}, acc, (_a = {}, _a[k + \"_in\"] = params.filter[key][k], _a));\n          }, {});\n          return __assign({}, acc, (_a = {}, _a[key + \"_some\"] = filter_1, _a));\n        }\n      }\n\n      var parts = key.split('.');\n\n      if (parts.length > 1) {\n        if (parts[1] == 'id') {\n          var type_1 = introspectionResults.types.find(function (t) {\n            return t.name === resource.type.name + \"Filter\";\n          });\n          var filterSome = type_1.inputFields.find(function (t) {\n            return t.name === parts[0] + \"_some\";\n          });\n\n          if (filterSome) {\n            return __assign({}, acc, (_b = {}, _b[parts[0] + \"_some\"] = {\n              id: params.filter[key]\n            }, _b));\n          }\n\n          return __assign({}, acc, (_c = {}, _c[parts[0]] = {\n            id: params.filter[key]\n          }, _c));\n        }\n\n        var resourceField_1 = resource.type.fields.find(function (f) {\n          return f.name === parts[0];\n        });\n        var type = getFinalType(resourceField_1.type);\n        return __assign({}, acc, (_d = {}, _d[key] = sanitizeValue(type, params.filter[key]), _d));\n      }\n\n      var resourceField = resource.type.fields.find(function (f) {\n        return f.name === key;\n      });\n\n      if (resourceField) {\n        var type_2 = getFinalType(resourceField.type);\n        var isAList = isList(resourceField.type);\n\n        if (isAList) {\n          return __assign({}, acc, (_e = {}, _e[key] = Array.isArray(params.filter[key]) ? params.filter[key].map(function (value) {\n            return sanitizeValue(type_2, value);\n          }) : sanitizeValue(type_2, [params.filter[key]]), _e));\n        }\n\n        return __assign({}, acc, (_f = {}, _f[key] = sanitizeValue(type_2, params.filter[key]), _f));\n      }\n\n      return __assign({}, acc, (_g = {}, _g[key] = params.filter[key], _g));\n    }, {});\n    return {\n      page: parseInt(params.pagination.page, 10) - 1,\n      perPage: parseInt(params.pagination.perPage, 10),\n      sortField: params.sort.field,\n      sortOrder: params.sort.order,\n      filter: filter\n    };\n  };\n};\n\nvar buildCreateUpdateVariables = function buildCreateUpdateVariables() {\n  return function (resource, aorFetchType, params, queryType) {\n    return Object.keys(params.data).reduce(function (acc, key) {\n      var _a, _b, _c;\n\n      if (Array.isArray(params.data[key])) {\n        var arg = queryType.args.find(function (a) {\n          return a.name === key + \"Ids\";\n        });\n\n        if (arg) {\n          return __assign({}, acc, (_a = {}, _a[key + \"Ids\"] = params.data[key].map(function (_a) {\n            var id = _a.id;\n            return id;\n          }), _a));\n        }\n      }\n\n      if (typeof params.data[key] === 'object') {\n        var arg = queryType.args.find(function (a) {\n          return a.name === key + \"Id\";\n        });\n\n        if (arg) {\n          return __assign({}, acc, (_b = {}, _b[key + \"Id\"] = params.data[key].id, _b));\n        }\n      }\n\n      return __assign({}, acc, (_c = {}, _c[key] = params.data[key], _c));\n    }, {});\n  };\n};\n\nexport default (function (introspectionResults) {\n  return function (resource, aorFetchType, params, queryType) {\n    var _a;\n\n    switch (aorFetchType) {\n      case GET_LIST:\n        {\n          return buildGetListVariables(introspectionResults)(resource, aorFetchType, params, queryType);\n        }\n\n      case GET_MANY:\n        return {\n          filter: {\n            ids: params.ids\n          }\n        };\n\n      case GET_MANY_REFERENCE:\n        {\n          var parts = params.target.split('.');\n          return {\n            filter: (_a = {}, _a[parts[0]] = {\n              id: params.id\n            }, _a)\n          };\n        }\n\n      case GET_ONE:\n        return {\n          id: params.id\n        };\n\n      case UPDATE:\n        {\n          return buildCreateUpdateVariables(introspectionResults)(resource, aorFetchType, params, queryType);\n        }\n\n      case CREATE:\n        {\n          return buildCreateUpdateVariables(introspectionResults)(resource, aorFetchType, params, queryType);\n        }\n\n      case DELETE:\n        return {\n          id: params.id\n        };\n    }\n  };\n});","map":null,"metadata":{},"sourceType":"module"}