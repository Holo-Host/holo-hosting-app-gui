{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { all, call, cancelled, put, select, takeEvery } from 'redux-saga/effects';\nimport { FETCH_CANCEL, FETCH_END, FETCH_ERROR, FETCH_START } from '../actions/fetchActions';\nimport { fetchActionsWithRecordResponse, fetchActionsWithArrayOfIdentifiedRecordsResponse, fetchActionsWithArrayOfRecordsResponse, fetchActionsWithTotalResponse } from '../dataFetchActions';\n\nfunction validateResponseFormat(response, type, logger // eslint-disable-line no-console\n) {\n  if (logger === void 0) {\n    logger = console.error;\n  }\n\n  if (!response.hasOwnProperty('data')) {\n    logger(\"The response to '\" + type + \"' must be like { data: ... }, but the received response does not have a 'data' key. The dataProvider is probably wrong for '\" + type + \"'.\");\n    throw new Error('ra.notification.data_provider_error');\n  }\n\n  if (fetchActionsWithArrayOfRecordsResponse.includes(type) && !Array.isArray(response.data)) {\n    logger(\"The response to '\" + type + \"' must be like { data : [...] }, but the received data is not an array. The dataProvider is probably wrong for '\" + type + \"'\");\n    throw new Error('ra.notification.data_provider_error');\n  }\n\n  if (fetchActionsWithArrayOfIdentifiedRecordsResponse.includes(type) && Array.isArray(response.data) && response.data.length > 0 && !response.data[0].hasOwnProperty('id')) {\n    logger(\"The response to '\" + type + \"' must be like { data : [{ id: 123, ...}, ...] }, but the received data items do not have an 'id' key. The dataProvider is probably wrong for '\" + type + \"'\");\n    throw new Error('ra.notification.data_provider_error');\n  }\n\n  if (fetchActionsWithRecordResponse.includes(type) && !response.data.hasOwnProperty('id')) {\n    logger(\"The response to '\" + type + \"' must be like { data: { id: 123, ... } }, but the received data does not have an 'id' key. The dataProvider is probably wrong for '\" + type + \"'\");\n    throw new Error('ra.notification.data_provider_error');\n  }\n\n  if (fetchActionsWithTotalResponse.includes(type) && !response.hasOwnProperty('total')) {\n    logger(\"The response to '\" + type + \"' must be like  { data: [...], total: 123 }, but the received response does not have a 'total' key. The dataProvider is probably wrong for '\" + type + \"'\");\n    throw new Error('ra.notification.data_provider_error');\n  }\n}\n\nexport function handleFetch(dataProvider, action) {\n  var type, payload, _a, fetchMeta, onSuccess, onFailure, meta, restType, isOptimistic, response, error_1;\n\n  return __generator(this, function (_b) {\n    switch (_b.label) {\n      case 0:\n        type = action.type, payload = action.payload, _a = action.meta, fetchMeta = _a.fetch, onSuccess = _a.onSuccess, onFailure = _a.onFailure, meta = __rest(_a, [\"fetch\", \"onSuccess\", \"onFailure\"]);\n        restType = fetchMeta;\n        _b.label = 1;\n\n      case 1:\n        _b.trys.push([1, 7, 10, 14]);\n\n        return [4\n        /*yield*/\n        , select(function (state) {\n          return state.admin.ui.optimistic;\n        })];\n\n      case 2:\n        isOptimistic = _b.sent();\n\n        if (isOptimistic) {\n          // in optimistic mode, all fetch actions are canceled,\n          // so the admin uses the store without synchronization\n          return [2\n          /*return*/\n          ];\n        }\n\n        return [4\n        /*yield*/\n        , all([put({\n          type: type + \"_LOADING\",\n          payload: payload,\n          meta: meta\n        }), put({\n          type: FETCH_START\n        })])];\n\n      case 3:\n        _b.sent();\n\n        return [4\n        /*yield*/\n        , call(dataProvider, restType, meta.resource, payload)];\n\n      case 4:\n        response = _b.sent();\n\n        if (process.env.NODE_ENV !== 'production') {\n          validateResponseFormat(response, restType);\n        }\n\n        return [4\n        /*yield*/\n        , put({\n          type: type + \"_SUCCESS\",\n          payload: response,\n          requestPayload: payload,\n          meta: __assign({}, meta, onSuccess, {\n            fetchResponse: restType,\n            fetchStatus: FETCH_END\n          })\n        })];\n\n      case 5:\n        _b.sent();\n\n        return [4\n        /*yield*/\n        , put({\n          type: FETCH_END\n        })];\n\n      case 6:\n        _b.sent();\n\n        return [3\n        /*break*/\n        , 14];\n\n      case 7:\n        error_1 = _b.sent();\n        return [4\n        /*yield*/\n        , put({\n          type: type + \"_FAILURE\",\n          error: error_1.message ? error_1.message : error_1,\n          payload: error_1.body ? error_1.body : null,\n          requestPayload: payload,\n          meta: __assign({}, meta, onFailure, {\n            fetchResponse: restType,\n            fetchStatus: FETCH_ERROR\n          })\n        })];\n\n      case 8:\n        _b.sent();\n\n        return [4\n        /*yield*/\n        , put({\n          type: FETCH_ERROR,\n          error: error_1\n        })];\n\n      case 9:\n        _b.sent();\n\n        return [3\n        /*break*/\n        , 14];\n\n      case 10:\n        return [4\n        /*yield*/\n        , cancelled()];\n\n      case 11:\n        if (!_b.sent()) return [3\n        /*break*/\n        , 13];\n        return [4\n        /*yield*/\n        , put({\n          type: FETCH_CANCEL\n        })];\n\n      case 12:\n        _b.sent();\n\n        return [2\n        /*return*/\n        ];\n\n      /* tslint:disable-line no-unsafe-finally */\n\n      case 13:\n        return [7\n        /*endfinally*/\n        ];\n\n      case 14:\n        return [2\n        /*return*/\n        ];\n    }\n  });\n}\nexport var takeFetchAction = function takeFetchAction(action) {\n  return action.meta && action.meta.fetch;\n};\n\nvar fetch = function fetch(dataProvider) {\n  return function watchFetch() {\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , takeEvery(takeFetchAction, handleFetch, dataProvider)];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n};\n\nexport default fetch;","map":null,"metadata":{},"sourceType":"module"}