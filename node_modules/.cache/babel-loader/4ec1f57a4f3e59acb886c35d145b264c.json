{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport debounce from 'lodash/debounce';\nimport compose from 'recompose/compose';\nimport { createSelector } from 'reselect';\nimport isEqual from 'lodash/isEqual';\nimport { crudGetMany as crudGetManyAction, crudGetMatching as crudGetMatchingAction } from '../../actions/dataActions';\nimport { getPossibleReferences, getPossibleReferenceValues, getReferenceResource } from '../../reducer';\nimport { getStatusForArrayInput as getDataStatus } from './referenceDataStatus';\nimport withTranslate from '../../i18n/translate';\n\nvar defaultReferenceSource = function defaultReferenceSource(resource, source) {\n  return resource + \"@\" + source;\n};\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using the\n * `CRUD_GET_MANY` REST method) as well as possible resources (using the\n * `CRUD_GET_MATCHING` REST method) in the reference endpoint. It then\n * delegates rendering to a subcomponent, to which it passes the possible\n * choices as the `choices` attribute.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput passes a\n * `setFilter` function as prop to its child component. It uses the value to\n * create a filter for the query - by default { q: [searchText] }. You can\n * customize the mapping searchText => searchQuery by setting a custom\n * `filterToQuery` function prop:\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filterToQuery={searchText => ({ name: searchText })}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n */\n\n\nvar UnconnectedReferenceArrayInputController =\n/** @class */\nfunction (_super) {\n  __extends(UnconnectedReferenceArrayInputController, _super);\n\n  function UnconnectedReferenceArrayInputController(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.setFilter = function (filter) {\n      if (filter !== _this.params.filter) {\n        _this.params.filter = _this.props.filterToQuery(filter);\n\n        _this.fetchOptions();\n      }\n    };\n\n    _this.setPagination = function (pagination) {\n      if (pagination !== _this.params.pagination) {\n        _this.params.pagination = pagination;\n\n        _this.fetchOptions();\n      }\n    };\n\n    _this.setSort = function (sort) {\n      if (sort !== _this.params.sort) {\n        _this.params.sort = sort;\n\n        _this.fetchOptions();\n      }\n    };\n\n    _this.fetchReferences = function (props) {\n      if (props === void 0) {\n        props = _this.props;\n      }\n\n      var crudGetMany = props.crudGetMany,\n          input = props.input,\n          reference = props.reference;\n      var ids = input.value;\n\n      if (ids) {\n        if (!Array.isArray(ids)) {\n          throw Error('The value of ReferenceArrayInput should be an array');\n        }\n\n        crudGetMany(reference, ids);\n      }\n    };\n\n    _this.fetchOptions = function (props) {\n      if (props === void 0) {\n        props = _this.props;\n      }\n\n      var crudGetMatching = props.crudGetMatching,\n          reference = props.reference,\n          source = props.source,\n          resource = props.resource,\n          referenceSource = props.referenceSource,\n          defaultFilter = props.filter;\n      var _a = _this.params,\n          pagination = _a.pagination,\n          sort = _a.sort,\n          filter = _a.filter;\n      crudGetMatching(reference, referenceSource(resource, source), pagination, sort, __assign({}, filter, defaultFilter));\n    };\n\n    var perPage = props.perPage,\n        sort = props.sort,\n        filter = props.filter; // stored as a property rather than state because we don't want redraw of async updates\n\n    _this.params = {\n      pagination: {\n        page: 1,\n        perPage: perPage\n      },\n      sort: sort,\n      filter: filter\n    };\n    _this.debouncedSetFilter = debounce(_this.setFilter.bind(_this), 500);\n    return _this;\n  }\n\n  UnconnectedReferenceArrayInputController.prototype.componentDidMount = function () {\n    this.fetchReferencesAndOptions(this.props);\n  };\n\n  UnconnectedReferenceArrayInputController.prototype.componentWillReceiveProps = function (nextProps) {\n    var shouldFetchOptions = false;\n\n    if ((this.props.record || {\n      id: undefined\n    }).id !== (nextProps.record || {\n      id: undefined\n    }).id) {\n      this.fetchReferencesAndOptions(nextProps);\n    } else if (this.props.input.value !== nextProps.input.value) {\n      this.fetchReferences(nextProps);\n    } else {\n      if (!isEqual(nextProps.filter, this.props.filter)) {\n        this.params = __assign({}, this.params, {\n          filter: nextProps.filter\n        });\n        shouldFetchOptions = true;\n      }\n\n      if (!isEqual(nextProps.sort, this.props.sort)) {\n        this.params = __assign({}, this.params, {\n          sort: nextProps.sort\n        });\n        shouldFetchOptions = true;\n      }\n\n      if (nextProps.perPage !== this.props.perPage) {\n        this.params = __assign({}, this.params, {\n          pagination: __assign({}, this.params.pagination, {\n            perPage: nextProps.perPage\n          })\n        });\n        shouldFetchOptions = true;\n      }\n    }\n\n    if (shouldFetchOptions) {\n      this.fetchOptions();\n    }\n  };\n\n  UnconnectedReferenceArrayInputController.prototype.fetchReferencesAndOptions = function (nextProps) {\n    this.fetchReferences(nextProps);\n    this.fetchOptions(nextProps);\n  };\n\n  UnconnectedReferenceArrayInputController.prototype.render = function () {\n    var _a = this.props,\n        input = _a.input,\n        referenceRecords = _a.referenceRecords,\n        matchingReferences = _a.matchingReferences,\n        onChange = _a.onChange,\n        children = _a.children,\n        translate = _a.translate;\n    var dataStatus = getDataStatus({\n      input: input,\n      matchingReferences: matchingReferences,\n      referenceRecords: referenceRecords,\n      translate: translate\n    });\n    return children({\n      choices: dataStatus.choices,\n      error: dataStatus.error,\n      isLoading: dataStatus.waiting,\n      onChange: onChange,\n      setFilter: this.debouncedSetFilter,\n      setPagination: this.setPagination,\n      setSort: this.setSort,\n      warning: dataStatus.warning\n    });\n  };\n\n  UnconnectedReferenceArrayInputController.defaultProps = {\n    allowEmpty: false,\n    filter: {},\n    filterToQuery: function filterToQuery(searchText) {\n      return {\n        q: searchText\n      };\n    },\n    matchingReferences: null,\n    perPage: 25,\n    sort: {\n      field: 'id',\n      order: 'DESC'\n    },\n    referenceRecords: [],\n    referenceSource: defaultReferenceSource\n  };\n  return UnconnectedReferenceArrayInputController;\n}(Component);\n\nexport { UnconnectedReferenceArrayInputController };\n\nvar makeMapStateToProps = function makeMapStateToProps() {\n  return createSelector([getReferenceResource, getPossibleReferenceValues, function (_, _a) {\n    var referenceIds = _a.input.value;\n    return referenceIds || [];\n  }], function (referenceState, possibleValues, inputIds) {\n    return {\n      matchingReferences: getPossibleReferences(referenceState, possibleValues, inputIds),\n      referenceRecords: referenceState && inputIds.reduce(function (references, referenceId) {\n        if (referenceState.data[referenceId]) {\n          references.push(referenceState.data[referenceId]);\n        }\n\n        return references;\n      }, [])\n    };\n  });\n};\n\nvar ReferenceArrayInputController = compose(withTranslate, connect(makeMapStateToProps(), {\n  crudGetMany: crudGetManyAction,\n  crudGetMatching: crudGetMatchingAction\n}))(UnconnectedReferenceArrayInputController);\nReferenceArrayInputController.defaultProps = {\n  referenceSource: defaultReferenceSource\n};\nexport default ReferenceArrayInputController;","map":null,"metadata":{},"sourceType":"module"}