{"ast":null,"code":"import merge from 'lodash/merge';\nimport { DEFAULT_LOCALE } from './index';\n/**\n * Resolve the browser locale according to the value of the global window.navigator\n *\n * Use it to determine the <Admin> locale at runtime.\n *\n * @example\n *     import React from 'react';\n *     import { Admin, Resource, resolveBrowserLocale } from 'react-admin';\n *     import englishMessages from 'ra-language-english';\n *     import frenchMessages from 'ra-language-french';\n *     const messages = {\n *        fr: frenchMessages,\n *        en: englishMessages,\n *     };\n *     const App = () => (\n *         <Admin locale={resolveBrowserLocale()} messages={messages}>\n *             ...\n *         </Admin>\n *     );\n *\n * @param {String} defaultLocale Defaults to 'en'\n */\n\nexport var resolveBrowserLocale = function resolveBrowserLocale(defaultLocale) {\n  if (defaultLocale === void 0) {\n    defaultLocale = DEFAULT_LOCALE;\n  } // from http://blog.ksol.fr/user-locale-detection-browser-javascript/\n  // Rely on the window.navigator object to determine user locale\n\n\n  var _a = window.navigator,\n      language = _a.language,\n      browserLanguage = _a.browserLanguage,\n      userLanguage = _a.userLanguage;\n  return (language || browserLanguage || userLanguage || defaultLocale).split('-')[0];\n};\n/**\n * Compose translations from multiple packages for a single language (eg: 'english').\n *\n * Use it to merge translations from addons with the main react-admin translations.\n *\n * @example\n *     import React from 'react';\n *     import { Admin, Resource, mergeTranslations } from 'react-admin';\n *     import englishMessages from 'ra-language-english';\n *     import englishTreeMessages from 'ra-tree-language-english';\n *     const messages = {\n *        en: mergeTranslations(englishMessages, englishTreeMessages),\n *     };\n *     const App = () => (\n *         <Admin locale=\"en\" messages={messages}>\n *             ...\n *         </Admin>\n *     );\n */\n\nexport var mergeTranslations = function mergeTranslations() {\n  var translationsModules = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    translationsModules[_i] = arguments[_i];\n  }\n\n  return merge.apply(void 0, [{}].concat(translationsModules));\n};","map":null,"metadata":{},"sourceType":"module"}