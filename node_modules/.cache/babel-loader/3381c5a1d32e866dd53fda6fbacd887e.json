{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport { addField, FieldTitle } from 'ra-core';\nimport sanitizeRestProps from './sanitizeRestProps';\n/**\n * An Input component for a number\n *\n * @example\n * <NumberInput source=\"nb_views\" />\n *\n * You can customize the `step` props (which defaults to \"any\")\n * @example\n * <NumberInput source=\"nb_views\" step={1} />\n *\n * The object passed as `options` props is passed to the material-ui <TextField> component\n */\n\nvar NumberInput =\n/** @class */\nfunction (_super) {\n  __extends(NumberInput, _super);\n\n  function NumberInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleBlur = function (event) {\n      /**\n       * Necessary because of a React bug on <input type=\"number\">\n       * @see https://github.com/facebook/react/issues/1425\n       */\n      var numericValue = isNaN(parseFloat(event.target.value)) ? null : parseFloat(event.target.value);\n\n      _this.props.onBlur(numericValue);\n\n      _this.props.input.onBlur(numericValue);\n    };\n\n    _this.handleFocus = function (event) {\n      _this.props.onFocus(event);\n\n      _this.props.input.onFocus(event);\n    };\n\n    _this.handleChange = function (event) {\n      /**\n       * Necessary because of a React bug on <input type=\"number\">\n       * @see https://github.com/facebook/react/issues/1425\n       */\n      var numericValue = isNaN(parseFloat(event.target.value)) ? null : parseFloat(event.target.value);\n\n      _this.props.onChange(numericValue);\n\n      _this.props.input.onChange(numericValue);\n    };\n\n    return _this;\n  }\n\n  NumberInput.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        input = _a.input,\n        isRequired = _a.isRequired,\n        label = _a.label,\n        meta = _a.meta,\n        options = _a.options,\n        source = _a.source,\n        step = _a.step,\n        resource = _a.resource,\n        rest = __rest(_a, [\"className\", \"input\", \"isRequired\", \"label\", \"meta\", \"options\", \"source\", \"step\", \"resource\"]);\n\n    if (typeof meta === 'undefined') {\n      throw new Error(\"The NumberInput component wasn't called within a redux-form <Field>. Did you decorate it and forget to add the addField prop to your component? See https://marmelab.com/react-admin/Inputs.html#writing-your-own-input-component for details.\");\n    }\n\n    var touched = meta.touched,\n        error = meta.error;\n    return React.createElement(TextField, __assign({\n      type: \"number\",\n      margin: \"normal\",\n      error: !!(touched && error),\n      helperText: touched && error,\n      step: step,\n      label: React.createElement(FieldTitle, {\n        label: label,\n        source: source,\n        resource: resource,\n        isRequired: isRequired\n      }),\n      className: className\n    }, options, sanitizeRestProps(rest), input, {\n      onBlur: this.handleBlur,\n      onFocus: this.handleFocus,\n      onChange: this.handleChange\n    }));\n  };\n\n  return NumberInput;\n}(Component);\n\nexport { NumberInput };\nNumberInput.propTypes = {\n  className: PropTypes.string,\n  input: PropTypes.object,\n  isRequired: PropTypes.bool,\n  label: PropTypes.string,\n  meta: PropTypes.object,\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onFocus: PropTypes.func,\n  options: PropTypes.object,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  validate: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)])\n};\nNumberInput.defaultProps = {\n  onBlur: function onBlur() {},\n  onChange: function onChange() {},\n  onFocus: function onFocus() {},\n  options: {},\n  step: 'any',\n  textAlign: 'right'\n};\nexport var NumberInputWithField = addField(NumberInput);\nNumberInputWithField.defaultProps = {\n  textAlign: 'right'\n};\nexport default NumberInputWithField;","map":null,"metadata":{},"sourceType":"module"}