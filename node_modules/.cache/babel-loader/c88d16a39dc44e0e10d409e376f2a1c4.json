{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport compose from 'recompose/compose';\nimport Drawer from '@material-ui/core/Drawer';\nimport { withStyles } from '@material-ui/core/styles';\nimport withWidth from '@material-ui/core/withWidth';\nimport { setSidebarVisibility } from 'ra-core';\nimport Responsive from './Responsive';\nexport var DRAWER_WIDTH = 240;\nexport var CLOSED_DRAWER_WIDTH = 55;\n\nvar styles = function styles(theme) {\n  var _a;\n\n  return {\n    drawerPaper: (_a = {\n      position: 'relative',\n      height: 'auto',\n      overflowX: 'hidden',\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      }),\n      backgroundColor: 'transparent',\n      marginTop: '0.5em',\n      borderRight: 'none'\n    }, _a[theme.breakpoints.only('xs')] = {\n      marginTop: 0,\n      height: '100vh',\n      position: 'inherit',\n      backgroundColor: theme.palette.background.default\n    }, _a[theme.breakpoints.up('md')] = {\n      border: 'none',\n      marginTop: '1.5em'\n    }, _a)\n  };\n}; // We shouldn't need PureComponent here as it's connected\n// but for some reason it keeps rendering even though mapStateToProps returns the same object\n\n\nvar Sidebar =\n/** @class */\nfunction (_super) {\n  __extends(Sidebar, _super);\n\n  function Sidebar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleClose = function () {\n      return _this.props.setSidebarVisibility(false);\n    };\n\n    _this.toggleSidebar = function () {\n      return _this.props.setSidebarVisibility(!_this.props.open);\n    };\n\n    return _this;\n  }\n\n  Sidebar.prototype.componentWillMount = function () {\n    var _a = this.props,\n        width = _a.width,\n        setSidebarVisibility = _a.setSidebarVisibility;\n\n    if (width !== 'xs' && width !== 'sm') {\n      setSidebarVisibility(true);\n    }\n  };\n\n  Sidebar.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        classes = _a.classes,\n        closedSize = _a.closedSize,\n        open = _a.open,\n        setSidebarVisibility = _a.setSidebarVisibility,\n        size = _a.size,\n        width = _a.width,\n        rest = __rest(_a, [\"children\", \"classes\", \"closedSize\", \"open\", \"setSidebarVisibility\", \"size\", \"width\"]);\n\n    return React.createElement(Responsive, {\n      xsmall: React.createElement(Drawer, __assign({\n        variant: \"temporary\",\n        open: open,\n        PaperProps: {\n          className: classes.drawerPaper,\n          style: {\n            width: size\n          }\n        },\n        onClose: this.toggleSidebar\n      }, rest), React.cloneElement(children, {\n        onMenuClick: this.handleClose\n      })),\n      small: React.createElement(Drawer, __assign({\n        variant: \"permanent\",\n        open: open,\n        PaperProps: {\n          className: classes.drawerPaper,\n          style: {\n            width: open ? size : closedSize\n          }\n        },\n        onClose: this.toggleSidebar\n      }, rest), React.cloneElement(children, {\n        dense: true,\n        onMenuClick: this.handleClose\n      })),\n      medium: React.createElement(Drawer, __assign({\n        variant: \"permanent\",\n        open: open,\n        PaperProps: {\n          className: classes.drawerPaper,\n          style: {\n            width: open ? size : closedSize\n          }\n        },\n        onClose: this.toggleSidebar\n      }, rest), React.cloneElement(children, {\n        dense: true\n      }))\n    });\n  };\n\n  return Sidebar;\n}(PureComponent);\n\nSidebar.propTypes = {\n  children: PropTypes.node.isRequired,\n  classes: PropTypes.object,\n  closedSize: PropTypes.number,\n  open: PropTypes.bool.isRequired,\n  setSidebarVisibility: PropTypes.func.isRequired,\n  size: PropTypes.number,\n  width: PropTypes.string\n};\nSidebar.defaultProps = {\n  size: DRAWER_WIDTH,\n  closedSize: CLOSED_DRAWER_WIDTH\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    open: state.admin.ui.sidebarOpen,\n    locale: state.locale\n  };\n};\n\nexport default compose(connect(mapStateToProps, {\n  setSidebarVisibility: setSidebarVisibility\n}), withStyles(styles), withWidth({\n  resizeInterval: Infinity\n}) // used to initialize the visibility on first render\n)(Sidebar);","map":null,"metadata":{},"sourceType":"module"}