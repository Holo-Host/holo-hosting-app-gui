{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles } from '@material-ui/core/styles';\nimport compose from 'recompose/compose';\nimport { addField, translate, FieldTitle } from 'ra-core';\nimport defaultSanitizeRestProps from './sanitizeRestProps';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      rest = __rest(_a, [\"setFilter\", \"setPagination\", \"setSort\"]);\n\n  return defaultSanitizeRestProps(rest);\n};\n\nvar styles = function styles(theme) {\n  return {\n    root: {},\n    label: {\n      transform: 'translate(0, 1.5px) scale(0.75)',\n      transformOrigin: \"top \" + (theme.direction === 'ltr' ? 'left' : 'right')\n    },\n    checkbox: {\n      height: 32\n    }\n  };\n};\n/**\n * An Input component for a checkbox group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to\n * the 'optionValue' of 'choices' attribute objects.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *     { id: 12, name: 'Ray Hakt' },\n *     { id: 31, name: 'Ann Gullar' },\n *     { id: 42, name: 'Sean Phonee' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi' },\n *    { _id: 456, full_name: 'Jane Austen' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.category.programming' },\n *    { id: 'lifestyle', name: 'myroot.category.lifestyle' },\n *    { id: 'photography', name: 'myroot.category.photography' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <CheckboxGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <Checkbox> components\n */\n\n\nvar CheckboxGroupInput =\n/** @class */\nfunction (_super) {\n  __extends(CheckboxGroupInput, _super);\n\n  function CheckboxGroupInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleCheck = function (event, isChecked) {\n      var _a = _this.props.input,\n          value = _a.value,\n          onChange = _a.onChange;\n      var newValue;\n\n      try {\n        // try to convert string value to number, e.g. '123'\n        newValue = JSON.parse(event.target.value);\n      } catch (e) {\n        // impossible to convert value, e.g. 'abc'\n        newValue = event.target.value;\n      }\n\n      if (isChecked) {\n        onChange((value || []).concat([newValue]));\n      } else {\n        onChange(value.filter(function (v) {\n          return v != newValue;\n        }));\n      }\n    };\n\n    _this.renderCheckbox = function (choice) {\n      var _a = _this.props,\n          id = _a.id,\n          value = _a.input.value,\n          optionText = _a.optionText,\n          optionValue = _a.optionValue,\n          options = _a.options,\n          translate = _a.translate,\n          translateChoice = _a.translateChoice,\n          classes = _a.classes;\n      var choiceName = React.isValidElement(optionText) // eslint-disable-line no-nested-ternary\n      ? React.cloneElement(optionText, {\n        record: choice\n      }) : typeof optionText === 'function' ? optionText(choice) : get(choice, optionText);\n      return React.createElement(FormControlLabel, {\n        htmlFor: id + \"_\" + get(choice, optionValue),\n        key: get(choice, optionValue),\n        checked: value ? value.find(function (v) {\n          return v == get(choice, optionValue);\n        }) !== undefined : false,\n        onChange: _this.handleCheck,\n        value: String(get(choice, optionValue)),\n        control: React.createElement(Checkbox, __assign({\n          id: id + \"_\" + get(choice, optionValue),\n          color: \"primary\",\n          className: classes.checkbox\n        }, options)),\n        label: translateChoice ? translate(choiceName, {\n          _: choiceName\n        }) : choiceName\n      });\n    };\n\n    return _this;\n  }\n\n  CheckboxGroupInput.prototype.render = function () {\n    var _a = this.props,\n        choices = _a.choices,\n        className = _a.className,\n        _b = _a.classes,\n        classes = _b === void 0 ? {} : _b,\n        isRequired = _a.isRequired,\n        label = _a.label,\n        meta = _a.meta,\n        resource = _a.resource,\n        source = _a.source,\n        input = _a.input,\n        rest = __rest(_a, [\"choices\", \"className\", \"classes\", \"isRequired\", \"label\", \"meta\", \"resource\", \"source\", \"input\"]);\n\n    if (typeof meta === 'undefined') {\n      throw new Error(\"The CheckboxGroupInput component wasn't called within a redux-form <Field>. Did you decorate it and forget to add the addField prop to your component? See https://marmelab.com/react-admin/Inputs.html#writing-your-own-input-component for details.\");\n    }\n\n    var touched = meta.touched,\n        error = meta.error,\n        _c = meta.helperText,\n        helperText = _c === void 0 ? false : _c;\n    return React.createElement(FormControl, __assign({\n      className: className,\n      component: \"fieldset\",\n      margin: \"normal\"\n    }, sanitizeRestProps(rest)), React.createElement(FormLabel, {\n      component: \"legend\",\n      className: classes.label\n    }, React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    })), React.createElement(FormGroup, {\n      row: true\n    }, choices.map(this.renderCheckbox)), touched && error && React.createElement(FormHelperText, {\n      error: true\n    }, error), helperText && React.createElement(FormHelperText, null, helperText));\n  };\n\n  return CheckboxGroupInput;\n}(Component);\n\nexport { CheckboxGroupInput };\nCheckboxGroupInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object),\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  label: PropTypes.string,\n  source: PropTypes.string,\n  options: PropTypes.object,\n  id: PropTypes.string,\n  input: PropTypes.shape({\n    onChange: PropTypes.func.isRequired\n  }),\n  isRequired: PropTypes.bool,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]).isRequired,\n  optionValue: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  translate: PropTypes.func.isRequired,\n  translateChoice: PropTypes.bool.isRequired,\n  meta: PropTypes.object\n};\nCheckboxGroupInput.defaultProps = {\n  choices: [],\n  classes: {},\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true\n};\nvar EnhancedCheckboxGroupInput = compose(addField, translate, withStyles(styles))(CheckboxGroupInput);\nEnhancedCheckboxGroupInput.defaultProps = {\n  fullWidth: true\n};\nexport default EnhancedCheckboxGroupInput;","map":null,"metadata":{},"sourceType":"module"}