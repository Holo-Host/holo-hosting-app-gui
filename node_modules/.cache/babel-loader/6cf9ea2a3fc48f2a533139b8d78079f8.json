{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport pure from 'recompose/pure';\nimport compose from 'recompose/compose';\nimport { translate } from 'ra-core';\nimport Typography from '@material-ui/core/Typography';\nimport sanitizeRestProps from './sanitizeRestProps';\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property an the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <Chip>{record.first_name} {record.last_name}</Chip>;\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\n\nexport var SelectField = function SelectField(_a) {\n  var className = _a.className,\n      source = _a.source,\n      record = _a.record,\n      choices = _a.choices,\n      optionValue = _a.optionValue,\n      optionText = _a.optionText,\n      translate = _a.translate,\n      translateChoice = _a.translateChoice,\n      rest = __rest(_a, [\"className\", \"source\", \"record\", \"choices\", \"optionValue\", \"optionText\", \"translate\", \"translateChoice\"]);\n\n  var value = get(record, source);\n  var choice = choices.find(function (c) {\n    return c[optionValue] === value;\n  });\n  if (!choice) return null;\n  var choiceName = React.isValidElement(optionText) // eslint-disable-line no-nested-ternary\n  ? React.cloneElement(optionText, {\n    record: choice\n  }) : typeof optionText === 'function' ? optionText(choice) : choice[optionText];\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    body1: \"body1\",\n    className: className\n  }, sanitizeRestProps(rest)), translateChoice ? translate(choiceName, {\n    _: choiceName\n  }) : choiceName);\n};\nSelectField.propTypes = {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  className: PropTypes.string,\n  cellClassName: PropTypes.string,\n  headerClassName: PropTypes.string,\n  choices: PropTypes.arrayOf(PropTypes.object),\n  label: PropTypes.string,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]).isRequired,\n  optionValue: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  record: PropTypes.object,\n  sortBy: PropTypes.string,\n  source: PropTypes.string.isRequired,\n  translate: PropTypes.func.isRequired,\n  translateChoice: PropTypes.bool.isRequired\n};\nSelectField.defaultProps = {\n  record: {},\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true\n};\nvar enhance = compose(pure, translate);\nvar EnhancedSelectField = enhance(SelectField);\nEnhancedSelectField.defaultProps = {\n  addLabel: true\n};\nexport default EnhancedSelectField;","map":null,"metadata":{},"sourceType":"module"}