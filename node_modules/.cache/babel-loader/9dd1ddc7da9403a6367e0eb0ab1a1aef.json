{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nexport var USER_LOGIN = 'RA/USER_LOGIN';\nexport var USER_LOGIN_LOADING = 'RA/USER_LOGIN_LOADING';\nexport var USER_LOGIN_FAILURE = 'RA/USER_LOGIN_FAILURE';\nexport var USER_LOGIN_SUCCESS = 'RA/USER_LOGIN_SUCCESS';\nexport var userLogin = function userLogin(payload, pathName) {\n  return {\n    type: USER_LOGIN,\n    payload: payload,\n    meta: {\n      auth: true,\n      pathName: pathName\n    }\n  };\n};\nexport var USER_CHECK = 'RA/USER_CHECK';\nexport var USER_CHECK_SUCCESS = 'RA/USER_CHECK_SUCCESS';\nexport var userCheck = function userCheck(payload, pathName, routeParams) {\n  return {\n    type: USER_CHECK,\n    payload: __assign({}, payload, {\n      routeParams: routeParams\n    }),\n    meta: {\n      auth: true,\n      pathName: pathName\n    }\n  };\n};\nexport var USER_LOGOUT = 'RA/USER_LOGOUT';\n/**\n * Action to trigger logout of the current user. The entire redux state will be cleared\n * thanks to the resettableAppReducer in Admin.\n * @see: Admin.js\n * @param redirectTo Path to direct to after logout\n * @return {{type: string, payload: {redirectTo: string}, meta: {auth: boolean}}}\n */\n\nexport var userLogout = function userLogout(redirectTo) {\n  return {\n    type: USER_LOGOUT,\n    payload: {\n      redirectTo: redirectTo\n    },\n    meta: {\n      auth: true\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}