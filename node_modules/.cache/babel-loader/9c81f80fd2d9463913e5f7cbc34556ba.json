{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Children, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport compose from 'recompose/compose';\nimport classnames from 'classnames';\nimport { getDefaultValues, translate, REDUX_FORM_NAME } from 'ra-core';\nimport FormInput from './FormInput';\nimport Toolbar from './Toolbar';\nimport CardContentInner from '../layout/CardContentInner';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var anyTouched = _a.anyTouched,\n      array = _a.array,\n      asyncBlurFields = _a.asyncBlurFields,\n      asyncValidate = _a.asyncValidate,\n      asyncValidating = _a.asyncValidating,\n      autofill = _a.autofill,\n      blur = _a.blur,\n      change = _a.change,\n      clearAsyncError = _a.clearAsyncError,\n      clearFields = _a.clearFields,\n      clearSubmit = _a.clearSubmit,\n      clearSubmitErrors = _a.clearSubmitErrors,\n      destroy = _a.destroy,\n      dirty = _a.dirty,\n      dispatch = _a.dispatch,\n      form = _a.form,\n      handleSubmit = _a.handleSubmit,\n      initialize = _a.initialize,\n      initialized = _a.initialized,\n      initialValues = _a.initialValues,\n      pristine = _a.pristine,\n      pure = _a.pure,\n      redirect = _a.redirect,\n      reset = _a.reset,\n      resetSection = _a.resetSection,\n      save = _a.save,\n      submit = _a.submit,\n      submitFailed = _a.submitFailed,\n      submitSucceeded = _a.submitSucceeded,\n      submitting = _a.submitting,\n      touch = _a.touch,\n      translate = _a.translate,\n      triggerSubmit = _a.triggerSubmit,\n      untouch = _a.untouch,\n      valid = _a.valid,\n      validate = _a.validate,\n      props = __rest(_a, [\"anyTouched\", \"array\", \"asyncBlurFields\", \"asyncValidate\", \"asyncValidating\", \"autofill\", \"blur\", \"change\", \"clearAsyncError\", \"clearFields\", \"clearSubmit\", \"clearSubmitErrors\", \"destroy\", \"dirty\", \"dispatch\", \"form\", \"handleSubmit\", \"initialize\", \"initialized\", \"initialValues\", \"pristine\", \"pure\", \"redirect\", \"reset\", \"resetSection\", \"save\", \"submit\", \"submitFailed\", \"submitSucceeded\", \"submitting\", \"touch\", \"translate\", \"triggerSubmit\", \"untouch\", \"valid\", \"validate\"]);\n\n  return props;\n};\n\nvar SimpleForm =\n/** @class */\nfunction (_super) {\n  __extends(SimpleForm, _super);\n\n  function SimpleForm() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleSubmitWithRedirect = function (redirect) {\n      if (redirect === void 0) {\n        redirect = _this.props.redirect;\n      }\n\n      return _this.props.handleSubmit(function (values) {\n        return _this.props.save(values, redirect);\n      });\n    };\n\n    return _this;\n  }\n\n  SimpleForm.prototype.render = function () {\n    var _a = this.props,\n        basePath = _a.basePath,\n        children = _a.children,\n        className = _a.className,\n        invalid = _a.invalid,\n        pristine = _a.pristine,\n        record = _a.record,\n        redirect = _a.redirect,\n        resource = _a.resource,\n        saving = _a.saving,\n        submitOnEnter = _a.submitOnEnter,\n        toolbar = _a.toolbar,\n        version = _a.version,\n        rest = __rest(_a, [\"basePath\", \"children\", \"className\", \"invalid\", \"pristine\", \"record\", \"redirect\", \"resource\", \"saving\", \"submitOnEnter\", \"toolbar\", \"version\"]);\n\n    return React.createElement(\"form\", __assign({\n      className: classnames('simple-form', className)\n    }, sanitizeRestProps(rest)), React.createElement(CardContentInner, {\n      key: version\n    }, Children.map(children, function (input) {\n      return React.createElement(FormInput, {\n        basePath: basePath,\n        input: input,\n        record: record,\n        resource: resource\n      });\n    })), toolbar && React.cloneElement(toolbar, {\n      basePath: basePath,\n      handleSubmitWithRedirect: this.handleSubmitWithRedirect,\n      handleSubmit: this.props.handleSubmit,\n      invalid: invalid,\n      pristine: pristine,\n      record: record,\n      redirect: redirect,\n      resource: resource,\n      saving: saving,\n      submitOnEnter: submitOnEnter\n    }));\n  };\n\n  return SimpleForm;\n}(Component);\n\nexport { SimpleForm };\nSimpleForm.propTypes = {\n  basePath: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  defaultValue: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n  handleSubmit: PropTypes.func,\n  invalid: PropTypes.bool,\n  pristine: PropTypes.bool,\n  record: PropTypes.object,\n  resource: PropTypes.string,\n  redirect: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]),\n  save: PropTypes.func,\n  saving: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n  submitOnEnter: PropTypes.bool,\n  toolbar: PropTypes.element,\n  validate: PropTypes.func,\n  version: PropTypes.number\n};\nSimpleForm.defaultProps = {\n  submitOnEnter: true,\n  toolbar: React.createElement(Toolbar, null)\n};\nvar enhance = compose(connect(function (state, props) {\n  return {\n    form: props.form || REDUX_FORM_NAME,\n    initialValues: getDefaultValues(state, props),\n    saving: props.saving || state.admin.saving\n  };\n}), translate, // Must be before reduxForm so that it can be used in validation\nreduxForm({\n  destroyOnUnmount: false,\n  enableReinitialize: true,\n  keepDirtyOnReinitialize: true\n}));\nexport default enhance(SimpleForm);","map":null,"metadata":{},"sourceType":"module"}