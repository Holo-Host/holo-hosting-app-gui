{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\nimport ActionCheck from '@material-ui/icons/CheckCircle';\nimport AlertError from '@material-ui/icons/ErrorOutline';\nimport classnames from 'classnames';\nimport compose from 'recompose/compose';\nimport { translate } from 'ra-core';\n\nvar styles = function styles(theme) {\n  return createStyles({\n    contentText: {\n      minWidth: 400\n    },\n    confirmPrimary: {\n      color: theme.palette.primary.main\n    },\n    confirmWarning: {\n      color: theme.palette.error.main,\n      '&:hover': {\n        backgroundColor: fade(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    },\n    iconPaddingStyle: {\n      paddingRight: '0.5em'\n    }\n  });\n};\n/**\n * Confirmation dialog\n *\n * @example\n * <Confirm\n *     isOpen={true}\n *     title=\"Delete Item\"\n *     content=\"Are you sure you want to delete this item?\"\n *     confirm=\"Yes\"\n *     confirmColor=\"primary\"\n *     cancel=\"Cancel\"\n *     onConfirm={() => { // do something }}\n *     onClose={() => { // do something }}\n * />\n */\n\n\nvar Confirm =\n/** @class */\nfunction (_super) {\n  __extends(Confirm, _super);\n\n  function Confirm() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      loading: false\n    };\n\n    _this.handleConfirm = function () {\n      _this.setState({\n        loading: true\n      });\n\n      _this.props.onConfirm();\n    };\n\n    return _this;\n  }\n\n  Confirm.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        isOpen = _b.isOpen,\n        title = _b.title,\n        content = _b.content,\n        confirm = _b.confirm,\n        cancel = _b.cancel,\n        confirmColor = _b.confirmColor,\n        onClose = _b.onClose,\n        classes = _b.classes,\n        translate = _b.translate,\n        _c = _b.translateOptions,\n        translateOptions = _c === void 0 ? {} : _c;\n    var loading = this.state.loading;\n    return React.createElement(Dialog, {\n      open: isOpen,\n      onClose: onClose,\n      \"aria-labelledby\": \"alert-dialog-title\"\n    }, React.createElement(DialogTitle, {\n      id: \"alert-dialog-title\"\n    }, translate(title, __assign({\n      _: title\n    }, translateOptions))), React.createElement(DialogContent, null, React.createElement(DialogContentText, {\n      className: classes.contentText\n    }, translate(content, __assign({\n      _: content\n    }, translateOptions)))), React.createElement(DialogActions, null, React.createElement(Button, {\n      disabled: loading,\n      onClick: onClose\n    }, React.createElement(AlertError, {\n      className: classes.iconPaddingStyle\n    }), translate(cancel, {\n      _: cancel\n    })), React.createElement(Button, {\n      disabled: loading,\n      onClick: this.handleConfirm,\n      className: classnames('ra-confirm', (_a = {}, _a[classes.confirmWarning] = confirmColor === 'warning', _a[classes.confirmPrimary] = confirmColor === 'primary', _a)),\n      autoFocus: true\n    }, React.createElement(ActionCheck, {\n      className: classes.iconPaddingStyle\n    }), translate(confirm, {\n      _: confirm\n    }))));\n  };\n\n  return Confirm;\n}(Component);\n\nConfirm.propTypes = {\n  cancel: PropTypes.string.isRequired,\n  classes: PropTypes.object.isRequired,\n  confirm: PropTypes.string.isRequired,\n  confirmColor: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  translate: PropTypes.func.isRequired\n};\nConfirm.defaultProps = {\n  cancel: 'ra.action.cancel',\n  classes: {},\n  confirm: 'ra.action.confirm',\n  confirmColor: 'primary',\n  isOpen: false\n};\nexport default compose(withStyles(styles), translate)(Confirm);","map":null,"metadata":{},"sourceType":"module"}