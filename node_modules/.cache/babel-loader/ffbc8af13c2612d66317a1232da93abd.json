{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectWithoutProperties\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Input = _interopRequireDefault(require(\"../Input\"));\n\nvar _InputLabel = _interopRequireDefault(require(\"../InputLabel\"));\n\nvar _FormControl = _interopRequireDefault(require(\"../FormControl\"));\n\nvar _FormHelperText = _interopRequireDefault(require(\"../FormHelperText\"));\n\nvar _Select = _interopRequireDefault(require(\"../Select\")); // @inheritedComponent FormControl\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n * - [FormControl](/api/form-control)\n * - [InputLabel](/api/input-label)\n * - [Input](/api/input)\n * - [FormHelperText](/api/form-helper-text)\n *\n * If you wish to alter the properties applied to the native input, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n * - using the upper case props for passing values directly to the components\n * - using the underlying components directly as shown in the demos\n */\n\n\nfunction TextField(props) {\n  var autoComplete = props.autoComplete,\n      autoFocus = props.autoFocus,\n      children = props.children,\n      className = props.className,\n      defaultValue = props.defaultValue,\n      disabled = props.disabled,\n      error = props.error,\n      FormHelperTextProps = props.FormHelperTextProps,\n      fullWidth = props.fullWidth,\n      helperText = props.helperText,\n      id = props.id,\n      InputLabelProps = props.InputLabelProps,\n      inputProps = props.inputProps,\n      InputProps = props.InputProps,\n      inputRef = props.inputRef,\n      label = props.label,\n      multiline = props.multiline,\n      name = props.name,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      onFocus = props.onFocus,\n      placeholder = props.placeholder,\n      required = props.required,\n      rows = props.rows,\n      rowsMax = props.rowsMax,\n      select = props.select,\n      SelectProps = props.SelectProps,\n      type = props.type,\n      value = props.value,\n      other = (0, _objectWithoutProperties2.default)(props, [\"autoComplete\", \"autoFocus\", \"children\", \"className\", \"defaultValue\", \"disabled\", \"error\", \"FormHelperTextProps\", \"fullWidth\", \"helperText\", \"id\", \"InputLabelProps\", \"inputProps\", \"InputProps\", \"inputRef\", \"label\", \"multiline\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"placeholder\", \"required\", \"rows\", \"rowsMax\", \"select\", \"SelectProps\", \"type\", \"value\"]);\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(!select || Boolean(children), 'Material-UI: `children` must be passed when using the `TextField` component with `select`.') : void 0;\n  var helperTextId = helperText && id ? \"\".concat(id, \"-helper-text\") : undefined;\n\n  var InputElement = _react.default.createElement(_Input.default, (0, _extends2.default)({\n    autoComplete: autoComplete,\n    autoFocus: autoFocus,\n    defaultValue: defaultValue,\n    disabled: disabled,\n    fullWidth: fullWidth,\n    multiline: multiline,\n    name: name,\n    rows: rows,\n    rowsMax: rowsMax,\n    type: type,\n    value: value,\n    id: id,\n    inputRef: inputRef,\n    onBlur: onBlur,\n    onChange: onChange,\n    onFocus: onFocus,\n    placeholder: placeholder,\n    inputProps: inputProps\n  }, InputProps));\n\n  return _react.default.createElement(_FormControl.default, (0, _extends2.default)({\n    \"aria-describedby\": helperTextId,\n    className: className,\n    error: error,\n    fullWidth: fullWidth,\n    required: required\n  }, other), label && _react.default.createElement(_InputLabel.default, (0, _extends2.default)({\n    htmlFor: id\n  }, InputLabelProps), label), select ? _react.default.createElement(_Select.default, (0, _extends2.default)({\n    value: value,\n    input: InputElement\n  }, SelectProps), children) : InputElement, helperText && _react.default.createElement(_FormHelperText.default, (0, _extends2.default)({\n    id: helperTextId\n  }, FormHelperTextProps), helperText));\n}\n\nTextField.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * This property helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it here:\n   * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n   */\n  autoComplete: _propTypes.default.string,\n\n  /**\n   * If `true`, the input will be focused during the first mount.\n   */\n  autoFocus: _propTypes.default.bool,\n\n  /**\n   * @ignore\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * The default value of the `Input` element.\n   */\n  defaultValue: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n\n  /**\n   * If `true`, the input will be disabled.\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: _propTypes.default.bool,\n\n  /**\n   * Properties applied to the [`FormHelperText`](/api/form-helper-text) element.\n   */\n  FormHelperTextProps: _propTypes.default.object,\n\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth: _propTypes.default.bool,\n\n  /**\n   * The helper text content.\n   */\n  helperText: _propTypes.default.node,\n\n  /**\n   * The id of the `input` element.\n   * Use that property to make `label` and `helperText` accessible for screen readers.\n   */\n  id: _propTypes.default.string,\n\n  /**\n   * Properties applied to the [`InputLabel`](/api/input-label) element.\n   */\n  InputLabelProps: _propTypes.default.object,\n\n  /**\n   * Properties applied to the `Input` element.\n   */\n  InputProps: _propTypes.default.object,\n\n  /**\n   * Attributes applied to the native `input` element.\n   */\n  inputProps: _propTypes.default.object,\n\n  /**\n   * Use that property to pass a ref callback to the native input component.\n   */\n  inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n\n  /**\n   * The label content.\n   */\n  label: _propTypes.default.node,\n\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   */\n  margin: _propTypes.default.oneOf(['none', 'dense', 'normal']),\n\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline: _propTypes.default.bool,\n\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: _propTypes.default.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: _propTypes.default.func,\n\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: _propTypes.default.func,\n\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder: _propTypes.default.string,\n\n  /**\n   * If `true`, the label is displayed as required.\n   */\n  required: _propTypes.default.bool,\n\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  rowsMax: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n\n  /**\n   * Render a `Select` element while passing the `Input` element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   */\n  select: _propTypes.default.bool,\n\n  /**\n   * Properties applied to the [`Select`](/api/select) element.\n   */\n  SelectProps: _propTypes.default.object,\n\n  /**\n   * Type attribute of the `Input` element. It should be a valid HTML5 input type.\n   */\n  type: _propTypes.default.string,\n\n  /**\n   * The value of the `Input` element, required for a controlled component.\n   */\n  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number, _propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]))])\n} : {};\nTextField.defaultProps = {\n  required: false,\n  select: false\n};\nvar _default = TextField;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}