{"ast":null,"code":"// The QueryScheduler is supposed to be a mechanism that schedules polling queries such that\n// they are clustered into the time slots of the QueryBatcher and are batched together. It\n// also makes sure that for a given polling query, if one instance of the query is inflight,\n// another instance will not be fired until the query returns or times out. We do this because\n// another query fires while one is already in flight, the data will stay in the \"loading\" state\n// even after the first query has returned.\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { FetchType } from '../core/types';\nimport { ObservableQuery } from '../core/ObservableQuery';\nimport { NetworkStatus } from '../core/networkStatus';\n\nvar QueryScheduler =\n/** @class */\nfunction () {\n  function QueryScheduler(_a) {\n    var queryManager = _a.queryManager,\n        ssrMode = _a.ssrMode; // Map going from queryIds to query options that are in flight.\n\n    this.inFlightQueries = {}; // Map going from query ids to the query options associated with those queries. Contains all of\n    // the queries, both in flight and not in flight.\n\n    this.registeredQueries = {}; // Map going from polling interval with to the query ids that fire on that interval.\n    // These query ids are associated with a set of options in the this.registeredQueries.\n\n    this.intervalQueries = {}; // Map going from polling interval widths to polling timers.\n\n    this.pollingTimers = {};\n    this.ssrMode = false;\n    this.queryManager = queryManager;\n    this.ssrMode = ssrMode || false;\n  }\n\n  QueryScheduler.prototype.checkInFlight = function (queryId) {\n    var query = this.queryManager.queryStore.get(queryId);\n    return query && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;\n  };\n\n  QueryScheduler.prototype.fetchQuery = function (queryId, options, fetchType) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.queryManager.fetchQuery(queryId, options, fetchType).then(function (result) {\n        resolve(result);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  };\n\n  QueryScheduler.prototype.startPollingQuery = function (options, queryId, listener) {\n    if (!options.pollInterval) {\n      throw new Error('Attempted to start a polling query without a polling interval.');\n    } // Do not poll in SSR mode\n\n\n    if (this.ssrMode) return queryId;\n    this.registeredQueries[queryId] = options;\n\n    if (listener) {\n      this.queryManager.addQueryListener(queryId, listener);\n    }\n\n    this.addQueryOnInterval(queryId, options);\n    return queryId;\n  };\n\n  QueryScheduler.prototype.stopPollingQuery = function (queryId) {\n    // Remove the query options from one of the registered queries.\n    // The polling function will then take care of not firing it anymore.\n    delete this.registeredQueries[queryId];\n  }; // Fires the all of the queries on a particular interval. Called on a setInterval.\n\n\n  QueryScheduler.prototype.fetchQueriesOnInterval = function (interval) {\n    var _this = this; // XXX this \"filter\" here is nasty, because it does two things at the same time.\n    // 1. remove queries that have stopped polling\n    // 2. call fetchQueries for queries that are polling and not in flight.\n    // TODO: refactor this to make it cleaner\n\n\n    this.intervalQueries[interval] = this.intervalQueries[interval].filter(function (queryId) {\n      // If queryOptions can't be found from registeredQueries or if it has a\n      // different interval, it means that this queryId is no longer registered\n      // and should be removed from the list of queries firing on this interval.\n      //\n      // We don't remove queries from intervalQueries immediately in\n      // stopPollingQuery so that we can keep the timer consistent when queries\n      // are removed and replaced, and to avoid quadratic behavior when stopping\n      // many queries.\n      if (!(_this.registeredQueries.hasOwnProperty(queryId) && _this.registeredQueries[queryId].pollInterval === interval)) {\n        return false;\n      } // Don't fire this instance of the polling query is one of the instances is already in\n      // flight.\n\n\n      if (_this.checkInFlight(queryId)) {\n        return true;\n      }\n\n      var queryOptions = _this.registeredQueries[queryId];\n\n      var pollingOptions = __assign({}, queryOptions);\n\n      pollingOptions.fetchPolicy = 'network-only'; // don't let unhandled rejections happen\n\n      _this.fetchQuery(queryId, pollingOptions, FetchType.poll).catch(function () {});\n\n      return true;\n    });\n\n    if (this.intervalQueries[interval].length === 0) {\n      clearInterval(this.pollingTimers[interval]);\n      delete this.intervalQueries[interval];\n    }\n  }; // Adds a query on a particular interval to this.intervalQueries and then fires\n  // that query with all the other queries executing on that interval. Note that the query id\n  // and query options must have been added to this.registeredQueries before this function is called.\n\n\n  QueryScheduler.prototype.addQueryOnInterval = function (queryId, queryOptions) {\n    var _this = this;\n\n    var interval = queryOptions.pollInterval;\n\n    if (!interval) {\n      throw new Error(\"A poll interval is required to start polling query with id '\" + queryId + \"'.\");\n    } // If there are other queries on this interval, this query will just fire with those\n    // and we don't need to create a new timer.\n\n\n    if (this.intervalQueries.hasOwnProperty(interval.toString()) && this.intervalQueries[interval].length > 0) {\n      this.intervalQueries[interval].push(queryId);\n    } else {\n      this.intervalQueries[interval] = [queryId]; // set up the timer for the function that will handle this interval\n\n      this.pollingTimers[interval] = setInterval(function () {\n        _this.fetchQueriesOnInterval(interval);\n      }, interval);\n    }\n  }; // Used only for unit testing.\n\n\n  QueryScheduler.prototype.registerPollingQuery = function (queryOptions) {\n    if (!queryOptions.pollInterval) {\n      throw new Error('Attempted to register a non-polling query with the scheduler.');\n    }\n\n    return new ObservableQuery({\n      scheduler: this,\n      options: queryOptions\n    });\n  };\n\n  return QueryScheduler;\n}();\n\nexport { QueryScheduler };","map":null,"metadata":{},"sourceType":"module"}