{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { Component } from 'react';\nimport inflection from 'inflection';\nimport { withStyles } from '@material-ui/core/styles';\nimport { EditController, InferredElement, getElementsFromRecords } from 'ra-core';\nimport { EditView, styles } from './Edit';\nimport editFieldTypes from './editFieldTypes';\n\nvar EditViewGuesser =\n/** @class */\nfunction (_super) {\n  __extends(EditViewGuesser, _super);\n\n  function EditViewGuesser() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      inferredChild: null\n    };\n    return _this;\n  }\n\n  EditViewGuesser.prototype.componentDidUpdate = function () {\n    var _a = this.props,\n        record = _a.record,\n        resource = _a.resource;\n\n    if (record && !this.state.inferredChild) {\n      var inferredElements = getElementsFromRecords([record], editFieldTypes);\n      var inferredChild = new InferredElement(editFieldTypes.form, null, inferredElements);\n      process.env.NODE_ENV !== 'production' && // eslint-disable-next-line no-console\n      console.log(\"Guessed Edit:\\n\\nexport const \" + inflection.capitalize(inflection.singularize(resource)) + \"Edit = props => (\\n    <Edit {...props}>\\n\" + inferredChild.getRepresentation() + \"\\n    </Edit>\\n);\");\n      this.setState({\n        inferredChild: inferredChild.getElement()\n      });\n    }\n  };\n\n  EditViewGuesser.prototype.render = function () {\n    return React.createElement(EditView, __assign({}, this.props), this.state.inferredChild);\n  };\n\n  return EditViewGuesser;\n}(Component);\n\nexport { EditViewGuesser };\nEditViewGuesser.propTypes = EditView.propTypes;\n\nvar EditGuesser = function EditGuesser(props) {\n  return React.createElement(EditController, __assign({}, props), function (controllerProps) {\n    return React.createElement(EditViewGuesser, __assign({}, props, controllerProps));\n  });\n};\n\nexport default withStyles(styles)(EditGuesser);","map":null,"metadata":{},"sourceType":"module"}