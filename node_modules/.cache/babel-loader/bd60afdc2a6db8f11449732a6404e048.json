{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport pure from 'recompose/pure';\nimport Typography from '@material-ui/core/Typography';\nimport sanitizeRestProps from './sanitizeRestProps';\nvar hasNumberFormat = !!(typeof Intl === 'object' && Intl && typeof Intl.NumberFormat === 'function');\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\n\nexport var NumberField = function NumberField(_a) {\n  var className = _a.className,\n      record = _a.record,\n      source = _a.source,\n      locales = _a.locales,\n      options = _a.options,\n      textAlign = _a.textAlign,\n      rest = __rest(_a, [\"className\", \"record\", \"source\", \"locales\", \"options\", \"textAlign\"]);\n\n  if (!record) return null;\n  var value = get(record, source);\n  if (value == null) return null;\n\n  if (!hasNumberFormat) {\n    return React.createElement(Typography, __assign({\n      component: \"span\",\n      body1: \"body1\",\n      className: className\n    }, sanitizeRestProps(rest)), value);\n  }\n\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    body1: \"body1\",\n    className: className\n  }, sanitizeRestProps(rest)), value.toLocaleString(locales, options));\n};\nNumberField.propTypes = {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  cellClassName: PropTypes.string,\n  headerClassName: PropTypes.string,\n  label: PropTypes.string,\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  options: PropTypes.object,\n  record: PropTypes.object,\n  textAlign: PropTypes.string,\n  sortBy: PropTypes.string,\n  source: PropTypes.string.isRequired\n}; // wat? TypeScript looses the displayName if we don't set it explicitly\n\nNumberField.displayName = 'NumberField';\nvar ComposedNumberField = pure(NumberField);\nComposedNumberField.defaultProps = {\n  addLabel: true,\n  textAlign: 'right'\n};\nexport default ComposedNumberField;","map":null,"metadata":{},"sourceType":"module"}