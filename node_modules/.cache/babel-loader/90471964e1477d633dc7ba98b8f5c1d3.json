{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\n\n\nimport React, { Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Card from '@material-ui/core/Card';\nimport classnames from 'classnames';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport { ListController, getListControllerProps } from 'ra-core';\nimport Title from '../layout/Title';\nimport ListToolbar from './ListToolbar';\nimport DefaultPagination from './Pagination';\nimport BulkDeleteButton from '../button/BulkDeleteButton';\nimport BulkActionsToolbar from './BulkActionsToolbar';\nimport DefaultActions from './ListActions';\nimport defaultTheme from '../defaultTheme';\n\nvar DefaultBulkActionButtons = function DefaultBulkActionButtons(props) {\n  return React.createElement(BulkDeleteButton, __assign({}, props));\n};\n\nexport var styles = createStyles({\n  root: {\n    display: 'flex'\n  },\n  card: {\n    position: 'relative',\n    flex: '1 1 auto'\n  },\n  actions: {\n    zIndex: 2,\n    display: 'flex',\n    justifyContent: 'flex-end',\n    flexWrap: 'wrap'\n  },\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignSelf: 'flex-start'\n  },\n  noResults: {\n    padding: 20\n  }\n});\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var actions = _a.actions,\n      basePath = _a.basePath,\n      bulkActions = _a.bulkActions,\n      changeListParams = _a.changeListParams,\n      children = _a.children,\n      classes = _a.classes,\n      className = _a.className,\n      crudGetList = _a.crudGetList,\n      currentSort = _a.currentSort,\n      data = _a.data,\n      defaultTitle = _a.defaultTitle,\n      displayedFilters = _a.displayedFilters,\n      exporter = _a.exporter,\n      filter = _a.filter,\n      filterDefaultValues = _a.filterDefaultValues,\n      filters = _a.filters,\n      filterValues = _a.filterValues,\n      hasCreate = _a.hasCreate,\n      hasEdit = _a.hasEdit,\n      hasList = _a.hasList,\n      hasShow = _a.hasShow,\n      hideFilter = _a.hideFilter,\n      history = _a.history,\n      ids = _a.ids,\n      isLoading = _a.isLoading,\n      loadedOnce = _a.loadedOnce,\n      locale = _a.locale,\n      location = _a.location,\n      match = _a.match,\n      onSelect = _a.onSelect,\n      onToggleItem = _a.onToggleItem,\n      onUnselectItems = _a.onUnselectItems,\n      options = _a.options,\n      page = _a.page,\n      pagination = _a.pagination,\n      params = _a.params,\n      permissions = _a.permissions,\n      perPage = _a.perPage,\n      push = _a.push,\n      query = _a.query,\n      refresh = _a.refresh,\n      resource = _a.resource,\n      selectedIds = _a.selectedIds,\n      setFilters = _a.setFilters,\n      setPage = _a.setPage,\n      setPerPage = _a.setPerPage,\n      setSelectedIds = _a.setSelectedIds,\n      setSort = _a.setSort,\n      showFilter = _a.showFilter,\n      sort = _a.sort,\n      theme = _a.theme,\n      title = _a.title,\n      toggleItem = _a.toggleItem,\n      total = _a.total,\n      translate = _a.translate,\n      version = _a.version,\n      rest = __rest(_a, [\"actions\", \"basePath\", \"bulkActions\", \"changeListParams\", \"children\", \"classes\", \"className\", \"crudGetList\", \"currentSort\", \"data\", \"defaultTitle\", \"displayedFilters\", \"exporter\", \"filter\", \"filterDefaultValues\", \"filters\", \"filterValues\", \"hasCreate\", \"hasEdit\", \"hasList\", \"hasShow\", \"hideFilter\", \"history\", \"ids\", \"isLoading\", \"loadedOnce\", \"locale\", \"location\", \"match\", \"onSelect\", \"onToggleItem\", \"onUnselectItems\", \"options\", \"page\", \"pagination\", \"params\", \"permissions\", \"perPage\", \"push\", \"query\", \"refresh\", \"resource\", \"selectedIds\", \"setFilters\", \"setPage\", \"setPerPage\", \"setSelectedIds\", \"setSort\", \"showFilter\", \"sort\", \"theme\", \"title\", \"toggleItem\", \"total\", \"translate\", \"version\"]);\n\n  return rest;\n};\n\nexport var ListView = function ListView(_a) {\n  var // component props\n  actions = _a.actions,\n      aside = _a.aside,\n      filters = _a.filters,\n      bulkActions = _a.bulkActions,\n      // deprecated\n  bulkActionButtons = _a.bulkActionButtons,\n      pagination = _a.pagination,\n      // overridable by user\n  children = _a.children,\n      className = _a.className,\n      classes = _a.classes,\n      exporter = _a.exporter,\n      title = _a.title,\n      rest = __rest(_a, [\"actions\", \"aside\", \"filters\", \"bulkActions\", \"bulkActionButtons\", \"pagination\", \"children\", \"className\", \"classes\", \"exporter\", \"title\"]);\n\n  var defaultTitle = rest.defaultTitle,\n      version = rest.version;\n  var controllerProps = getListControllerProps(rest);\n  return React.createElement(\"div\", __assign({\n    className: classnames('list-page', classes.root, className)\n  }, sanitizeRestProps(rest)), React.createElement(Title, {\n    title: title,\n    defaultTitle: defaultTitle\n  }), React.createElement(Card, {\n    className: classes.card\n  }, bulkActions !== false && bulkActionButtons !== false && bulkActionButtons && !bulkActions && React.createElement(BulkActionsToolbar, __assign({}, controllerProps), bulkActionButtons), (filters || actions) && React.createElement(ListToolbar, __assign({\n    filters: filters\n  }, controllerProps, {\n    actions: actions,\n    bulkActions: bulkActions,\n    exporter: exporter\n  })), React.createElement(\"div\", {\n    key: version\n  }, children && cloneElement(Children.only(children), __assign({}, controllerProps, {\n    hasBulkActions: bulkActions !== false && bulkActionButtons !== false\n  })), pagination && cloneElement(pagination, controllerProps))), aside && cloneElement(aside, controllerProps));\n};\nListView.propTypes = {\n  actions: PropTypes.element,\n  aside: PropTypes.node,\n  basePath: PropTypes.string,\n  bulkActions: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  bulkActionButtons: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  children: PropTypes.element,\n  className: PropTypes.string,\n  classes: PropTypes.object,\n  currentSort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.object,\n  defaultTitle: PropTypes.string,\n  displayedFilters: PropTypes.object,\n  exporter: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  filterDefaultValues: PropTypes.object,\n  filters: PropTypes.element,\n  filterValues: PropTypes.object,\n  hasCreate: PropTypes.bool,\n  hideFilter: PropTypes.func,\n  ids: PropTypes.array,\n  isLoading: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onToggleItem: PropTypes.func,\n  onUnselectItems: PropTypes.func,\n  page: PropTypes.number,\n  pagination: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),\n  perPage: PropTypes.number,\n  refresh: PropTypes.func,\n  resource: PropTypes.string,\n  selectedIds: PropTypes.array,\n  setFilters: PropTypes.func,\n  setPage: PropTypes.func,\n  setPerPage: PropTypes.func,\n  setSort: PropTypes.func,\n  showFilter: PropTypes.func,\n  title: PropTypes.any,\n  total: PropTypes.number,\n  translate: PropTypes.func,\n  version: PropTypes.number\n};\nListView.defaultProps = {\n  actions: React.createElement(DefaultActions, null),\n  classes: {},\n  bulkActionButtons: React.createElement(DefaultBulkActionButtons, null),\n  pagination: React.createElement(DefaultPagination, null)\n};\n/**\n * List page component\n *\n * The <List> component renders the list layout (title, buttons, filters, pagination),\n * and fetches the list of records from the REST API.\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * In Redux terms, <List> is a connected component, and <Datagrid> is a dumb component.\n *\n * Props:\n *   - title\n *   - perPage\n *   - sort\n *   - filter (the permanent filter to apply to the query)\n *   - actions\n *   - filters (a React Element used to display the filter form)\n *   - pagination\n *\n * @example\n *     const PostFilter = (props) => (\n *         <Filter {...props}>\n *             <TextInput label=\"Search\" source=\"q\" alwaysOn />\n *             <TextInput label=\"Title\" source=\"title\" />\n *         </Filter>\n *     );\n *     export const PostList = (props) => (\n *         <List {...props}\n *             title=\"List of posts\"\n *             sort={{ field: 'published_at' }}\n *             filter={{ is_published: true }}\n *             filters={<PostFilter />}\n *         >\n *             <Datagrid>\n *                 <TextField source=\"id\" />\n *                 <TextField source=\"title\" />\n *                 <EditButton />\n *             </Datagrid>\n *         </List>\n *     );\n */\n\nexport var List = function List(props) {\n  return React.createElement(ListController, __assign({}, props), function (controllerProps) {\n    return React.createElement(ListView, __assign({}, props, controllerProps));\n  });\n};\nList.propTypes = {\n  // the props you can change\n  actions: PropTypes.element,\n  aside: PropTypes.node,\n  bulkActions: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  bulkActionButtons: PropTypes.oneOfType([PropTypes.element, PropTypes.bool]),\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  filterDefaultValues: PropTypes.object,\n  filters: PropTypes.element,\n  pagination: PropTypes.element,\n  perPage: PropTypes.number.isRequired,\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  title: PropTypes.any,\n  // the props managed by react-admin\n  authProvider: PropTypes.func,\n  hasCreate: PropTypes.bool.isRequired,\n  hasEdit: PropTypes.bool.isRequired,\n  hasList: PropTypes.bool.isRequired,\n  hasShow: PropTypes.bool.isRequired,\n  location: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired,\n  path: PropTypes.string,\n  resource: PropTypes.string.isRequired,\n  theme: PropTypes.object.isRequired\n};\nList.defaultProps = {\n  filter: {},\n  perPage: 10,\n  theme: defaultTheme\n};\nexport default withStyles(styles)(List);","map":null,"metadata":{},"sourceType":"module"}