{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Fragment, cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { ReferenceManyFieldController } from 'ra-core';\nexport var ReferenceManyFieldView = function ReferenceManyFieldView(_a) {\n  var children = _a.children,\n      className = _a.className,\n      currentSort = _a.currentSort,\n      data = _a.data,\n      ids = _a.ids,\n      loadedOnce = _a.loadedOnce,\n      page = _a.page,\n      pagination = _a.pagination,\n      perPage = _a.perPage,\n      reference = _a.reference,\n      referenceBasePath = _a.referenceBasePath,\n      setPage = _a.setPage,\n      setPerPage = _a.setPerPage,\n      setSort = _a.setSort,\n      total = _a.total;\n  return React.createElement(Fragment, null, cloneElement(Children.only(children), {\n    className: className,\n    resource: reference,\n    ids: ids,\n    loadedOnce: loadedOnce,\n    data: data,\n    basePath: referenceBasePath,\n    currentSort: currentSort,\n    setSort: setSort,\n    total: total\n  }), pagination && total !== undefined && cloneElement(pagination, {\n    page: page,\n    perPage: perPage,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    total: total\n  }));\n};\nReferenceManyFieldView.propTypes = {\n  children: PropTypes.element,\n  className: PropTypes.string,\n  currentSort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.object,\n  ids: PropTypes.array,\n  loadedOnce: PropTypes.bool,\n  pagination: PropTypes.element,\n  reference: PropTypes.string,\n  referenceBasePath: PropTypes.string,\n  setSort: PropTypes.func\n};\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\n\nexport var ReferenceManyField = function ReferenceManyField(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceManyField> only accepts a single child (like <Datagrid>)');\n  }\n\n  return React.createElement(ReferenceManyFieldController, __assign({}, props), function (controllerProps) {\n    return React.createElement(ReferenceManyFieldView, __assign({}, props, __assign({\n      children: children\n    }, controllerProps)));\n  });\n};\nReferenceManyField.propTypes = {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  label: PropTypes.string,\n  perPage: PropTypes.number,\n  record: PropTypes.object,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  source: PropTypes.string.isRequired,\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  target: PropTypes.string.isRequired\n};\nReferenceManyField.defaultProps = {\n  filter: {},\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  },\n  source: 'id',\n  addLabel: true\n};\nexport default ReferenceManyField;","map":null,"metadata":{},"sourceType":"module"}