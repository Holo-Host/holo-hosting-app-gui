{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Component, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport pure from 'recompose/pure';\nvar initialState = {\n  data: {},\n  ids: []\n};\n/**\n * Display a collection\n *\n * Ideal for embedded arrays of objects, e.g.\n * {\n *   id: 123\n *   tags: [\n *     { name: 'foo' },\n *     { name: 'bar' }\n *   ]\n * }\n *\n * The child must be an iterator component\n * (like <Datagrid> or <SingleFieldList>).\n *\n * @example Display all the backlinks of the current post as a <Datagrid>\n * // post = {\n * //   id: 123\n * //   backlinks: [\n * //       {\n * //           date: '2012-08-10T00:00:00.000Z',\n * //           url: 'http://example.com/foo/bar.html',\n * //       },\n * //       {\n * //           date: '2012-08-14T00:00:00.000Z',\n * //           url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n * //       }\n * //    ]\n * // }\n *     <ArrayField source=\"backlinks\">\n *         <Datagrid>\n *             <DateField source=\"date\" />\n *             <UrlField source=\"url\" />\n *         </Datagrid>\n *     </ArrayField>\n *\n * @example Display all the tags of the current post as <Chip> components\n * // post = {\n * //   id: 123\n * //   tags: [\n * //     { name: 'foo' },\n * //     { name: 'bar' }\n * //   ]\n * // }\n *     <ArrayField source=\"tags\">\n *         <SingleFieldList>\n *             <ChipField source=\"name\" />\n *         </SingleFieldList>\n *     </ArrayField>\n *\n * If you need to render a collection in a custom way, it's often simpler\n * to write your own component:\n *\n * @example\n *     const TagsField = ({ record }) => (\n *          <ul>\n *              {record.tags.map(item => (\n *                  <li key={item.name}>{item.name}</li>\n *              ))}\n *          </ul>\n *     )\n *     TagsField.defaultProps = { addLabel: true };\n */\n\nvar ArrayField =\n/** @class */\nfunction (_super) {\n  __extends(ArrayField, _super);\n\n  function ArrayField(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = props.record ? _this.getDataAndIds(props.record, props.source) : initialState;\n    return _this;\n  }\n\n  ArrayField.prototype.componentWillReceiveProps = function (nextProps, prevProps) {\n    if (nextProps.record !== prevProps.record) {\n      this.setState(this.getDataAndIds(nextProps.record, nextProps.source));\n    }\n  };\n\n  ArrayField.prototype.getDataAndIds = function (record, source) {\n    var list = get(record, source);\n    return list ? {\n      data: list.reduce(function (prev, item) {\n        prev[JSON.stringify(item)] = item;\n        return prev;\n      }, {}),\n      ids: list.map(JSON.stringify)\n    } : initialState;\n  };\n\n  ArrayField.prototype.render = function () {\n    var _a = this.props,\n        addLabel = _a.addLabel,\n        basePath = _a.basePath,\n        children = _a.children,\n        record = _a.record,\n        source = _a.source,\n        rest = __rest(_a, [\"addLabel\", \"basePath\", \"children\", \"record\", \"source\"]);\n\n    var _b = this.state,\n        ids = _b.ids,\n        data = _b.data;\n    return cloneElement(children, __assign({\n      ids: ids,\n      data: data,\n      isLoading: false,\n      basePath: basePath,\n      currentSort: {}\n    }, rest));\n  };\n\n  return ArrayField;\n}(Component);\n\nexport { ArrayField };\nArrayField.propTypes = {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  record: PropTypes.object,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  source: PropTypes.string\n};\nvar EnhancedArrayField = pure(ArrayField);\nEnhancedArrayField.defaultProps = {\n  addLabel: true\n};\nexport default EnhancedArrayField;","map":null,"metadata":{},"sourceType":"module"}