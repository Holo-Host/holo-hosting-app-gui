{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ShowButton } from '../button';\nimport CardActions from '../layout/CardActions';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var basePath = _a.basePath,\n      className = _a.className,\n      record = _a.record,\n      hasShow = _a.hasShow,\n      hasList = _a.hasList,\n      rest = __rest(_a, [\"basePath\", \"className\", \"record\", \"hasShow\", \"hasList\"]);\n\n  return rest;\n};\n/**\n * Action Toolbar for the Edit view\n *\n * Internal component. If you want to add or remove actions for a Edit view,\n * write your own EditActions Component. Then, in the <Edit> component,\n * use it in the `actions` prop to pas a custom element.\n *\n * @example\n *     import Button from '@material-ui/core/Button';\n *     import { CardActions, ShowButton, Edit } from 'react-admin';\n *\n *     const PostEditActions = ({ basePath, record, rseource }) => (\n *         <CardActions>\n *             <ShowButton basePath={basePath} record={record} />\n *             // Add your custom actions here //\n *             <Button color=\"primary\" onClick={customAction}>Custom Action</Button>\n *         </CardActions>\n *     );\n *\n *     export const PostEdit = (props) => (\n *         <Edit actions={<PostEditActions />} {...props}>\n *             ...\n *         </Edit>\n *     );\n */\n\n\nvar EditActions = function EditActions(_a) {\n  var basePath = _a.basePath,\n      className = _a.className,\n      data = _a.data,\n      hasShow = _a.hasShow,\n      resource = _a.resource,\n      rest = __rest(_a, [\"basePath\", \"className\", \"data\", \"hasShow\", \"resource\"]);\n\n  return React.createElement(CardActions, __assign({\n    className: className\n  }, sanitizeRestProps(rest)), hasShow && React.createElement(ShowButton, {\n    basePath: basePath,\n    record: data\n  }));\n};\n\nEditActions.propTypes = {\n  basePath: PropTypes.string,\n  className: PropTypes.string,\n  data: PropTypes.object,\n  hasShow: PropTypes.bool,\n  resource: PropTypes.string\n};\nexport default EditActions;","map":null,"metadata":{},"sourceType":"module"}