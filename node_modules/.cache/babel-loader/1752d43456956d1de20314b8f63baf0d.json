{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getFormValues, FormName } from 'redux-form';\nimport get from 'lodash/get';\nimport warning from '../util/warning';\n/**\n * Get the current (edited) value of the record from the form and pass it\n * to child function\n *\n * @example\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <BooleanInput source=\"hasEmail\" />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) => formData.hasEmail &&\n *                      <TextInput source=\"email\" {...rest} />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n *\n * const OrderEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <SelectInput source=\"country\" choices={countries} />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) =>\n *                      <SelectInput\n *                          source=\"city\"\n *                          choices={getCitiesFor(formData.country)}\n *                          {...rest}\n *                      />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n */\n\nexport var FormDataConsumerView = function FormDataConsumerView(_a) {\n  var children = _a.children,\n      form = _a.form,\n      formData = _a.formData,\n      source = _a.source,\n      index = _a.index,\n      rest = __rest(_a, [\"children\", \"form\", \"formData\", \"source\", \"index\"]);\n\n  var scopedFormData = formData;\n  var getSource;\n  var getSourceHasBeenCalled = false;\n  var ret; // If we have an index, we are in an iterator like component (such as the SimpleFormIterator)\n\n  if (typeof index !== 'undefined') {\n    scopedFormData = get(formData, source);\n\n    getSource = function getSource(scopedSource) {\n      getSourceHasBeenCalled = true;\n      return source + \".\" + scopedSource;\n    };\n\n    ret = children(__assign({\n      formData: formData,\n      scopedFormData: scopedFormData,\n      getSource: getSource\n    }, rest));\n  } else {\n    ret = children(__assign({\n      formData: formData\n    }, rest));\n  }\n\n  warning(typeof index !== 'undefined' && ret && !getSourceHasBeenCalled, \"You're using a FormDataConsumer inside an ArrayInput and you did not called the getSource function supplied by the FormDataConsumer component. This is required for your inputs to get the proper source.\\n\\n<ArrayInput source=\\\"users\\\">\\n    <SimpleFormIterator>\\n        <TextInput source=\\\"name\\\" />\\n\\n        <FormDataConsumer>\\n            {({\\n                formData, // The whole form data\\n                scopedFormData, // The data for this item of the ArrayInput\\n                getSource, // A function to get the valid source inside an ArrayInput\\n                ...rest,\\n            }) =>\\n                scopedFormData.name ? (\\n                    <SelectInput\\n                        source={getSource('role')} // Will translate to \\\"users[0].role\\\"\\n                        choices={['admin', 'user']}\\n                        {...rest}\\n                    />\\n                ) : null\\n            }\\n        </FormDataConsumer>\\n    </SimpleFormIterator>\\n</ArrayInput>\");\n  return ret === undefined ? null : ret;\n};\n\nvar mapStateToProps = function mapStateToProps(state, _a) {\n  var form = _a.form,\n      record = _a.record;\n  return {\n    formData: getFormValues(form)(state) || record\n  };\n};\n\nvar ConnectedFormDataConsumerView = connect(mapStateToProps)(FormDataConsumerView);\n\nvar FormDataConsumer = function FormDataConsumer(props) {\n  return React.createElement(FormName, null, function (_a) {\n    var form = _a.form;\n    return React.createElement(ConnectedFormDataConsumerView, __assign({\n      form: form\n    }, props));\n  });\n};\n\nexport default FormDataConsumer;","map":null,"metadata":{},"sourceType":"module"}