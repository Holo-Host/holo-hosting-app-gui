{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport GetApp from '@material-ui/icons/GetApp';\nimport { crudGetAll, downloadCSV, CRUD_GET_MANY, GET_MANY } from 'ra-core';\nimport { unparse as convertToCSV } from 'papaparse/papaparse.min';\nimport Button from './Button';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var basePath = _a.basePath,\n      crudGetAll = _a.crudGetAll,\n      dispatch = _a.dispatch,\n      exporter = _a.exporter,\n      filter = _a.filter,\n      maxResults = _a.maxResults,\n      resource = _a.resource,\n      sort = _a.sort,\n      rest = __rest(_a, [\"basePath\", \"crudGetAll\", \"dispatch\", \"exporter\", \"filter\", \"maxResults\", \"resource\", \"sort\"]);\n\n  return rest;\n};\n/**\n * Extracts, aggregates and deduplicates the ids of related records\n *\n * @example\n *     const books = [\n *         { id: 1, author_id: 123, title: 'Pride and Prejudice' },\n *         { id: 2, author_id: 123, title: 'Sense and Sensibility' },\n *         { id: 3, author_id: 456, title: 'War and Peace' },\n *     ];\n *     getRelatedIds(books, 'author_id'); => [123, 456]\n *\n * @example\n *     const books = [\n *         { id: 1, tag_ids: [1, 2], title: 'Pride and Prejudice' },\n *         { id: 2, tag_ids: [2, 3], title: 'Sense and Sensibility' },\n *         { id: 3, tag_ids: [4], title: 'War and Peace' },\n *     ];\n *     getRelatedIds(records, 'tag_ids'); => [1, 2, 3, 4]\n *\n * @param {Object[]} records An array of records\n * @param {string} field the identifier of the record field to use\n */\n\n\nexport var getRelatedIds = function getRelatedIds(records, field) {\n  return Array.from(new Set(records.filter(function (record) {\n    return record[field] != null;\n  }).map(function (record) {\n    return record[field];\n  }).reduce(function (ids, value) {\n    return ids.concat(value);\n  }, [])));\n};\n/**\n * Helper function for calling the data provider with GET_MANY\n * via redux and saga, and getting a Promise in return\n *\n * @example\n *     fetchRelatedRecords(records, 'post_id', 'posts').then(posts =>\n *          posts.map(record => ({\n *              ...record,\n *              post_title: posts[record.post_id].title,\n *          }));\n */\n\nvar fetchRelatedRecords = function fetchRelatedRecords(dispatch) {\n  return function (data, field, resource) {\n    return new Promise(function (resolve, reject) {\n      dispatch({\n        type: CRUD_GET_MANY,\n        payload: {\n          ids: getRelatedIds(data, field)\n        },\n        meta: {\n          resource: resource,\n          fetch: GET_MANY,\n          onSuccess: {\n            callback: function callback(_a) {\n              var data = _a.payload.data;\n              resolve(data.reduce(function (acc, post) {\n                acc[post.id] = post;\n                return acc;\n              }, {}));\n            }\n          },\n          onFailure: {\n            notification: {\n              body: 'ra.notification.http_error',\n              level: 'warning'\n            },\n            callback: function callback(_a) {\n              var error = _a.error;\n              return reject(error);\n            }\n          }\n        }\n      });\n    });\n  };\n};\n\nvar ExportButton =\n/** @class */\nfunction (_super) {\n  __extends(ExportButton, _super);\n\n  function ExportButton() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleClick = function () {\n      var _a = _this.props,\n          dispatch = _a.dispatch,\n          exporter = _a.exporter,\n          filter = _a.filter,\n          maxResults = _a.maxResults,\n          sort = _a.sort,\n          resource = _a.resource,\n          onClick = _a.onClick;\n      dispatch(crudGetAll(resource, sort, filter, maxResults, function (_a) {\n        var data = _a.payload.data;\n        return exporter ? exporter(data, fetchRelatedRecords(dispatch), dispatch) : downloadCSV(convertToCSV(data), resource);\n      }));\n\n      if (typeof onClick === 'function') {\n        onClick();\n      }\n    };\n\n    return _this;\n  }\n\n  ExportButton.prototype.render = function () {\n    var _a = this.props,\n        label = _a.label,\n        icon = _a.icon,\n        rest = __rest(_a, [\"label\", \"icon\"]);\n\n    return React.createElement(Button, __assign({\n      onClick: this.handleClick,\n      label: label\n    }, sanitizeRestProps(rest)), icon);\n  };\n\n  ExportButton.propTypes = {\n    basePath: PropTypes.string,\n    dispatch: PropTypes.func,\n    exporter: PropTypes.func,\n    filter: PropTypes.object,\n    label: PropTypes.string,\n    maxResults: PropTypes.number.isRequired,\n    resource: PropTypes.string.isRequired,\n    sort: PropTypes.object,\n    icon: PropTypes.element\n  };\n  ExportButton.defaultProps = {\n    label: 'ra.action.export',\n    maxResults: 1000,\n    icon: React.createElement(GetApp, null)\n  };\n  return ExportButton;\n}(Component);\n\nexport default connect()(ExportButton); // inject redux dispatch","map":null,"metadata":{},"sourceType":"module"}