{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport MuiTab from '@material-ui/core/Tab';\nimport classnames from 'classnames';\nimport { translate } from 'ra-core';\nimport FormInput from './FormInput';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var label = _a.label,\n      icon = _a.icon,\n      value = _a.value,\n      translate = _a.translate,\n      rest = __rest(_a, [\"label\", \"icon\", \"value\", \"translate\"]);\n\n  return rest;\n};\n\nvar hiddenStyle = {\n  display: 'none'\n};\n\nvar FormTab =\n/** @class */\nfunction (_super) {\n  __extends(FormTab, _super);\n\n  function FormTab() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.renderHeader = function (_a) {\n      var className = _a.className,\n          label = _a.label,\n          icon = _a.icon,\n          value = _a.value,\n          translate = _a.translate,\n          rest = __rest(_a, [\"className\", \"label\", \"icon\", \"value\", \"translate\"]);\n\n      var to = {\n        pathname: value,\n        state: {\n          skipFormReset: true\n        }\n      };\n      return React.createElement(MuiTab, __assign({\n        key: label,\n        label: translate(label, {\n          _: label\n        }),\n        value: value,\n        icon: icon,\n        className: classnames('form-tab', className),\n        component: Link,\n        to: to\n      }, sanitizeRestProps(rest)));\n    };\n\n    _this.renderContent = function (_a) {\n      var children = _a.children,\n          hidden = _a.hidden,\n          basePath = _a.basePath,\n          record = _a.record,\n          resource = _a.resource;\n      return React.createElement(\"span\", {\n        style: hidden ? hiddenStyle : null\n      }, React.Children.map(children, function (input) {\n        return input && React.createElement(FormInput, {\n          basePath: basePath,\n          input: input,\n          record: record,\n          resource: resource\n        });\n      }));\n    };\n\n    return _this;\n  }\n\n  FormTab.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        context = _a.context,\n        rest = __rest(_a, [\"children\", \"context\"]);\n\n    return context === 'header' ? this.renderHeader(rest) : this.renderContent(__assign({\n      children: children\n    }, rest));\n  };\n\n  return FormTab;\n}(Component);\n\nFormTab.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  context: PropTypes.oneOf(['header', 'content']),\n  hidden: PropTypes.bool,\n  icon: PropTypes.element,\n  label: PropTypes.string.isRequired,\n  path: PropTypes.string,\n  translate: PropTypes.func.isRequired,\n  value: PropTypes.string\n};\nFormTab.displayName = 'FormTab';\nexport default translate(FormTab);","map":null,"metadata":{},"sourceType":"module"}