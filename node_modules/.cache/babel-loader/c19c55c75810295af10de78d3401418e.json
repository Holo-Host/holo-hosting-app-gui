{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink, InMemoryCache } from 'apollo-client-preset';\nexport default (function (options) {\n  if (!options) {\n    return new ApolloClient();\n  }\n\n  var cache = options.cache,\n      link = options.link,\n      uri = options.uri,\n      otherOptions = __rest(options, [\"cache\", \"link\", \"uri\"]);\n\n  var finalLink = link;\n  var finalCache = cache;\n\n  if (!link && uri) {\n    finalLink = new HttpLink({\n      uri: uri\n    });\n  }\n\n  if (!cache) {\n    finalCache = new InMemoryCache().restore({});\n  }\n\n  return new ApolloClient(__assign({\n    link: finalLink,\n    cache: finalCache\n  }, otherOptions));\n});","map":null,"metadata":{},"sourceType":"module"}