{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport { ReferenceFieldController } from 'ra-core';\nimport LinearProgress from '../layout/LinearProgress';\nimport Link from '../Link';\nimport sanitizeRestProps from './sanitizeRestProps';\n\nvar styles = function styles(theme) {\n  return createStyles({\n    link: {\n      color: theme.palette.primary.main\n    }\n  });\n}; // useful to prevent click bubbling in a datagrid with rowClick\n\n\nvar stopPropagation = function stopPropagation(e) {\n  return e.stopPropagation();\n};\n\nexport var ReferenceFieldView = function ReferenceFieldView(_a) {\n  var allowEmpty = _a.allowEmpty,\n      basePath = _a.basePath,\n      children = _a.children,\n      className = _a.className,\n      _b = _a.classes,\n      classes = _b === void 0 ? {} : _b,\n      isLoading = _a.isLoading,\n      record = _a.record,\n      reference = _a.reference,\n      referenceRecord = _a.referenceRecord,\n      resource = _a.resource,\n      resourceLinkPath = _a.resourceLinkPath,\n      source = _a.source,\n      _c = _a.translateChoice,\n      translateChoice = _c === void 0 ? false : _c,\n      rest = __rest(_a, [\"allowEmpty\", \"basePath\", \"children\", \"className\", \"classes\", \"isLoading\", \"record\", \"reference\", \"referenceRecord\", \"resource\", \"resourceLinkPath\", \"source\", \"translateChoice\"]);\n\n  if (isLoading) {\n    return React.createElement(LinearProgress, null);\n  }\n\n  if (resourceLinkPath) {\n    return React.createElement(Link, {\n      to: resourceLinkPath,\n      className: className,\n      onClick: stopPropagation\n    }, React.cloneElement(Children.only(children), __assign({\n      className: classnames(children.props.className, classes.link // force color override for Typography components\n      ),\n      record: referenceRecord,\n      resource: reference,\n      allowEmpty: allowEmpty,\n      basePath: basePath,\n      translateChoice: translateChoice\n    }, sanitizeRestProps(rest))));\n  }\n\n  return React.cloneElement(Children.only(children), __assign({\n    record: referenceRecord,\n    resource: reference,\n    allowEmpty: allowEmpty,\n    basePath: basePath,\n    translateChoice: translateChoice\n  }, sanitizeRestProps(rest)));\n};\nReferenceFieldView.propTypes = {\n  allowEmpty: PropTypes.bool,\n  basePath: PropTypes.string,\n  children: PropTypes.element,\n  className: PropTypes.string,\n  classes: PropTypes.object,\n  isLoading: PropTypes.bool,\n  record: PropTypes.object,\n  reference: PropTypes.string,\n  referenceRecord: PropTypes.object,\n  resource: PropTypes.string,\n  resourceLinkPath: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  source: PropTypes.string,\n  translateChoice: PropTypes.bool\n};\n/**\n * Fetch reference record, and delegate rendering to child component.\n *\n * The reference prop sould be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * By default, includes a link to the <Edit> page of the related record\n * (`/users/:userId` in the previous example).\n *\n * Set the linkType prop to \"show\" to link to the <Show> page instead.\n *\n * @example\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" linkType=\"show\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * You can also prevent `<ReferenceField>` from adding link to children by setting\n * `linkType` to false.\n *\n * @example\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" linkType={false}>\n *     <TextField source=\"name\" />\n * </ReferenceField>\n */\n\nvar ReferenceField = function ReferenceField(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceField> only accepts a single child');\n  }\n\n  return React.createElement(ReferenceFieldController, __assign({}, props), function (controllerProps) {\n    return React.createElement(ReferenceFieldView, __assign({}, props, __assign({\n      children: children\n    }, controllerProps)));\n  });\n};\n\nReferenceField.propTypes = {\n  addLabel: PropTypes.bool,\n  allowEmpty: PropTypes.bool.isRequired,\n  basePath: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  cellClassName: PropTypes.string,\n  headerClassName: PropTypes.string,\n  label: PropTypes.string,\n  record: PropTypes.object,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  source: PropTypes.string.isRequired,\n  translateChoice: PropTypes.func,\n  linkType: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired\n};\nReferenceField.defaultProps = {\n  allowEmpty: false,\n  classes: {},\n  linkType: 'edit',\n  record: {}\n};\nvar EnhancedReferenceField = withStyles(styles)(ReferenceField);\nEnhancedReferenceField.defaultProps = {\n  addLabel: true\n};\nexport default EnhancedReferenceField;","map":null,"metadata":{},"sourceType":"module"}