{"ast":null,"code":"import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { reducer as formReducer } from 'redux-form';\nimport TranslationProvider from '../i18n/TranslationProvider';\nimport merge from 'lodash/merge';\nimport { createMemoryHistory } from 'history';\nimport createAdminStore from '../createAdminStore';\nexport var defaultStore = {\n  admin: {\n    resources: {},\n    references: {\n      possibleValues: {}\n    },\n    ui: {\n      viewVersion: 1\n    }\n  },\n  form: formReducer({}, {\n    type: '@@FOO'\n  }),\n  i18n: {\n    locale: 'en',\n    messages: {}\n  }\n};\n/**\n * Simulate a react-admin context in unit tests\n *\n * Pass custom store values as store prop\n *\n * @example\n * // in an enzyme test\n * const wrapper = render(\n *     <TestContext store={{ admin: { resources: { post: { data: { 1: {id: 1, title: 'foo' } } } } } }}>\n *         <Show {...defaultShowProps} />\n *     </TestContext>\n * );\n *\n * @example\n * // in an enzyme test, using jest.\n * const wrapper = render(\n *     <TestContext store={{ admin: { resources: { post: { data: { 1: {id: 1, title: 'foo' } } } } } }}>\n *         {({ store }) => {\n *              dispatchSpy = jest.spyOn(store, 'dispatch');\n *              return <Show {...defaultShowProps} />\n *         }}\n *     </TestContext>\n * );\n */\n\nvar TestContext = function TestContext(_a) {\n  var _b = _a.store,\n      store = _b === void 0 ? {} : _b,\n      _c = _a.enableReducers,\n      enableReducers = _c === void 0 ? false : _c,\n      children = _a.children;\n  var storeWithDefault = enableReducers ? createAdminStore({\n    initialState: merge(defaultStore, store),\n    dataProvider: function dataProvider() {\n      return Promise.resolve({});\n    },\n    history: createMemoryHistory()\n  }) : createStore(function () {\n    return merge(defaultStore, store);\n  });\n\n  var renderChildren = function renderChildren() {\n    return typeof children === 'function' ? children({\n      store: storeWithDefault\n    }) : children;\n  };\n\n  return React.createElement(Provider, {\n    store: storeWithDefault\n  }, React.createElement(TranslationProvider, null, renderChildren()));\n};\n\nexport default TestContext;","map":null,"metadata":{},"sourceType":"module"}