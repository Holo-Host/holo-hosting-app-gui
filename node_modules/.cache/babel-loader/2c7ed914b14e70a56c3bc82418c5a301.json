{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport Divider from '@material-ui/core/Divider';\nimport { withRouter, Route } from 'react-router-dom';\nimport compose from 'recompose/compose';\nimport { translate } from 'ra-core';\nimport CardContentInner from '../layout/CardContentInner';\nimport TabbedShowLayoutTabs from './TabbedShowLayoutTabs';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var children = _a.children,\n      className = _a.className,\n      record = _a.record,\n      resource = _a.resource,\n      basePath = _a.basePath,\n      version = _a.version,\n      initialValues = _a.initialValues,\n      staticContext = _a.staticContext,\n      translate = _a.translate,\n      tabs = _a.tabs,\n      rest = __rest(_a, [\"children\", \"className\", \"record\", \"resource\", \"basePath\", \"version\", \"initialValues\", \"staticContext\", \"translate\", \"tabs\"]);\n\n  return rest;\n};\n\nvar getTabFullPath = function getTabFullPath(tab, index, baseUrl) {\n  return \"\" + baseUrl + (tab.props.path ? \"/\" + tab.props.path : index > 0 ? \"/\" + index : '');\n};\n/**\n * Tabbed Layout for a Show view, showing fields grouped in tabs.\n *\n * Receives the current `record` from the parent `<Show>` component,\n * and passes it to its childen. Children should be Tab components.\n * The component passed as `tabs` props replaces the default material-ui's <Tabs> component.\n *\n * @example\n *     // in src/posts.js\n *     import React from 'react';\n *     import { Show, TabbedShowLayout, Tab, TextField } from 'react-admin';\n *\n *     export const PostShow = (props) => (\n *         <Show {...props}>\n *             <TabbedShowLayout>\n *                 <Tab label=\"Content\">\n *                     <TextField source=\"title\" />\n *                     <TextField source=\"subtitle\" />\n *                </Tab>\n *                 <Tab label=\"Metadata\">\n *                     <TextField source=\"category\" />\n *                </Tab>\n *             </TabbedShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import React from 'react';\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\n\n\nvar TabbedShowLayout =\n/** @class */\nfunction (_super) {\n  __extends(TabbedShowLayout, _super);\n\n  function TabbedShowLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TabbedShowLayout.prototype.render = function () {\n    var _a = this.props,\n        basePath = _a.basePath,\n        children = _a.children,\n        className = _a.className,\n        location = _a.location,\n        match = _a.match,\n        record = _a.record,\n        resource = _a.resource,\n        translate = _a.translate,\n        version = _a.version,\n        value = _a.value,\n        tabs = _a.tabs,\n        rest = __rest(_a, [\"basePath\", \"children\", \"className\", \"location\", \"match\", \"record\", \"resource\", \"translate\", \"version\", \"value\", \"tabs\"]);\n\n    return React.createElement(\"div\", __assign({\n      className: className,\n      key: version\n    }, sanitizeRestProps(rest)), cloneElement(tabs, {\n      // The location pathname will contain the page path including the current tab path\n      // so we can use it as a way to determine the current tab\n      value: location.pathname,\n      match: match\n    }, children), React.createElement(Divider, null), React.createElement(CardContentInner, null, Children.map(children, function (tab, index) {\n      return tab && React.createElement(Route, {\n        exact: true,\n        path: getTabFullPath(tab, index, match.url),\n        render: function render() {\n          return cloneElement(tab, {\n            context: 'content',\n            resource: resource,\n            record: record,\n            basePath: basePath\n          });\n        }\n      });\n    })));\n  };\n\n  return TabbedShowLayout;\n}(Component);\n\nexport { TabbedShowLayout };\nTabbedShowLayout.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  location: PropTypes.object,\n  match: PropTypes.object,\n  record: PropTypes.object,\n  resource: PropTypes.string,\n  basePath: PropTypes.string,\n  value: PropTypes.number,\n  version: PropTypes.number,\n  translate: PropTypes.func,\n  tabs: PropTypes.element.isRequired\n};\nTabbedShowLayout.defaultProps = {\n  tabs: React.createElement(TabbedShowLayoutTabs, null)\n};\nvar enhance = compose(withRouter, translate);\nexport default enhance(TabbedShowLayout);","map":null,"metadata":{},"sourceType":"module"}