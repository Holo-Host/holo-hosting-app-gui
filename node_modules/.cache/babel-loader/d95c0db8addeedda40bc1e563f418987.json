{"ast":null,"code":"/*@license\n\tPapa Parse\n\tv4.5.0\n\thttps://github.com/mholt/PapaParse\n\tLicense: MIT\n*/\n!function (e, t) {\n  \"function\" == typeof define && define.amd ? define([], t) : \"object\" == typeof module && \"undefined\" != typeof exports ? module.exports = t() : e.Papa = t();\n}(this, function () {\n  \"use strict\";\n\n  var s,\n      e,\n      f = \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : void 0 !== f ? f : {},\n      r = !f.document && !!f.postMessage,\n      o = r && /(\\?|&)papaworker(=|&|$)/.test(f.location.search),\n      a = !1,\n      h = {},\n      u = 0,\n      v = {\n    parse: function parse(e, t) {\n      var i = (t = t || {}).dynamicTyping || !1;\n      M(i) && (t.dynamicTypingFunction = i, i = {});\n\n      if (t.dynamicTyping = i, t.transform = !!M(t.transform) && t.transform, t.worker && v.WORKERS_SUPPORTED) {\n        var n = function () {\n          if (!v.WORKERS_SUPPORTED) return !1;\n          if (!a && null === v.SCRIPT_PATH) throw new Error(\"Script path cannot be determined automatically when Papa Parse is loaded asynchronously. You need to set Papa.SCRIPT_PATH manually.\");\n          var e = v.SCRIPT_PATH || s;\n          e += (-1 !== e.indexOf(\"?\") ? \"&\" : \"?\") + \"papaworker\";\n          var t = new f.Worker(e);\n          return t.onmessage = y, t.id = u++, h[t.id] = t;\n        }();\n\n        return n.userStep = t.step, n.userChunk = t.chunk, n.userComplete = t.complete, n.userError = t.error, t.step = M(t.step), t.chunk = M(t.chunk), t.complete = M(t.complete), t.error = M(t.error), delete t.worker, void n.postMessage({\n          input: e,\n          config: t,\n          workerId: n.id\n        });\n      }\n\n      var r = null;\n      {\n        if (e === v.NODE_STREAM_INPUT) return (r = new g(t)).getStream();\n        \"string\" == typeof e ? r = t.download ? new l(t) : new _(t) : !0 === e.readable && M(e.read) && M(e.on) ? r = new m(t) : (f.File && e instanceof File || e instanceof Object) && (r = new p(t));\n      }\n      return r.stream(e);\n    },\n    unparse: function unparse(e, t) {\n      var n = !1,\n          f = !0,\n          d = \",\",\n          c = \"\\r\\n\",\n          r = '\"';\n      !function () {\n        if (\"object\" != typeof t) return;\n        \"string\" == typeof t.delimiter && 1 === t.delimiter.length && -1 === v.BAD_DELIMITERS.indexOf(t.delimiter) && (d = t.delimiter);\n        (\"boolean\" == typeof t.quotes || t.quotes instanceof Array) && (n = t.quotes);\n        \"string\" == typeof t.newline && (c = t.newline);\n        \"string\" == typeof t.quoteChar && (r = t.quoteChar);\n        \"boolean\" == typeof t.header && (f = t.header);\n      }();\n      var s = new RegExp(r, \"g\");\n      \"string\" == typeof e && (e = JSON.parse(e));\n\n      if (e instanceof Array) {\n        if (!e.length || e[0] instanceof Array) return a(null, e);\n        if (\"object\" == typeof e[0]) return a(i(e[0]), e);\n      } else if (\"object\" == typeof e) return \"string\" == typeof e.data && (e.data = JSON.parse(e.data)), e.data instanceof Array && (e.fields || (e.fields = e.meta && e.meta.fields), e.fields || (e.fields = e.data[0] instanceof Array ? e.fields : i(e.data[0])), e.data[0] instanceof Array || \"object\" == typeof e.data[0] || (e.data = [e.data])), a(e.fields || [], e.data || []);\n\n      throw \"exception: Unable to serialize unrecognized input\";\n\n      function i(e) {\n        if (\"object\" != typeof e) return [];\n        var t = [];\n\n        for (var i in e) {\n          t.push(i);\n        }\n\n        return t;\n      }\n\n      function a(e, t) {\n        var i = \"\";\n        \"string\" == typeof e && (e = JSON.parse(e)), \"string\" == typeof t && (t = JSON.parse(t));\n        var n = e instanceof Array && 0 < e.length,\n            r = !(t[0] instanceof Array);\n\n        if (n && f) {\n          for (var s = 0; s < e.length; s++) {\n            0 < s && (i += d), i += l(e[s], s);\n          }\n\n          0 < t.length && (i += c);\n        }\n\n        for (var a = 0; a < t.length; a++) {\n          for (var o = n ? e.length : t[a].length, h = 0; h < o; h++) {\n            0 < h && (i += d);\n            var u = n && r ? e[h] : h;\n            i += l(t[a][u], h);\n          }\n\n          a < t.length - 1 && (i += c);\n        }\n\n        return i;\n      }\n\n      function l(e, t) {\n        if (null == e) return \"\";\n        if (e.constructor === Date) return JSON.stringify(e).slice(1, 25);\n        e = e.toString().replace(s, r + r);\n\n        var i = \"boolean\" == typeof n && n || n instanceof Array && n[t] || function (e, t) {\n          for (var i = 0; i < t.length; i++) {\n            if (-1 < e.indexOf(t[i])) return !0;\n          }\n\n          return !1;\n        }(e, v.BAD_DELIMITERS) || -1 < e.indexOf(d) || \" \" === e.charAt(0) || \" \" === e.charAt(e.length - 1);\n\n        return i ? r + e + r : e;\n      }\n    }\n  };\n\n  if (v.RECORD_SEP = String.fromCharCode(30), v.UNIT_SEP = String.fromCharCode(31), v.BYTE_ORDER_MARK = \"\\uFEFF\", v.BAD_DELIMITERS = [\"\\r\", \"\\n\", '\"', v.BYTE_ORDER_MARK], v.WORKERS_SUPPORTED = !r && !!f.Worker, v.SCRIPT_PATH = null, v.NODE_STREAM_INPUT = 1, v.LocalChunkSize = 10485760, v.RemoteChunkSize = 5242880, v.DefaultDelimiter = \",\", v.Parser = k, v.ParserHandle = i, v.NetworkStreamer = l, v.FileStreamer = p, v.StringStreamer = _, v.ReadableStreamStreamer = m, v.DuplexStreamStreamer = g, f.jQuery) {\n    var d = f.jQuery;\n\n    d.fn.parse = function (o) {\n      var i = o.config || {},\n          h = [];\n      return this.each(function (e) {\n        if (!(\"INPUT\" === d(this).prop(\"tagName\").toUpperCase() && \"file\" === d(this).attr(\"type\").toLowerCase() && f.FileReader) || !this.files || 0 === this.files.length) return !0;\n\n        for (var t = 0; t < this.files.length; t++) {\n          h.push({\n            file: this.files[t],\n            inputElem: this,\n            instanceConfig: d.extend({}, i)\n          });\n        }\n      }), e(), this;\n\n      function e() {\n        if (0 !== h.length) {\n          var e,\n              t,\n              i,\n              n,\n              r = h[0];\n\n          if (M(o.before)) {\n            var s = o.before(r.file, r.inputElem);\n\n            if (\"object\" == typeof s) {\n              if (\"abort\" === s.action) return e = \"AbortError\", t = r.file, i = r.inputElem, n = s.reason, void (M(o.error) && o.error({\n                name: e\n              }, t, i, n));\n              if (\"skip\" === s.action) return void u();\n              \"object\" == typeof s.config && (r.instanceConfig = d.extend(r.instanceConfig, s.config));\n            } else if (\"skip\" === s) return void u();\n          }\n\n          var a = r.instanceConfig.complete;\n          r.instanceConfig.complete = function (e) {\n            M(a) && a(e, r.file, r.inputElem), u();\n          }, v.parse(r.file, r.instanceConfig);\n        } else M(o.complete) && o.complete();\n      }\n\n      function u() {\n        h.splice(0, 1), e();\n      }\n    };\n  }\n\n  function c(e) {\n    this._handle = null, this._finished = !1, this._completed = !1, this._input = null, this._baseIndex = 0, this._partialLine = \"\", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = !0, this._completeResults = {\n      data: [],\n      errors: [],\n      meta: {}\n    }, function (e) {\n      var t = w(e);\n      t.chunkSize = parseInt(t.chunkSize), e.step || e.chunk || (t.chunkSize = null);\n      this._handle = new i(t), (this._handle.streamer = this)._config = t;\n    }.call(this, e), this.parseChunk = function (e, t) {\n      if (this.isFirstChunk && M(this._config.beforeFirstChunk)) {\n        var i = this._config.beforeFirstChunk(e);\n\n        void 0 !== i && (e = i);\n      }\n\n      this.isFirstChunk = !1;\n      var n = this._partialLine + e;\n      this._partialLine = \"\";\n\n      var r = this._handle.parse(n, this._baseIndex, !this._finished);\n\n      if (!this._handle.paused() && !this._handle.aborted()) {\n        var s = r.meta.cursor;\n        this._finished || (this._partialLine = n.substring(s - this._baseIndex), this._baseIndex = s), r && r.data && (this._rowCount += r.data.length);\n        var a = this._finished || this._config.preview && this._rowCount >= this._config.preview;\n        if (o) f.postMessage({\n          results: r,\n          workerId: v.WORKER_ID,\n          finished: a\n        });else if (M(this._config.chunk) && !t) {\n          if (this._config.chunk(r, this._handle), this._handle.paused() || this._handle.aborted()) return;\n          r = void 0, this._completeResults = void 0;\n        }\n        return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(r.data), this._completeResults.errors = this._completeResults.errors.concat(r.errors), this._completeResults.meta = r.meta), this._completed || !a || !M(this._config.complete) || r && r.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = !0), a || r && r.meta.paused || this._nextChunk(), r;\n      }\n    }, this._sendError = function (e) {\n      M(this._config.error) ? this._config.error(e) : o && this._config.error && f.postMessage({\n        workerId: v.WORKER_ID,\n        error: e,\n        finished: !1\n      });\n    };\n  }\n\n  function l(e) {\n    var n;\n    (e = e || {}).chunkSize || (e.chunkSize = v.RemoteChunkSize), c.call(this, e), this._nextChunk = r ? function () {\n      this._readChunk(), this._chunkLoaded();\n    } : function () {\n      this._readChunk();\n    }, this.stream = function (e) {\n      this._input = e, this._nextChunk();\n    }, this._readChunk = function () {\n      if (this._finished) this._chunkLoaded();else {\n        if (n = new XMLHttpRequest(), this._config.withCredentials && (n.withCredentials = this._config.withCredentials), r || (n.onload = E(this._chunkLoaded, this), n.onerror = E(this._chunkError, this)), n.open(\"GET\", this._input, !r), this._config.downloadRequestHeaders) {\n          var e = this._config.downloadRequestHeaders;\n\n          for (var t in e) {\n            n.setRequestHeader(t, e[t]);\n          }\n        }\n\n        if (this._config.chunkSize) {\n          var i = this._start + this._config.chunkSize - 1;\n          n.setRequestHeader(\"Range\", \"bytes=\" + this._start + \"-\" + i), n.setRequestHeader(\"If-None-Match\", \"webkit-no-cache\");\n        }\n\n        try {\n          n.send();\n        } catch (e) {\n          this._chunkError(e.message);\n        }\n\n        r && 0 === n.status ? this._chunkError() : this._start += this._config.chunkSize;\n      }\n    }, this._chunkLoaded = function () {\n      4 === n.readyState && (n.status < 200 || 400 <= n.status ? this._chunkError() : (this._finished = !this._config.chunkSize || this._start > function (e) {\n        var t = e.getResponseHeader(\"Content-Range\");\n        if (null === t) return -1;\n        return parseInt(t.substr(t.lastIndexOf(\"/\") + 1));\n      }(n), this.parseChunk(n.responseText)));\n    }, this._chunkError = function (e) {\n      var t = n.statusText || e;\n\n      this._sendError(new Error(t));\n    };\n  }\n\n  function p(e) {\n    var n, r;\n    (e = e || {}).chunkSize || (e.chunkSize = v.LocalChunkSize), c.call(this, e);\n    var s = \"undefined\" != typeof FileReader;\n    this.stream = function (e) {\n      this._input = e, r = e.slice || e.webkitSlice || e.mozSlice, s ? ((n = new FileReader()).onload = E(this._chunkLoaded, this), n.onerror = E(this._chunkError, this)) : n = new FileReaderSync(), this._nextChunk();\n    }, this._nextChunk = function () {\n      this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();\n    }, this._readChunk = function () {\n      var e = this._input;\n\n      if (this._config.chunkSize) {\n        var t = Math.min(this._start + this._config.chunkSize, this._input.size);\n        e = r.call(e, this._start, t);\n      }\n\n      var i = n.readAsText(e, this._config.encoding);\n      s || this._chunkLoaded({\n        target: {\n          result: i\n        }\n      });\n    }, this._chunkLoaded = function (e) {\n      this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e.target.result);\n    }, this._chunkError = function () {\n      this._sendError(n.error);\n    };\n  }\n\n  function _(e) {\n    var i;\n    c.call(this, e = e || {}), this.stream = function (e) {\n      return i = e, this._nextChunk();\n    }, this._nextChunk = function () {\n      if (!this._finished) {\n        var e = this._config.chunkSize,\n            t = e ? i.substr(0, e) : i;\n        return i = e ? i.substr(e) : \"\", this._finished = !i, this.parseChunk(t);\n      }\n    };\n  }\n\n  function m(e) {\n    c.call(this, e = e || {});\n    var t = [],\n        i = !0,\n        n = !1;\n    this.pause = function () {\n      c.prototype.pause.apply(this, arguments), this._input.pause();\n    }, this.resume = function () {\n      c.prototype.resume.apply(this, arguments), this._input.resume();\n    }, this.stream = function (e) {\n      this._input = e, this._input.on(\"data\", this._streamData), this._input.on(\"end\", this._streamEnd), this._input.on(\"error\", this._streamError);\n    }, this._checkIsFinished = function () {\n      n && 1 === t.length && (this._finished = !0);\n    }, this._nextChunk = function () {\n      this._checkIsFinished(), t.length ? this.parseChunk(t.shift()) : i = !0;\n    }, this._streamData = E(function (e) {\n      try {\n        t.push(\"string\" == typeof e ? e : e.toString(this._config.encoding)), i && (i = !1, this._checkIsFinished(), this.parseChunk(t.shift()));\n      } catch (e) {\n        this._streamError(e);\n      }\n    }, this), this._streamError = E(function (e) {\n      this._streamCleanUp(), this._sendError(e);\n    }, this), this._streamEnd = E(function () {\n      this._streamCleanUp(), n = !0, this._streamData(\"\");\n    }, this), this._streamCleanUp = E(function () {\n      this._input.removeListener(\"data\", this._streamData), this._input.removeListener(\"end\", this._streamEnd), this._input.removeListener(\"error\", this._streamError);\n    }, this);\n  }\n\n  function g(e) {\n    var t = require(\"stream\").Duplex,\n        i = w(e),\n        n = !0,\n        r = !1,\n        s = [],\n        a = null;\n\n    this._onCsvData = function (e) {\n      for (var t = e.data, i = 0; i < t.length; i++) {\n        a.push(t[i]) || this._handle.paused() || this._handle.pause();\n      }\n    }, this._onCsvComplete = function () {\n      a.push(null);\n    }, i.step = E(this._onCsvData, this), i.complete = E(this._onCsvComplete, this), c.call(this, i), this._nextChunk = function () {\n      r && 1 === s.length && (this._finished = !0), s.length ? s.shift()() : n = !0;\n    }, this._addToParseQueue = function (e, t) {\n      s.push(E(function () {\n        if (this.parseChunk(\"string\" == typeof e ? e : e.toString(i.encoding)), M(t)) return t();\n      }, this)), n && (n = !1, this._nextChunk());\n    }, this._onRead = function () {\n      this._handle.paused() && this._handle.resume();\n    }, this._onWrite = function (e, t, i) {\n      this._addToParseQueue(e, i);\n    }, this._onWriteComplete = function () {\n      r = !0, this._addToParseQueue(\"\");\n    }, this.getStream = function () {\n      return a;\n    }, (a = new t({\n      readableObjectMode: !0,\n      decodeStrings: !1,\n      read: E(this._onRead, this),\n      write: E(this._onWrite, this)\n    })).once(\"finish\", E(this._onWriteComplete, this));\n  }\n\n  function i(m) {\n    var s,\n        a,\n        o,\n        n = /^\\s*-?(\\d*\\.?\\d+|\\d+\\.?\\d*)(e[-+]?\\d+)?\\s*$/i,\n        r = /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/,\n        t = this,\n        i = 0,\n        h = 0,\n        u = !1,\n        e = !1,\n        f = [],\n        d = {\n      data: [],\n      errors: [],\n      meta: {}\n    };\n\n    if (M(m.step)) {\n      var c = m.step;\n\n      m.step = function (e) {\n        if (d = e, p()) l();else {\n          if (l(), 0 === d.data.length) return;\n          i += e.data.length, m.preview && i > m.preview ? a.abort() : c(d, t);\n        }\n      };\n    }\n\n    function l() {\n      if (d && o && (g(\"Delimiter\", \"UndetectableDelimiter\", \"Unable to auto-detect delimiting character; defaulted to '\" + v.DefaultDelimiter + \"'\"), o = !1), m.skipEmptyLines) for (var e = 0; e < d.data.length; e++) {\n        1 === d.data[e].length && \"\" === d.data[e][0] && d.data.splice(e--, 1);\n      }\n      return p() && function () {\n        if (!d) return;\n\n        for (var e = 0; p() && e < d.data.length; e++) {\n          for (var t = 0; t < d.data[e].length; t++) {\n            var i = d.data[e][t];\n            m.trimHeaders && (i = i.trim()), f.push(i);\n          }\n        }\n\n        d.data.splice(0, 1);\n      }(), function () {\n        if (!d || !m.header && !m.dynamicTyping && !m.transform) return d;\n\n        for (var e = 0; e < d.data.length; e++) {\n          var t,\n              i = m.header ? {} : [];\n\n          for (t = 0; t < d.data[e].length; t++) {\n            var n = t,\n                r = d.data[e][t];\n            m.header && (n = t >= f.length ? \"__parsed_extra\" : f[t]), m.transform && (r = m.transform(r, n)), r = _(n, r), \"__parsed_extra\" === n ? (i[n] = i[n] || [], i[n].push(r)) : i[n] = r;\n          }\n\n          d.data[e] = i, m.header && (t > f.length ? g(\"FieldMismatch\", \"TooManyFields\", \"Too many fields: expected \" + f.length + \" fields but parsed \" + t, h + e) : t < f.length && g(\"FieldMismatch\", \"TooFewFields\", \"Too few fields: expected \" + f.length + \" fields but parsed \" + t, h + e));\n        }\n\n        m.header && d.meta && (d.meta.fields = f);\n        return h += d.data.length, d;\n      }();\n    }\n\n    function p() {\n      return m.header && 0 === f.length;\n    }\n\n    function _(e, t) {\n      return i = e, m.dynamicTypingFunction && void 0 === m.dynamicTyping[i] && (m.dynamicTyping[i] = m.dynamicTypingFunction(i)), !0 === (m.dynamicTyping[i] || m.dynamicTyping) ? \"true\" === t || \"TRUE\" === t || \"false\" !== t && \"FALSE\" !== t && (n.test(t) ? parseFloat(t) : r.test(t) ? new Date(t) : \"\" === t ? null : t) : t;\n      var i;\n    }\n\n    function g(e, t, i, n) {\n      d.errors.push({\n        type: e,\n        code: t,\n        message: i,\n        row: n\n      });\n    }\n\n    this.parse = function (e, t, i) {\n      if (m.newline || (m.newline = function (e) {\n        var t = (e = e.substr(0, 1048576)).split(\"\\r\"),\n            i = e.split(\"\\n\"),\n            n = 1 < i.length && i[0].length < t[0].length;\n        if (1 === t.length || n) return \"\\n\";\n\n        for (var r = 0, s = 0; s < t.length; s++) {\n          \"\\n\" === t[s][0] && r++;\n        }\n\n        return r >= t.length / 2 ? \"\\r\\n\" : \"\\r\";\n      }(e)), o = !1, m.delimiter) M(m.delimiter) && (m.delimiter = m.delimiter(e), d.meta.delimiter = m.delimiter);else {\n        var n = function (e, t, i, n) {\n          for (var r, s, a, o = [\",\", \"\\t\", \"|\", \";\", v.RECORD_SEP, v.UNIT_SEP], h = 0; h < o.length; h++) {\n            var u = o[h],\n                f = 0,\n                d = 0,\n                c = 0;\n            a = void 0;\n\n            for (var l = new k({\n              comments: n,\n              delimiter: u,\n              newline: t,\n              preview: 10\n            }).parse(e), p = 0; p < l.data.length; p++) {\n              if (i && 1 === l.data[p].length && 0 === l.data[p][0].length) c++;else {\n                var _ = l.data[p].length;\n                d += _, void 0 !== a ? 1 < _ && (f += Math.abs(_ - a), a = _) : a = _;\n              }\n            }\n\n            0 < l.data.length && (d /= l.data.length - c), (void 0 === s || f < s) && 1.99 < d && (s = f, r = u);\n          }\n\n          return {\n            successful: !!(m.delimiter = r),\n            bestDelimiter: r\n          };\n        }(e, m.newline, m.skipEmptyLines, m.comments);\n\n        n.successful ? m.delimiter = n.bestDelimiter : (o = !0, m.delimiter = v.DefaultDelimiter), d.meta.delimiter = m.delimiter;\n      }\n      var r = w(m);\n      return m.preview && m.header && r.preview++, s = e, a = new k(r), d = a.parse(s, t, i), l(), u ? {\n        meta: {\n          paused: !0\n        }\n      } : d || {\n        meta: {\n          paused: !1\n        }\n      };\n    }, this.paused = function () {\n      return u;\n    }, this.pause = function () {\n      u = !0, a.abort(), s = s.substr(a.getCharIndex());\n    }, this.resume = function () {\n      u = !1, t.streamer.parseChunk(s, !0);\n    }, this.aborted = function () {\n      return e;\n    }, this.abort = function () {\n      e = !0, a.abort(), d.meta.aborted = !0, M(m.complete) && m.complete(d), s = \"\";\n    };\n  }\n\n  function k(e) {\n    var S,\n        x = (e = e || {}).delimiter,\n        T = e.newline,\n        O = e.comments,\n        I = e.step,\n        D = e.preview,\n        P = e.fastMode,\n        A = S = void 0 === e.quoteChar ? '\"' : e.quoteChar;\n    if (void 0 !== e.escapeChar && (A = e.escapeChar), (\"string\" != typeof x || -1 < v.BAD_DELIMITERS.indexOf(x)) && (x = \",\"), O === x) throw \"Comment character same as delimiter\";\n    !0 === O ? O = \"#\" : (\"string\" != typeof O || -1 < v.BAD_DELIMITERS.indexOf(O)) && (O = !1), \"\\n\" !== T && \"\\r\" !== T && \"\\r\\n\" !== T && (T = \"\\n\");\n    var L = 0,\n        F = !1;\n    this.parse = function (n, t, i) {\n      if (\"string\" != typeof n) throw \"Input must be a string\";\n      var r = n.length,\n          e = x.length,\n          s = T.length,\n          a = O.length,\n          o = M(I),\n          h = [],\n          u = [],\n          f = [],\n          d = L = 0;\n      if (!n) return E();\n\n      if (P || !1 !== P && -1 === n.indexOf(S)) {\n        for (var c = n.split(T), l = 0; l < c.length; l++) {\n          if (f = c[l], L += f.length, l !== c.length - 1) L += T.length;else if (i) return E();\n\n          if (!O || f.substr(0, a) !== O) {\n            if (o) {\n              if (h = [], y(f.split(x)), R(), F) return E();\n            } else y(f.split(x));\n\n            if (D && D <= l) return h = h.slice(0, D), E(!0);\n          }\n        }\n\n        return E();\n      }\n\n      for (var p, _ = n.indexOf(x, L), m = n.indexOf(T, L), g = new RegExp(A.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, \"\\\\$&\") + S, \"g\");;) {\n        if (n[L] !== S) {\n          if (O && 0 === f.length && n.substr(L, a) === O) {\n            if (-1 === m) return E();\n            L = m + s, m = n.indexOf(T, L), _ = n.indexOf(x, L);\n          } else if (-1 !== _ && (_ < m || -1 === m)) f.push(n.substring(L, _)), L = _ + e, _ = n.indexOf(x, L);else {\n            if (-1 === m) break;\n            if (f.push(n.substring(L, m)), w(m + s), o && (R(), F)) return E();\n            if (D && h.length >= D) return E(!0);\n          }\n        } else for (p = L, L++;;) {\n          if (-1 === (p = n.indexOf(S, p + 1))) return i || u.push({\n            type: \"Quotes\",\n            code: \"MissingQuotes\",\n            message: \"Quoted field unterminated\",\n            row: h.length,\n            index: L\n          }), b();\n          if (p === r - 1) return b(n.substring(L, p).replace(g, S));\n\n          if (S !== A || n[p + 1] !== A) {\n            if (S === A || 0 === p || n[p - 1] !== A) {\n              var v = C(_);\n\n              if (n[p + 1 + v] === x) {\n                f.push(n.substring(L, p).replace(g, S)), L = p + 1 + v + e, _ = n.indexOf(x, L), m = n.indexOf(T, L);\n                break;\n              }\n\n              var k = C(m);\n\n              if (n.substr(p + 1 + k, s) === T) {\n                if (f.push(n.substring(L, p).replace(g, S)), w(p + 1 + k + s), _ = n.indexOf(x, L), o && (R(), F)) return E();\n                if (D && h.length >= D) return E(!0);\n                break;\n              }\n\n              u.push({\n                type: \"Quotes\",\n                code: \"InvalidQuotes\",\n                message: \"Trailing quote on quoted field is malformed\",\n                row: h.length,\n                index: L\n              }), p++;\n            }\n          } else p++;\n        }\n      }\n\n      return b();\n\n      function y(e) {\n        h.push(e), d = L;\n      }\n\n      function C(e) {\n        var t = 0;\n\n        if (-1 !== e) {\n          var i = n.substring(p + 1, e);\n          i && \"\" === i.trim() && (t = i.length);\n        }\n\n        return t;\n      }\n\n      function b(e) {\n        return i || (void 0 === e && (e = n.substr(L)), f.push(e), L = r, y(f), o && R()), E();\n      }\n\n      function w(e) {\n        L = e, y(f), f = [], m = n.indexOf(T, L);\n      }\n\n      function E(e) {\n        return {\n          data: h,\n          errors: u,\n          meta: {\n            delimiter: x,\n            linebreak: T,\n            aborted: F,\n            truncated: !!e,\n            cursor: d + (t || 0)\n          }\n        };\n      }\n\n      function R() {\n        I(E()), h = [], u = [];\n      }\n    }, this.abort = function () {\n      F = !0;\n    }, this.getCharIndex = function () {\n      return L;\n    };\n  }\n\n  function y(e) {\n    var t = e.data,\n        i = h[t.workerId],\n        n = !1;\n    if (t.error) i.userError(t.error, t.file);else if (t.results && t.results.data) {\n      var r = {\n        abort: function abort() {\n          n = !0, C(t.workerId, {\n            data: [],\n            errors: [],\n            meta: {\n              aborted: !0\n            }\n          });\n        },\n        pause: b,\n        resume: b\n      };\n\n      if (M(i.userStep)) {\n        for (var s = 0; s < t.results.data.length && (i.userStep({\n          data: [t.results.data[s]],\n          errors: t.results.errors,\n          meta: t.results.meta\n        }, r), !n); s++) {\n          ;\n        }\n\n        delete t.results;\n      } else M(i.userChunk) && (i.userChunk(t.results, r, t.file), delete t.results);\n    }\n    t.finished && !n && C(t.workerId, t.results);\n  }\n\n  function C(e, t) {\n    var i = h[e];\n    M(i.userComplete) && i.userComplete(t), i.terminate(), delete h[e];\n  }\n\n  function b() {\n    throw \"Not implemented.\";\n  }\n\n  function w(e) {\n    if (\"object\" != typeof e || null === e) return e;\n    var t = e instanceof Array ? [] : {};\n\n    for (var i in e) {\n      t[i] = w(e[i]);\n    }\n\n    return t;\n  }\n\n  function E(e, t) {\n    return function () {\n      e.apply(t, arguments);\n    };\n  }\n\n  function M(e) {\n    return \"function\" == typeof e;\n  }\n\n  return o ? f.onmessage = function (e) {\n    var t = e.data;\n    void 0 === v.WORKER_ID && t && (v.WORKER_ID = t.workerId);\n    if (\"string\" == typeof t.input) f.postMessage({\n      workerId: v.WORKER_ID,\n      results: v.parse(t.input, t.config),\n      finished: !0\n    });else if (f.File && t.input instanceof File || t.input instanceof Object) {\n      var i = v.parse(t.input, t.config);\n      i && f.postMessage({\n        workerId: v.WORKER_ID,\n        results: i,\n        finished: !0\n      });\n    }\n  } : v.WORKERS_SUPPORTED && (e = document.getElementsByTagName(\"script\"), s = e.length ? e[e.length - 1].src : \"\", document.body ? document.addEventListener(\"DOMContentLoaded\", function () {\n    a = !0;\n  }, !0) : a = !0), (l.prototype = Object.create(c.prototype)).constructor = l, (p.prototype = Object.create(c.prototype)).constructor = p, (_.prototype = Object.create(_.prototype)).constructor = _, (m.prototype = Object.create(c.prototype)).constructor = m, (g.prototype = Object.create(c.prototype)).constructor = g, v;\n});","map":null,"metadata":{},"sourceType":"script"}