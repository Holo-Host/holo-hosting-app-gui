{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\n\n\nimport { Component, isValidElement } from 'react';\nimport { connect } from 'react-redux';\nimport { parse, stringify } from 'query-string';\nimport { push as pushAction } from 'react-router-redux';\nimport compose from 'recompose/compose';\nimport { createSelector } from 'reselect';\nimport inflection from 'inflection';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\nimport pickBy from 'lodash/pickBy';\nimport removeEmpty from '../util/removeEmpty';\nimport queryReducer, { SET_SORT, SET_PAGE, SET_PER_PAGE, SET_FILTER, SORT_DESC } from '../reducer/admin/resource/list/queryReducer';\nimport { crudGetList as crudGetListAction } from '../actions/dataActions';\nimport { changeListParams as changeListParamsAction, setListSelectedIds as setListSelectedIdsAction, toggleListItem as toggleListItemAction } from '../actions/listActions';\nimport withTranslate from '../i18n/translate';\nimport removeKey from '../util/removeKey';\nimport checkMinimumRequiredProps from './checkMinimumRequiredProps';\n/**\n * List page component\n *\n * The <List> component renders the list layout (title, buttons, filters, pagination),\n * and fetches the list of records from the REST API.\n * It then delegates the rendering of the list of records to its child component.\n * Usually, it's a <Datagrid>, responsible for displaying a table with one row for each post.\n *\n * In Redux terms, <List> is a connected component, and <Datagrid> is a dumb component.\n *\n * Props:\n *   - title\n *   - perPage\n *   - sort\n *   - filter (the permanent filter to apply to the query)\n *   - actions\n *   - filters (a React Element used to display the filter form)\n *   - pagination\n *\n * @example\n *     const PostFilter = (props) => (\n *         <Filter {...props}>\n *             <TextInput label=\"Search\" source=\"q\" alwaysOn />\n *             <TextInput label=\"Title\" source=\"title\" />\n *         </Filter>\n *     );\n *     export const PostList = (props) => (\n *         <List {...props}\n *             title=\"List of posts\"\n *             sort={{ field: 'published_at' }}\n *             filter={{ is_published: true }}\n *             filters={<PostFilter />}\n *         >\n *             <Datagrid>\n *                 <TextField source=\"id\" />\n *                 <TextField source=\"title\" />\n *                 <EditButton />\n *             </Datagrid>\n *         </List>\n *     );\n */\n\nvar UnconnectedListController =\n/** @class */\nfunction (_super) {\n  __extends(UnconnectedListController, _super);\n\n  function UnconnectedListController() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {};\n    _this.setFilters = debounce(function (filters) {\n      if (isEqual(filters, _this.getFilterValues())) {\n        return;\n      } // fix for redux-form bug with onChange and enableReinitialize\n\n\n      var filtersWithoutEmpty = removeEmpty(filters);\n\n      _this.changeParams({\n        type: SET_FILTER,\n        payload: filtersWithoutEmpty\n      });\n    }, _this.props.debounce);\n\n    _this.setSort = function (sort) {\n      return _this.changeParams({\n        type: SET_SORT,\n        payload: sort\n      });\n    };\n\n    _this.setPage = function (page) {\n      return _this.changeParams({\n        type: SET_PAGE,\n        payload: page\n      });\n    };\n\n    _this.setPerPage = function (perPage) {\n      return _this.changeParams({\n        type: SET_PER_PAGE,\n        payload: perPage\n      });\n    };\n\n    _this.showFilter = function (filterName, defaultValue) {\n      var _a, _b;\n\n      _this.setState((_a = {}, _a[filterName] = true, _a));\n\n      if (typeof defaultValue !== 'undefined') {\n        _this.setFilters(__assign({}, _this.getFilterValues(), (_b = {}, _b[filterName] = defaultValue, _b)));\n      }\n    };\n\n    _this.hideFilter = function (filterName) {\n      var _a;\n\n      _this.setState((_a = {}, _a[filterName] = false, _a));\n\n      var newFilters = removeKey(_this.getFilterValues(), filterName);\n\n      _this.setFilters(newFilters);\n    };\n\n    _this.handleSelect = function (ids) {\n      _this.props.setSelectedIds(_this.props.resource, ids);\n    };\n\n    _this.handleUnselectItems = function () {\n      _this.props.setSelectedIds(_this.props.resource, []);\n    };\n\n    _this.handleToggleItem = function (id) {\n      _this.props.toggleItem(_this.props.resource, id);\n    };\n\n    return _this;\n  }\n\n  UnconnectedListController.prototype.componentDidMount = function () {\n    if (this.props.filter && isValidElement(this.props.filter)) {\n      throw new Error('<List> received a React element as `filter` props. If you intended to set the list filter elements, use the `filters` (with an s) prop instead. The `filter` prop is internal and should not be set by the developer.');\n    }\n\n    if (!this.props.query.page && !(this.props.ids || []).length && this.props.params.page > 1 && this.props.total > 0) {\n      this.setPage(this.props.params.page - 1);\n      return;\n    }\n\n    this.updateData();\n\n    if (Object.keys(this.props.query).length > 0) {\n      this.props.changeListParams(this.props.resource, this.props.query);\n    }\n  };\n\n  UnconnectedListController.prototype.componentWillUnmount = function () {\n    this.setFilters.cancel();\n  };\n\n  UnconnectedListController.prototype.componentWillReceiveProps = function (nextProps) {\n    if (nextProps.resource !== this.props.resource || nextProps.query.sort !== this.props.query.sort || nextProps.query.order !== this.props.query.order || nextProps.query.page !== this.props.query.page || nextProps.query.perPage !== this.props.query.perPage || !isEqual(nextProps.query.filter, this.props.query.filter) || !isEqual(nextProps.filter, this.props.filter) || !isEqual(nextProps.sort, this.props.sort) || !isEqual(nextProps.perPage, this.props.perPage)) {\n      this.updateData(Object.keys(nextProps.query).length > 0 ? nextProps.query : nextProps.params);\n    }\n\n    if (nextProps.version !== this.props.version) {\n      this.updateData();\n    }\n  };\n\n  UnconnectedListController.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    if (nextProps.translate === this.props.translate && nextProps.isLoading === this.props.isLoading && nextProps.version === this.props.version && nextState === this.state && nextProps.data === this.props.data && nextProps.selectedIds === this.props.selectedIds && nextProps.total === this.props.total) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Check if user has already set custom sort, page, or filters for this list\n   *\n   * User params come from the Redux store as the params props. By default,\n   * this object is:\n   *\n   * { filter: {}, order: null, page: 1, perPage: null, sort: null }\n   *\n   * To check if the user has custom params, we must compare the params\n   * to these initial values.\n   *\n   * @param {object} params\n   */\n\n\n  UnconnectedListController.prototype.hasCustomParams = function (params) {\n    return params && params.filter && (Object.keys(params.filter).length > 0 || params.order != null || params.page !== 1 || params.perPage != null || params.sort != null);\n  };\n  /**\n   * Merge list params from 4 different sources:\n   *   - the query string\n   *   - the params stored in the state (from previous navigation)\n   *   - the filter defaultValues\n   *   - the props passed to the List component\n   */\n\n\n  UnconnectedListController.prototype.getQuery = function () {\n    var query = Object.keys(this.props.query).length > 0 ? this.props.query : this.hasCustomParams(this.props.params) ? __assign({}, this.props.params) : {\n      filter: this.props.filterDefaultValues || {}\n    };\n\n    if (!query.sort) {\n      query.sort = this.props.sort.field;\n      query.order = this.props.sort.order;\n    }\n\n    if (!query.perPage) {\n      query.perPage = this.props.perPage;\n    }\n\n    if (!query.page) {\n      query.page = 1;\n    }\n\n    return query;\n  };\n\n  UnconnectedListController.prototype.getFilterValues = function () {\n    var query = this.getQuery();\n    return query.filter || {};\n  };\n\n  UnconnectedListController.prototype.updateData = function (query) {\n    var params = query || this.getQuery();\n    var sort = params.sort,\n        order = params.order,\n        _a = params.page,\n        page = _a === void 0 ? 1 : _a,\n        perPage = params.perPage,\n        filter = params.filter;\n    var pagination = {\n      page: parseInt(page, 10),\n      perPage: parseInt(perPage, 10)\n    };\n    var permanentFilter = this.props.filter;\n    this.props.crudGetList(this.props.resource, pagination, {\n      field: sort,\n      order: order\n    }, __assign({}, filter, permanentFilter));\n  };\n\n  UnconnectedListController.prototype.changeParams = function (action) {\n    var newParams = queryReducer(this.getQuery(), action);\n    this.props.push(__assign({}, this.props.location, {\n      search: \"?\" + stringify(__assign({}, newParams, {\n        filter: JSON.stringify(newParams.filter)\n      }))\n    }));\n    this.props.changeListParams(this.props.resource, newParams);\n  };\n\n  UnconnectedListController.prototype.render = function () {\n    var _a = this.props,\n        basePath = _a.basePath,\n        children = _a.children,\n        resource = _a.resource,\n        hasCreate = _a.hasCreate,\n        data = _a.data,\n        ids = _a.ids,\n        loadedOnce = _a.loadedOnce,\n        total = _a.total,\n        isLoading = _a.isLoading,\n        translate = _a.translate,\n        version = _a.version,\n        selectedIds = _a.selectedIds;\n    var query = this.getQuery();\n    var resourceName = translate(\"resources.\" + resource + \".name\", {\n      smart_count: 2,\n      _: inflection.humanize(inflection.pluralize(resource))\n    });\n    var defaultTitle = translate('ra.page.list', {\n      name: \"\" + resourceName\n    });\n    return children({\n      basePath: basePath,\n      currentSort: {\n        field: query.sort,\n        order: query.order\n      },\n      data: data,\n      defaultTitle: defaultTitle,\n      displayedFilters: this.state,\n      filterValues: this.getFilterValues(),\n      hasCreate: hasCreate,\n      hideFilter: this.hideFilter,\n      ids: ids,\n      isLoading: isLoading,\n      loadedOnce: loadedOnce,\n      onSelect: this.handleSelect,\n      onToggleItem: this.handleToggleItem,\n      onUnselectItems: this.handleUnselectItems,\n      page: (typeof query.page === 'string' ? parseInt(query.page, 10) : query.page) || 1,\n      perPage: (typeof query.perPage === 'string' ? parseInt(query.perPage, 10) : query.perPage) || 10,\n      resource: resource,\n      selectedIds: selectedIds,\n      setFilters: this.setFilters,\n      setPage: this.setPage,\n      setPerPage: this.setPerPage,\n      setSort: this.setSort,\n      showFilter: this.showFilter,\n      translate: translate,\n      total: total,\n      version: version\n    });\n  };\n\n  UnconnectedListController.defaultProps = {\n    debounce: 500,\n    filter: {},\n    perPage: 10,\n    sort: {\n      field: 'id',\n      order: SORT_DESC\n    }\n  };\n  return UnconnectedListController;\n}(Component);\n\nexport { UnconnectedListController };\nvar injectedProps = ['basePath', 'currentSort', 'data', 'defaultTitle', 'displayedFilters', 'filterValues', 'hasCreate', 'hideFilter', 'ids', 'isLoading', 'loadedOnce', 'onSelect', 'onToggleItem', 'onUnselectItems', 'page', 'perPage', 'refresh', 'resource', 'selectedIds', 'setFilters', 'setPage', 'setPerPage', 'setSort', 'showFilter', 'total', 'translate', 'version'];\n/**\n * Select the props injected by the ListController\n * to be passed to the List children need\n * This is an implementation of pick()\n */\n\nexport var getListControllerProps = function getListControllerProps(props) {\n  return injectedProps.reduce(function (acc, key) {\n    var _a;\n\n    return __assign({}, acc, (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};\n/**\n * Select the props not injected by the ListController\n * to be used inside the List children to sanitize props injected by List\n * This is an implementation of omit()\n */\n\nexport var sanitizeListRestProps = function sanitizeListRestProps(props) {\n  return Object.keys(props).filter(function (propName) {\n    return !injectedProps.includes(propName);\n  }).reduce(function (acc, key) {\n    var _a;\n\n    return __assign({}, acc, (_a = {}, _a[key] = props[key], _a));\n  }, {});\n};\nvar validQueryParams = ['page', 'perPage', 'sort', 'order', 'filter'];\n\nvar getLocationPath = function getLocationPath(props) {\n  return props.location.pathname;\n};\n\nvar getLocationSearch = function getLocationSearch(props) {\n  return props.location.search;\n};\n\nvar selectQuery = createSelector(getLocationPath, getLocationSearch, function (path, search) {\n  var query = pickBy(parse(search), function (v, k) {\n    return validQueryParams.indexOf(k) !== -1;\n  });\n\n  if (query.filter && typeof query.filter === 'string') {\n    try {\n      query.filter = JSON.parse(query.filter);\n    } catch (err) {\n      delete query.filter;\n    }\n  }\n\n  return query;\n});\n\nfunction mapStateToProps(state, props) {\n  var resourceState = state.admin.resources[props.resource];\n  return {\n    query: selectQuery(props),\n    params: resourceState.list.params,\n    ids: resourceState.list.ids,\n    loadedOnce: resourceState.list.loadedOnce,\n    selectedIds: resourceState.list.selectedIds,\n    total: resourceState.list.total,\n    data: resourceState.data,\n    isLoading: state.admin.loading > 0,\n    version: state.admin.ui.viewVersion\n  };\n}\n\nvar ListController = compose(checkMinimumRequiredProps('List', ['basePath', 'location', 'resource']), connect(mapStateToProps, {\n  crudGetList: crudGetListAction,\n  changeListParams: changeListParamsAction,\n  setSelectedIds: setListSelectedIdsAction,\n  toggleItem: toggleListItemAction,\n  push: pushAction\n}), withTranslate)(UnconnectedListController);\nexport default ListController;","map":null,"metadata":{},"sourceType":"module"}