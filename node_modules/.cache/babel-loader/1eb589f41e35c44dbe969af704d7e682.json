{"ast":null,"code":"var __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { delay } from 'redux-saga';\nimport { call, cancel, fork, put, takeEvery } from 'redux-saga/effects';\n/**\n * Distinct reducer on ids\n *\n * @example\n * addIds([1, 2, 3], { payload: { ids: [3, 4] } })\n *   => [1, 2, 3, 4]\n */\n\nvar addIds = function addIds(oldIds, _a) {\n  var ids = _a.payload.ids; // Using a Set ensure we only keep distinct values\n\n  var oldIdsSet = new Set(oldIds);\n  ids.forEach(function (id) {\n    return oldIdsSet.add(id);\n  });\n  return Array.from(oldIdsSet);\n}; // We need a factory for this saga in order to unit test it by providing its context (current tasks and accumulations)\n\n\nexport var finalizeFactory = function finalizeFactory(tasks, accumulations) {\n  /**\n   * Fetch the accumulated value after a delay\n   *\n   * As this gets canceled by subsequent calls to accumulate(), only the last\n   * call to finalize() will not be canceled. The delay acts as a\n   * debounce.\n   *\n   * @see https://redux-saga.js.org/docs/recipes/#debouncing\n   */\n  return function finalize(key, actionCreator) {\n    var accumulatedValue, action;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          // combined with cancel(), this debounces the calls\n          return [4\n          /*yield*/\n          , call(delay, 50)];\n\n        case 1:\n          // combined with cancel(), this debounces the calls\n          _a.sent();\n\n          accumulatedValue = accumulations[key]; // Remove the latest accumulated value so that they do not interfere with later calls\n\n          delete accumulations[key];\n          action = actionCreator(key, accumulatedValue);\n          return [4\n          /*yield*/\n          , put(action)];\n\n        case 2:\n          _a.sent();\n\n          delete tasks[key];\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n}; // We need a factory for this saga in order to unit test it by providing its context (current tasks and accumulations)\n\nexport var accumulateFactory = function accumulateFactory(tasks, accumulations, finalize) {\n  /**\n   * Accumulate actions and eventually redispatch an action with the accumulated payload\n   *\n   * @example\n   * accumulate({\n   *    type: CRUD_GET_MANY_ACCUMULATE,\n   *    payload: { ids: [1, 2, 3], resource: 'posts' },\n   *    meta: { accumulate: crudGetMany }\n   * });\n   * accumulate({\n   *    type: CRUD_GET_MANY_ACCUMULATE,\n   *    payload: { ids: [4, 5], resource: 'posts' },\n   *    meta: { accumulate: crudGetMany }\n   * });\n   *   => crudGetMany({ ids: [1, 2, 3, 4, 5], resource: 'posts' })\n   *\n   * @example\n   * accumulate({\n   *    type: CRUD_GET_MATCHING_ACCUMULATE,\n   *    meta: {\n   *      accumulate: crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {}),\n   *      accumulateValues: () => true,\n   *      accumulateKey: '{\"resource\":\"authors\", \"pagination\":{\"page\":1,\"perPage\":10},\"sort\":{\"field\":\"id\",\"order\":\"DESC\"},\"filter\":{}}'\n   *    }\n   * });\n   * accumulate({\n   *    type: CRUD_GET_MATCHING_ACCUMULATE,\n   *    meta: {\n   *      accumulate: crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {}),\n   *      accumulateValues: () => true,\n   *      accumulateKey: '{\"resource\":\"authors\", \"pagination\":{\"page\":1,\"perPage\":10},\"sort\":{\"field\":\"id\",\"order\":\"DESC\"},\"filter\":{}}'\n   *    }\n   * });\n   *   => crudGetMatching('posts', 'posts@comments[1].authorId', { page:1, perPage: 10 }, {field: 'id', order: 'DESC' }, {})\n   */\n  return function accumulate(action) {\n    var key, accumulateValues, _a, _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          key = action.meta.accumulateKey || action.payload.resource;\n          if (!tasks[key]) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , cancel(tasks[key])];\n\n        case 1:\n          _c.sent();\n\n          _c.label = 2;\n\n        case 2:\n          accumulateValues = action.meta.accumulateValues || addIds; // accumulateValues is a reducer function, it receives the previous accumulatedValues for\n          // the provided key, and must return the updated accumulatedValues\n\n          accumulations[key] = accumulateValues(accumulations[key], action);\n          _a = tasks;\n          _b = key;\n          return [4\n          /*yield*/\n          , fork(finalize, key, action.meta.accumulate)];\n\n        case 3:\n          _a[_b] = _c.sent();\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  };\n};\nexport default function () {\n  var accumulations, tasks;\n  return __generator(this, function (_a) {\n    switch (_a.label) {\n      case 0:\n        accumulations = {};\n        tasks = {};\n        return [4\n        /*yield*/\n        , takeEvery(function (action) {\n          return action.meta && action.meta.accumulate;\n        }, accumulateFactory(tasks, accumulations, finalizeFactory(tasks, accumulations)))];\n\n      case 1:\n        _a.sent();\n\n        return [2\n        /*return*/\n        ];\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}