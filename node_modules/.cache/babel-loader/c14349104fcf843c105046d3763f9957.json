{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport compose from 'recompose/compose';\nimport inflection from 'inflection';\nimport withTranslate from '../i18n/translate';\nimport { crudGetOne as crudGetOneAction } from '../actions';\nimport checkMinimumRequiredProps from './checkMinimumRequiredProps';\n/**\n * Page component for the Show view\n *\n * The `<Show>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleShowLayout>`),\n * to which it passes pass the `record` as prop.\n *\n * The `<Show>` component accepts the following props:\n *\n * - title\n * - actions\n *\n * Both expect an element for value.\n *\n * @example\n *     // in src/posts.js\n *     import React from 'react';\n *     import { Show, SimpleShowLayout, TextField } from 'react-admin';\n *\n *     export const PostShow = (props) => (\n *         <Show {...props}>\n *             <SimpleShowLayout>\n *                 <TextField source=\"title\" />\n *             </SimpleShowLayout>\n *         </Show>\n *     );\n *\n *     // in src/App.js\n *     import React from 'react';\n *     import { Admin, Resource } from 'react-admin';\n *\n *     import { PostShow } from './posts';\n *\n *     const App = () => (\n *         <Admin dataProvider={...}>\n *             <Resource name=\"posts\" show={PostShow} />\n *         </Admin>\n *     );\n *     export default App;\n */\n\nvar UnconnectedShowController =\n/** @class */\nfunction (_super) {\n  __extends(UnconnectedShowController, _super);\n\n  function UnconnectedShowController() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  UnconnectedShowController.prototype.componentDidMount = function () {\n    this.updateData();\n  };\n\n  UnconnectedShowController.prototype.componentWillReceiveProps = function (nextProps) {\n    if (this.props.id !== nextProps.id || nextProps.version !== this.props.version) {\n      this.updateData(nextProps.resource, nextProps.id);\n    }\n  };\n\n  UnconnectedShowController.prototype.updateData = function (resource, id) {\n    if (resource === void 0) {\n      resource = this.props.resource;\n    }\n\n    if (id === void 0) {\n      id = this.props.id;\n    }\n\n    this.props.crudGetOne(resource, id, this.props.basePath);\n  };\n\n  UnconnectedShowController.prototype.render = function () {\n    var _a = this.props,\n        basePath = _a.basePath,\n        children = _a.children,\n        id = _a.id,\n        isLoading = _a.isLoading,\n        record = _a.record,\n        resource = _a.resource,\n        translate = _a.translate,\n        version = _a.version;\n\n    if (!children) {\n      return null;\n    }\n\n    var resourceName = translate(\"resources.\" + resource + \".name\", {\n      smart_count: 1,\n      _: inflection.humanize(inflection.singularize(resource))\n    });\n    var defaultTitle = translate('ra.page.show', {\n      name: \"\" + resourceName,\n      id: id,\n      record: record\n    });\n    return children({\n      isLoading: isLoading,\n      defaultTitle: defaultTitle,\n      resource: resource,\n      basePath: basePath,\n      record: record,\n      translate: translate,\n      version: version\n    });\n  };\n\n  return UnconnectedShowController;\n}(Component);\n\nexport { UnconnectedShowController };\n\nfunction mapStateToProps(state, props) {\n  return {\n    id: props.id,\n    record: state.admin.resources[props.resource] ? state.admin.resources[props.resource].data[props.id] : null,\n    isLoading: state.admin.loading > 0,\n    version: state.admin.ui.viewVersion\n  };\n}\n\nvar ShowController = compose(checkMinimumRequiredProps('Show', ['basePath', 'resource']), connect(mapStateToProps, {\n  crudGetOne: crudGetOneAction\n}), withTranslate)(UnconnectedShowController);\nexport default ShowController;","map":null,"metadata":{},"sourceType":"module"}