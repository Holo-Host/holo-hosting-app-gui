{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport { addField, FieldTitle } from 'ra-core';\nimport sanitizeRestProps from './sanitizeRestProps';\n\nvar leftPad = function leftPad(nb) {\n  if (nb === void 0) {\n    nb = 2;\n  }\n\n  return function (value) {\n    return ('0'.repeat(nb) + value).slice(-nb);\n  };\n};\n\nvar leftPad4 = leftPad(4);\nvar leftPad2 = leftPad(2);\n/**\n * @param {Date} v value to convert\n * @returns {String} A standardized datetime (yyyy-MM-ddThh:mm), to be passed to an <input type=\"datetime-local\" />\n */\n\nvar convertDateToString = function convertDateToString(v) {\n  if (!(v instanceof Date) || isNaN(v)) return '';\n  var yyyy = leftPad4(v.getFullYear());\n  var MM = leftPad2(v.getMonth() + 1);\n  var dd = leftPad2(v.getDate());\n  var hh = leftPad2(v.getHours());\n  var mm = leftPad2(v.getMinutes());\n  return yyyy + \"-\" + MM + \"-\" + dd + \"T\" + hh + \":\" + mm;\n}; // yyyy-MM-ddThh:mm\n\n\nvar dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$/;\n/**\n * Converts a date from the Redux store, with timezone, to a date string\n * without timezone for use in an <input type=\"datetime-local\" />.\n *\n * @param {Mixed} value date string or object\n * @param {String} Date string, formatted as yyyy-MM-ddThh:mm\n */\n\nvar format = function format(value) {\n  // null, undefined and empty string values should not go through convertDateToString\n  // otherwise, it returns undefined and will make the input an uncontrolled one.\n  if (value == null || value === '') {\n    return '';\n  } // valid dates should not be converted\n\n\n  if (dateTimeRegex.test(value)) {\n    return value;\n  }\n\n  var finalValue = typeof value instanceof Date ? value : new Date(value);\n  return convertDateToString(finalValue);\n};\n/**\n * Converts a datetime string without timezone to a date object\n * with timezone, using the browser timezone.\n *\n * @param {String} value Date string, formatted as yyyy-MM-ddThh:mm\n * @return {Date}\n */\n\n\nvar parse = function parse(value) {\n  return new Date(value);\n};\n/**\n * Input component for entering a date and a time with timezone, using the browser locale\n */\n\n\nexport var DateTimeInput = function DateTimeInput(_a) {\n  var className = _a.className,\n      _b = _a.meta,\n      touched = _b.touched,\n      error = _b.error,\n      input = _a.input,\n      isRequired = _a.isRequired,\n      label = _a.label,\n      options = _a.options,\n      source = _a.source,\n      resource = _a.resource,\n      rest = __rest(_a, [\"className\", \"meta\", \"input\", \"isRequired\", \"label\", \"options\", \"source\", \"resource\"]);\n\n  return React.createElement(TextField, __assign({}, input, {\n    className: className,\n    type: \"datetime-local\",\n    margin: \"normal\",\n    error: !!(touched && error),\n    helperText: touched && error,\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    InputLabelProps: {\n      shrink: true\n    }\n  }, options, sanitizeRestProps(rest), {\n    value: input.value\n  }));\n};\nDateTimeInput.propTypes = {\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  input: PropTypes.object,\n  isRequired: PropTypes.bool,\n  label: PropTypes.string,\n  meta: PropTypes.object,\n  options: PropTypes.object,\n  resource: PropTypes.string,\n  source: PropTypes.string\n};\nDateTimeInput.defaultProps = {\n  options: {}\n};\nexport default addField(DateTimeInput, {\n  format: format,\n  parse: parse\n});","map":null,"metadata":{},"sourceType":"module"}