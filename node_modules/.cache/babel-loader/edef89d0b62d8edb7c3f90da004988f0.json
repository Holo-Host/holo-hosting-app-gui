{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.styles = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/possibleConstructorReturn\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _withStyles = _interopRequireDefault(require(\"../styles/withStyles\"));\n\nvar _IconButton = _interopRequireDefault(require(\"../IconButton\")); // @inheritedComponent IconButton\n\n\nvar styles = {\n  root: {\n    display: 'inline-flex',\n    alignItems: 'center',\n    transition: 'none',\n    '&:hover': {\n      // Disable the hover effect for the IconButton.\n      backgroundColor: 'transparent'\n    }\n  },\n  checked: {},\n  disabled: {},\n  input: {\n    cursor: 'inherit',\n    position: 'absolute',\n    opacity: 0,\n    width: '100%',\n    height: '100%',\n    top: 0,\n    left: 0,\n    margin: 0,\n    padding: 0\n  }\n};\nexports.styles = styles;\n\nvar SwitchBase =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(SwitchBase, _React$Component);\n\n  function SwitchBase(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, SwitchBase);\n    _this = (0, _possibleConstructorReturn2.default)(this, (SwitchBase.__proto__ || Object.getPrototypeOf(SwitchBase)).call(this, props));\n    _this.input = null;\n    _this.isControlled = null;\n    _this.state = {};\n\n    _this.handleFocus = function (event) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(event);\n      }\n\n      var muiFormControl = _this.context.muiFormControl;\n\n      if (muiFormControl && muiFormControl.onFocus) {\n        muiFormControl.onFocus(event);\n      }\n    };\n\n    _this.handleBlur = function (event) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(event);\n      }\n\n      var muiFormControl = _this.context.muiFormControl;\n\n      if (muiFormControl && muiFormControl.onBlur) {\n        muiFormControl.onBlur(event);\n      }\n    };\n\n    _this.handleInputChange = function (event) {\n      var checked = event.target.checked;\n\n      if (!_this.isControlled) {\n        _this.setState({\n          checked: checked\n        });\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange(event, checked);\n      }\n    };\n\n    _this.isControlled = props.checked != null;\n\n    if (!_this.isControlled) {\n      // not controlled, use internal state\n      _this.state.checked = props.defaultChecked !== undefined ? props.defaultChecked : false;\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(SwitchBase, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _props = this.props,\n          checkedProp = _props.checked,\n          checkedIcon = _props.checkedIcon,\n          classes = _props.classes,\n          classNameProp = _props.className,\n          disabledProp = _props.disabled,\n          icon = _props.icon,\n          id = _props.id,\n          inputProps = _props.inputProps,\n          inputRef = _props.inputRef,\n          name = _props.name,\n          onBlur = _props.onBlur,\n          onChange = _props.onChange,\n          onFocus = _props.onFocus,\n          tabIndex = _props.tabIndex,\n          type = _props.type,\n          value = _props.value,\n          other = (0, _objectWithoutProperties2.default)(_props, [\"checked\", \"checkedIcon\", \"classes\", \"className\", \"disabled\", \"icon\", \"id\", \"inputProps\", \"inputRef\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"tabIndex\", \"type\", \"value\"]);\n      var muiFormControl = this.context.muiFormControl;\n      var disabled = disabledProp;\n\n      if (muiFormControl) {\n        if (typeof disabled === 'undefined') {\n          disabled = muiFormControl.disabled;\n        }\n      }\n\n      var checked = this.isControlled ? checkedProp : this.state.checked;\n      var hasLabelFor = type === 'checkbox' || type === 'radio';\n      return _react.default.createElement(_IconButton.default, (0, _extends2.default)({\n        component: \"span\",\n        className: (0, _classnames.default)(classes.root, (_classNames = {}, (0, _defineProperty2.default)(_classNames, classes.checked, checked), (0, _defineProperty2.default)(_classNames, classes.disabled, disabled), _classNames), classNameProp),\n        disabled: disabled,\n        tabIndex: null,\n        role: undefined,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur\n      }, other), checked ? checkedIcon : icon, _react.default.createElement(\"input\", (0, _extends2.default)({\n        id: hasLabelFor && id,\n        type: type,\n        name: name,\n        checked: checked,\n        onChange: this.handleInputChange,\n        className: classes.input,\n        disabled: disabled,\n        tabIndex: tabIndex,\n        value: value,\n        ref: inputRef\n      }, inputProps)));\n    }\n  }]);\n  return SwitchBase;\n}(_react.default.Component); // NB: If changed, please update Checkbox, Switch and Radio\n// so that the API documentation is updated.\n\n\nSwitchBase.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: _propTypes.default.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * @ignore\n   */\n  defaultChecked: _propTypes.default.bool,\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: _propTypes.default.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: _propTypes.default.node.isRequired,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: _propTypes.default.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   */\n  indeterminate: _propTypes.default.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: _propTypes.default.node,\n\n  /**\n   * Attributes applied to the `input` element.\n   */\n  inputProps: _propTypes.default.object,\n\n  /**\n   * Use that property to pass a ref callback to the native input component.\n   */\n  inputRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]),\n\n  /*\n   * @ignore\n   */\n  name: _propTypes.default.string,\n\n  /**\n   * @ignore\n   */\n  onBlur: _propTypes.default.func,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.checked`.\n   * @param {boolean} checked The `checked` value of the switch\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: _propTypes.default.func,\n\n  /**\n   * @ignore\n   */\n  tabIndex: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),\n\n  /**\n   * The input component property `type`.\n   */\n  type: _propTypes.default.string,\n\n  /**\n   * The value of the component.\n   */\n  value: _propTypes.default.string\n} : {};\nSwitchBase.defaultProps = {\n  type: 'checkbox'\n};\nSwitchBase.contextTypes = {\n  muiFormControl: _propTypes.default.object\n};\n\nvar _default = (0, _withStyles.default)(styles, {\n  name: 'MuiSwitchBase'\n})(SwitchBase);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}