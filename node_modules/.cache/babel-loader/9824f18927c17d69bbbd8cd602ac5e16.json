{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component, isValidElement, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { sanitizeListRestProps } from 'ra-core';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport classnames from 'classnames';\nimport DatagridHeaderCell from './DatagridHeaderCell';\nimport DatagridBody from './DatagridBody';\nimport DatagridLoading from './DatagridLoading';\n\nvar styles = function styles(theme) {\n  return createStyles({\n    table: {\n      tableLayout: 'auto'\n    },\n    thead: {},\n    tbody: {\n      height: 'inherit'\n    },\n    headerRow: {},\n    headerCell: {\n      padding: '0 12px',\n      '&:last-child': {\n        padding: '0 12px'\n      }\n    },\n    checkbox: {},\n    row: {},\n    clickableRow: {\n      cursor: 'pointer'\n    },\n    rowEven: {},\n    rowOdd: {},\n    rowCell: {\n      padding: '0 12px',\n      '&:last-child': {\n        padding: '0 12px'\n      }\n    },\n    expandHeader: {\n      padding: 0,\n      width: 48\n    },\n    expandIconCell: {\n      width: 48\n    },\n    expandIcon: {\n      transform: 'rotate(-90deg)',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest\n      })\n    },\n    expanded: {\n      transform: 'rotate(0deg)'\n    }\n  });\n};\n/**\n * The Datagrid component renders a list of records as a table.\n * It is usually used as a child of the <List> and <ReferenceManyField> components.\n *\n * Props:\n *  - rowStyle\n *\n * @example Display all posts as a datagrid\n * const postRowStyle = (record, index) => ({\n *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',\n * });\n * export const PostList = (props) => (\n *     <List {...props}>\n *         <Datagrid rowStyle={postRowStyle}>\n *             <TextField source=\"id\" />\n *             <TextField source=\"title\" />\n *             <TextField source=\"body\" />\n *             <EditButton />\n *         </Datagrid>\n *     </List>\n * );\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n */\n\n\nvar Datagrid =\n/** @class */\nfunction (_super) {\n  __extends(Datagrid, _super);\n\n  function Datagrid() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.updateSort = function (event) {\n      event.stopPropagation();\n\n      _this.props.setSort(event.currentTarget.dataset.sort);\n    };\n\n    _this.handleSelectAll = function (event) {\n      var _a = _this.props,\n          onSelect = _a.onSelect,\n          ids = _a.ids,\n          selectedIds = _a.selectedIds;\n\n      if (event.target.checked) {\n        onSelect(ids.reduce(function (idList, id) {\n          return idList.includes(id) ? idList : idList.concat(id);\n        }, selectedIds));\n      } else {\n        onSelect([]);\n      }\n    };\n\n    return _this;\n  }\n\n  Datagrid.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        basePath = _a.basePath,\n        body = _a.body,\n        children = _a.children,\n        classes = _a.classes,\n        className = _a.className,\n        currentSort = _a.currentSort,\n        data = _a.data,\n        expand = _a.expand,\n        hasBulkActions = _a.hasBulkActions,\n        hover = _a.hover,\n        ids = _a.ids,\n        isLoading = _a.isLoading,\n        loadedOnce = _a.loadedOnce,\n        onSelect = _a.onSelect,\n        onToggleItem = _a.onToggleItem,\n        resource = _a.resource,\n        rowClick = _a.rowClick,\n        rowStyle = _a.rowStyle,\n        selectedIds = _a.selectedIds,\n        setSort = _a.setSort,\n        total = _a.total,\n        version = _a.version,\n        rest = __rest(_a, [\"basePath\", \"body\", \"children\", \"classes\", \"className\", \"currentSort\", \"data\", \"expand\", \"hasBulkActions\", \"hover\", \"ids\", \"isLoading\", \"loadedOnce\", \"onSelect\", \"onToggleItem\", \"resource\", \"rowClick\", \"rowStyle\", \"selectedIds\", \"setSort\", \"total\", \"version\"]);\n    /**\n     * if loadedOnce is false, the list displays for the first time, and the dataProvider hasn't answered yet\n     * if loadedOnce is true, the data for the list has at least been returned once by the dataProvider\n     * if loadedOnce is undefined, the Datagrid parent doesn't track loading state (e.g. ReferenceArrayField)\n     */\n\n\n    if (loadedOnce === false) {\n      return React.createElement(DatagridLoading, {\n        classes: classes,\n        className: className,\n        expand: expand,\n        hasBulkActions: hasBulkActions,\n        nbChildren: React.Children.count(children)\n      });\n    }\n    /**\n     * Once loaded, the data for the list may be empty. Instead of\n     * displaying the table header with zero data rows,\n     * the datagrid displays nothing in this case.\n     */\n\n\n    if (!isLoading && (ids.length === 0 || total === 0)) {\n      return null;\n    }\n    /**\n     * After the initial load, if the data for the list isn't empty,\n     * and even if the data is refreshing (e.g. after a filter change),\n     * the datagrid displays the current data.\n     */\n\n\n    return React.createElement(Table, __assign({\n      className: classnames(classes.table, className)\n    }, sanitizeListRestProps(rest)), React.createElement(TableHead, {\n      className: classes.thead\n    }, React.createElement(TableRow, {\n      className: classnames(classes.row, classes.headerRow)\n    }, expand && React.createElement(TableCell, {\n      className: classes.expandHeader\n    }), hasBulkActions && React.createElement(TableCell, {\n      padding: \"none\"\n    }, React.createElement(Checkbox, {\n      className: \"select-all\",\n      color: \"primary\",\n      checked: selectedIds.length > 0 && ids.length > 0 && !ids.find(function (it) {\n        return selectedIds.indexOf(it) === -1;\n      }),\n      onChange: this.handleSelectAll\n    })), Children.map(children, function (field, index) {\n      return isValidElement(field) ? React.createElement(DatagridHeaderCell, {\n        className: classes.headerCell,\n        currentSort: currentSort,\n        field: field,\n        isSorting: currentSort.field === (field.props.sortBy || field.props.source),\n        key: field.props.source || index,\n        resource: resource,\n        updateSort: _this.updateSort\n      }) : null;\n    }))), cloneElement(body, {\n      basePath: basePath,\n      className: classes.tbody,\n      classes: classes,\n      expand: expand,\n      rowClick: rowClick,\n      data: data,\n      hasBulkActions: hasBulkActions,\n      hover: hover,\n      ids: ids,\n      isLoading: isLoading,\n      onToggleItem: onToggleItem,\n      resource: resource,\n      rowStyle: rowStyle,\n      selectedIds: selectedIds,\n      version: version\n    }, children));\n  };\n\n  return Datagrid;\n}(Component);\n\nDatagrid.propTypes = {\n  basePath: PropTypes.string,\n  body: PropTypes.element.isRequired,\n  children: PropTypes.node.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  currentSort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.object.isRequired,\n  expand: PropTypes.node,\n  hasBulkActions: PropTypes.bool.isRequired,\n  hover: PropTypes.bool,\n  ids: PropTypes.arrayOf(PropTypes.any).isRequired,\n  isLoading: PropTypes.bool,\n  onSelect: PropTypes.func,\n  onToggleItem: PropTypes.func,\n  resource: PropTypes.string,\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  rowStyle: PropTypes.func,\n  selectedIds: PropTypes.arrayOf(PropTypes.any).isRequired,\n  setSort: PropTypes.func,\n  total: PropTypes.number,\n  version: PropTypes.number\n};\nDatagrid.defaultProps = {\n  data: {},\n  hasBulkActions: false,\n  ids: [],\n  selectedIds: [],\n  body: React.createElement(DatagridBody, null)\n};\nexport default withStyles(styles)(Datagrid);","map":null,"metadata":{},"sourceType":"module"}