{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport { ARRAY_INSERT, ARRAY_MOVE, ARRAY_POP, ARRAY_PUSH, ARRAY_REMOVE, ARRAY_REMOVE_ALL, ARRAY_SHIFT, ARRAY_SPLICE, ARRAY_SWAP, ARRAY_UNSHIFT, AUTOFILL, BLUR, CHANGE, CLEAR_ASYNC_ERROR, CLEAR_SUBMIT, CLEAR_SUBMIT_ERRORS, DESTROY, FOCUS, INITIALIZE, prefix, REGISTER_FIELD, RESET, RESET_SECTION, SET_SUBMIT_FAILED, SET_SUBMIT_SUCCEEDED, START_ASYNC_VALIDATION, START_SUBMIT, STOP_ASYNC_VALIDATION, STOP_SUBMIT, SUBMIT, TOUCH, UNREGISTER_FIELD, UNTOUCH, UPDATE_SYNC_ERRORS, CLEAR_FIELDS, UPDATE_SYNC_WARNINGS } from './actionTypes';\nimport createDeleteInWithCleanUp from './deleteInWithCleanUp';\nimport plain from './structure/plain';\n\nvar shouldDelete = function shouldDelete(_ref) {\n  var getIn = _ref.getIn;\n  return function (state, path) {\n    var initialValuesPath = null;\n\n    if (path.startsWith('values')) {\n      initialValuesPath = path.replace('values', 'initial');\n    }\n\n    var initialValueComparison = initialValuesPath ? getIn(state, initialValuesPath) === undefined : true;\n    return getIn(state, path) !== undefined && initialValueComparison;\n  };\n};\n\nvar isReduxFormAction = function isReduxFormAction(action) {\n  return action && action.type && action.type.length > prefix.length && action.type.substring(0, prefix.length) === prefix;\n};\n\nfunction createReducer(structure) {\n  var _behaviors;\n\n  var deepEqual = structure.deepEqual,\n      empty = structure.empty,\n      forEach = structure.forEach,\n      getIn = structure.getIn,\n      setIn = structure.setIn,\n      deleteIn = structure.deleteIn,\n      fromJS = structure.fromJS,\n      keys = structure.keys,\n      size = structure.size,\n      some = structure.some,\n      splice = structure.splice;\n  var deleteInWithCleanUp = createDeleteInWithCleanUp(structure)(shouldDelete);\n  var plainDeleteInWithCleanUp = createDeleteInWithCleanUp(plain)(shouldDelete);\n\n  var doSplice = function doSplice(state, key, field, index, removeNum, value, force) {\n    var existing = getIn(state, key + '.' + field);\n    return existing || force ? setIn(state, key + '.' + field, splice(existing, index, removeNum, value)) : state;\n  };\n\n  var doPlainSplice = function doPlainSplice(state, key, field, index, removeNum, value, force) {\n    var slice = getIn(state, key);\n    var existing = plain.getIn(slice, field);\n    return existing || force ? setIn(state, key, plain.setIn(slice, field, plain.splice(existing, index, removeNum, value))) : state;\n  };\n\n  var rootKeys = ['values', 'fields', 'submitErrors', 'asyncErrors'];\n\n  var arraySplice = function arraySplice(state, field, index, removeNum, value) {\n    var result = state;\n    var nonValuesValue = value != null ? empty : undefined;\n    result = doSplice(result, 'values', field, index, removeNum, value, true);\n    result = doSplice(result, 'fields', field, index, removeNum, nonValuesValue);\n    result = doPlainSplice(result, 'syncErrors', field, index, removeNum, undefined);\n    result = doPlainSplice(result, 'syncWarnings', field, index, removeNum, undefined);\n    result = doSplice(result, 'submitErrors', field, index, removeNum, undefined);\n    result = doSplice(result, 'asyncErrors', field, index, removeNum, undefined);\n    return result;\n  };\n\n  var behaviors = (_behaviors = {}, _defineProperty(_behaviors, ARRAY_INSERT, function (state, _ref2) {\n    var _ref2$meta = _ref2.meta,\n        field = _ref2$meta.field,\n        index = _ref2$meta.index,\n        payload = _ref2.payload;\n    return arraySplice(state, field, index, 0, payload);\n  }), _defineProperty(_behaviors, ARRAY_MOVE, function (state, _ref3) {\n    var _ref3$meta = _ref3.meta,\n        field = _ref3$meta.field,\n        from = _ref3$meta.from,\n        to = _ref3$meta.to;\n    var array = getIn(state, 'values.' + field);\n    var length = array ? size(array) : 0;\n    var result = state;\n\n    if (length) {\n      rootKeys.forEach(function (key) {\n        var path = key + '.' + field;\n\n        if (getIn(result, path)) {\n          var value = getIn(result, path + '[' + from + ']');\n          result = setIn(result, path, splice(getIn(result, path), from, 1)); // remove\n\n          result = setIn(result, path, splice(getIn(result, path), to, 0, value)); // insert\n        }\n      });\n    }\n\n    return result;\n  }), _defineProperty(_behaviors, ARRAY_POP, function (state, _ref4) {\n    var field = _ref4.meta.field;\n    var array = getIn(state, 'values.' + field);\n    var length = array ? size(array) : 0;\n    return length ? arraySplice(state, field, length - 1, 1) : state;\n  }), _defineProperty(_behaviors, ARRAY_PUSH, function (state, _ref5) {\n    var field = _ref5.meta.field,\n        payload = _ref5.payload;\n    var array = getIn(state, 'values.' + field);\n    var length = array ? size(array) : 0;\n    return arraySplice(state, field, length, 0, payload);\n  }), _defineProperty(_behaviors, ARRAY_REMOVE, function (state, _ref6) {\n    var _ref6$meta = _ref6.meta,\n        field = _ref6$meta.field,\n        index = _ref6$meta.index;\n    return arraySplice(state, field, index, 1);\n  }), _defineProperty(_behaviors, ARRAY_REMOVE_ALL, function (state, _ref7) {\n    var field = _ref7.meta.field;\n    var array = getIn(state, 'values.' + field);\n    var length = array ? size(array) : 0;\n    return length ? arraySplice(state, field, 0, length) : state;\n  }), _defineProperty(_behaviors, ARRAY_SHIFT, function (state, _ref8) {\n    var field = _ref8.meta.field;\n    return arraySplice(state, field, 0, 1);\n  }), _defineProperty(_behaviors, ARRAY_SPLICE, function (state, _ref9) {\n    var _ref9$meta = _ref9.meta,\n        field = _ref9$meta.field,\n        index = _ref9$meta.index,\n        removeNum = _ref9$meta.removeNum,\n        payload = _ref9.payload;\n    return arraySplice(state, field, index, removeNum, payload);\n  }), _defineProperty(_behaviors, ARRAY_SWAP, function (state, _ref10) {\n    var _ref10$meta = _ref10.meta,\n        field = _ref10$meta.field,\n        indexA = _ref10$meta.indexA,\n        indexB = _ref10$meta.indexB;\n    var result = state;\n    rootKeys.forEach(function (key) {\n      var valueA = getIn(result, key + '.' + field + '[' + indexA + ']');\n      var valueB = getIn(result, key + '.' + field + '[' + indexB + ']');\n\n      if (valueA !== undefined || valueB !== undefined) {\n        result = setIn(result, key + '.' + field + '[' + indexA + ']', valueB);\n        result = setIn(result, key + '.' + field + '[' + indexB + ']', valueA);\n      }\n    });\n    return result;\n  }), _defineProperty(_behaviors, ARRAY_UNSHIFT, function (state, _ref11) {\n    var field = _ref11.meta.field,\n        payload = _ref11.payload;\n    return arraySplice(state, field, 0, 0, payload);\n  }), _defineProperty(_behaviors, AUTOFILL, function (state, _ref12) {\n    var field = _ref12.meta.field,\n        payload = _ref12.payload;\n    var result = state;\n    result = deleteInWithCleanUp(result, 'asyncErrors.' + field);\n    result = deleteInWithCleanUp(result, 'submitErrors.' + field);\n    result = setIn(result, 'fields.' + field + '.autofilled', true);\n    result = setIn(result, 'values.' + field, payload);\n    return result;\n  }), _defineProperty(_behaviors, BLUR, function (state, _ref13) {\n    var _ref13$meta = _ref13.meta,\n        field = _ref13$meta.field,\n        touch = _ref13$meta.touch,\n        payload = _ref13.payload;\n    var result = state;\n    var initial = getIn(result, 'initial.' + field);\n\n    if (initial === undefined && payload === '') {\n      result = deleteInWithCleanUp(result, 'values.' + field);\n    } else if (payload !== undefined) {\n      result = setIn(result, 'values.' + field, payload);\n    }\n\n    if (field === getIn(result, 'active')) {\n      result = deleteIn(result, 'active');\n    }\n\n    result = deleteIn(result, 'fields.' + field + '.active');\n\n    if (touch) {\n      result = setIn(result, 'fields.' + field + '.touched', true);\n      result = setIn(result, 'anyTouched', true);\n    }\n\n    return result;\n  }), _defineProperty(_behaviors, CHANGE, function (state, _ref14) {\n    var _ref14$meta = _ref14.meta,\n        field = _ref14$meta.field,\n        touch = _ref14$meta.touch,\n        persistentSubmitErrors = _ref14$meta.persistentSubmitErrors,\n        payload = _ref14.payload;\n    var result = state;\n    var initial = getIn(result, 'initial.' + field);\n\n    if (initial === undefined && payload === '') {\n      result = deleteInWithCleanUp(result, 'values.' + field);\n    } else if (payload !== undefined) {\n      result = setIn(result, 'values.' + field, payload);\n    }\n\n    result = deleteInWithCleanUp(result, 'asyncErrors.' + field);\n\n    if (!persistentSubmitErrors) {\n      result = deleteInWithCleanUp(result, 'submitErrors.' + field);\n    }\n\n    result = deleteInWithCleanUp(result, 'fields.' + field + '.autofilled');\n\n    if (touch) {\n      result = setIn(result, 'fields.' + field + '.touched', true);\n      result = setIn(result, 'anyTouched', true);\n    }\n\n    return result;\n  }), _defineProperty(_behaviors, CLEAR_SUBMIT, function (state) {\n    return deleteIn(state, 'triggerSubmit');\n  }), _defineProperty(_behaviors, CLEAR_SUBMIT_ERRORS, function (state) {\n    var result = state;\n    result = deleteInWithCleanUp(result, 'submitErrors');\n    result = deleteIn(result, 'error');\n    return result;\n  }), _defineProperty(_behaviors, CLEAR_ASYNC_ERROR, function (state, _ref15) {\n    var field = _ref15.meta.field;\n    return deleteIn(state, 'asyncErrors.' + field);\n  }), _defineProperty(_behaviors, CLEAR_FIELDS, function (state, _ref16) {\n    var _ref16$meta = _ref16.meta,\n        keepTouched = _ref16$meta.keepTouched,\n        persistentSubmitErrors = _ref16$meta.persistentSubmitErrors,\n        fields = _ref16$meta.fields;\n    var result = state;\n    fields.forEach(function (field) {\n      result = deleteInWithCleanUp(result, 'values.' + field);\n      result = deleteInWithCleanUp(result, 'asyncErrors.' + field);\n\n      if (!persistentSubmitErrors) {\n        result = deleteInWithCleanUp(result, 'submitErrors.' + field);\n      }\n\n      result = deleteInWithCleanUp(result, 'fields.' + field + '.autofilled');\n\n      if (!keepTouched) {\n        result = deleteIn(result, 'fields.' + field + '.touched');\n      }\n    });\n    var anyTouched = some(keys(getIn(result, 'registeredFields')), function (key) {\n      return getIn(result, 'fields.' + key + '.touched');\n    });\n    result = anyTouched ? setIn(result, 'anyTouched', true) : deleteIn(result, 'anyTouched');\n    return result;\n  }), _defineProperty(_behaviors, FOCUS, function (state, _ref17) {\n    var field = _ref17.meta.field;\n    var result = state;\n    var previouslyActive = getIn(state, 'active');\n    result = deleteIn(result, 'fields.' + previouslyActive + '.active');\n    result = setIn(result, 'fields.' + field + '.visited', true);\n    result = setIn(result, 'fields.' + field + '.active', true);\n    result = setIn(result, 'active', field);\n    return result;\n  }), _defineProperty(_behaviors, INITIALIZE, function (state, _ref18) {\n    var payload = _ref18.payload,\n        _ref18$meta = _ref18.meta,\n        keepDirty = _ref18$meta.keepDirty,\n        keepSubmitSucceeded = _ref18$meta.keepSubmitSucceeded,\n        updateUnregisteredFields = _ref18$meta.updateUnregisteredFields,\n        keepValues = _ref18$meta.keepValues;\n    var mapData = fromJS(payload);\n    var result = empty; // clean all field state\n    // persist old warnings, they will get recalculated if the new form values are different from the old values\n\n    var warning = getIn(state, 'warning');\n\n    if (warning) {\n      result = setIn(result, 'warning', warning);\n    }\n\n    var syncWarnings = getIn(state, 'syncWarnings');\n\n    if (syncWarnings) {\n      result = setIn(result, 'syncWarnings', syncWarnings);\n    } // persist old errors, they will get recalculated if the new form values are different from the old values\n\n\n    var error = getIn(state, 'error');\n\n    if (error) {\n      result = setIn(result, 'error', error);\n    }\n\n    var syncErrors = getIn(state, 'syncErrors');\n\n    if (syncErrors) {\n      result = setIn(result, 'syncErrors', syncErrors);\n    }\n\n    var registeredFields = getIn(state, 'registeredFields');\n\n    if (registeredFields) {\n      result = setIn(result, 'registeredFields', registeredFields);\n    }\n\n    var previousValues = getIn(state, 'values');\n    var previousInitialValues = getIn(state, 'initial');\n    var newInitialValues = mapData;\n    var newValues = previousValues;\n\n    if (keepDirty && registeredFields) {\n      if (!deepEqual(newInitialValues, previousInitialValues)) {\n        //\n        // Keep the value of dirty fields while updating the value of\n        // pristine fields. This way, apps can reinitialize forms while\n        // avoiding stomping on user edits.\n        //\n        // Note 1: The initialize action replaces all initial values\n        // regardless of keepDirty.\n        //\n        // Note 2: When a field is dirty, keepDirty is enabled, and the field\n        // value is the same as the new initial value for the field, the\n        // initialize action causes the field to become pristine. That effect\n        // is what we want.\n        //\n        var overwritePristineValue = function overwritePristineValue(name) {\n          var previousInitialValue = getIn(previousInitialValues, name);\n          var previousValue = getIn(previousValues, name);\n\n          if (deepEqual(previousValue, previousInitialValue)) {\n            // Overwrite the old pristine value with the new pristine value\n            var newInitialValue = getIn(newInitialValues, name); // This check prevents any 'setIn' call that would create useless\n            // nested objects, since the path to the new field value would\n            // evaluate to the same (especially for undefined values)\n\n            if (getIn(newValues, name) !== newInitialValue) {\n              newValues = setIn(newValues, name, newInitialValue);\n            }\n          }\n        };\n\n        if (!updateUnregisteredFields) {\n          forEach(keys(registeredFields), function (name) {\n            return overwritePristineValue(name);\n          });\n        }\n\n        forEach(keys(newInitialValues), function (name) {\n          var previousInitialValue = getIn(previousInitialValues, name);\n\n          if (typeof previousInitialValue === 'undefined') {\n            // Add new values at the root level.\n            var newInitialValue = getIn(newInitialValues, name);\n            newValues = setIn(newValues, name, newInitialValue);\n          }\n\n          if (updateUnregisteredFields) {\n            overwritePristineValue(name);\n          }\n        });\n      }\n    } else {\n      newValues = newInitialValues;\n    }\n\n    if (keepValues) {\n      forEach(keys(previousValues), function (name) {\n        var previousValue = getIn(previousValues, name);\n        newValues = setIn(newValues, name, previousValue);\n      });\n      forEach(keys(previousInitialValues), function (name) {\n        var previousInitialValue = getIn(previousInitialValues, name);\n        newInitialValues = setIn(newInitialValues, name, previousInitialValue);\n      });\n    }\n\n    if (keepSubmitSucceeded && getIn(state, 'submitSucceeded')) {\n      result = setIn(result, 'submitSucceeded', true);\n    }\n\n    result = setIn(result, 'values', newValues);\n    result = setIn(result, 'initial', newInitialValues);\n    return result;\n  }), _defineProperty(_behaviors, REGISTER_FIELD, function (state, _ref19) {\n    var _ref19$payload = _ref19.payload,\n        name = _ref19$payload.name,\n        type = _ref19$payload.type;\n    var key = 'registeredFields[\\'' + name + '\\']';\n    var field = getIn(state, key);\n\n    if (field) {\n      var count = getIn(field, 'count') + 1;\n      field = setIn(field, 'count', count);\n    } else {\n      field = fromJS({\n        name: name,\n        type: type,\n        count: 1\n      });\n    }\n\n    return setIn(state, key, field);\n  }), _defineProperty(_behaviors, RESET, function (state) {\n    var result = empty;\n    var registeredFields = getIn(state, 'registeredFields');\n\n    if (registeredFields) {\n      result = setIn(result, 'registeredFields', registeredFields);\n    }\n\n    var values = getIn(state, 'initial');\n\n    if (values) {\n      result = setIn(result, 'values', values);\n      result = setIn(result, 'initial', values);\n    }\n\n    return result;\n  }), _defineProperty(_behaviors, RESET_SECTION, function (state, _ref20) {\n    var sections = _ref20.meta.sections;\n    var result = state;\n    sections.forEach(function (section) {\n      result = deleteInWithCleanUp(result, 'asyncErrors.' + section);\n      result = deleteInWithCleanUp(result, 'submitErrors.' + section);\n      result = deleteInWithCleanUp(result, 'fields.' + section);\n      var values = getIn(state, 'initial.' + section);\n      result = values ? setIn(result, 'values.' + section, values) : deleteInWithCleanUp(result, 'values.' + section);\n    });\n    var anyTouched = some(keys(getIn(result, 'registeredFields')), function (key) {\n      return getIn(result, 'fields.' + key + '.touched');\n    });\n    result = anyTouched ? setIn(result, 'anyTouched', true) : deleteIn(result, 'anyTouched');\n    return result;\n  }), _defineProperty(_behaviors, SUBMIT, function (state) {\n    return setIn(state, 'triggerSubmit', true);\n  }), _defineProperty(_behaviors, START_ASYNC_VALIDATION, function (state, _ref21) {\n    var field = _ref21.meta.field;\n    return setIn(state, 'asyncValidating', field || true);\n  }), _defineProperty(_behaviors, START_SUBMIT, function (state) {\n    return setIn(state, 'submitting', true);\n  }), _defineProperty(_behaviors, STOP_ASYNC_VALIDATION, function (state, _ref22) {\n    var payload = _ref22.payload;\n    var result = state;\n    result = deleteIn(result, 'asyncValidating');\n\n    if (payload && Object.keys(payload).length) {\n      var _error = payload._error,\n          fieldErrors = _objectWithoutProperties(payload, ['_error']);\n\n      if (_error) {\n        result = setIn(result, 'error', _error);\n      }\n\n      if (Object.keys(fieldErrors).length) {\n        result = setIn(result, 'asyncErrors', fromJS(fieldErrors));\n      }\n    } else {\n      result = deleteIn(result, 'error');\n      result = deleteIn(result, 'asyncErrors');\n    }\n\n    return result;\n  }), _defineProperty(_behaviors, STOP_SUBMIT, function (state, _ref23) {\n    var payload = _ref23.payload;\n    var result = state;\n    result = deleteIn(result, 'submitting');\n    result = deleteIn(result, 'submitFailed');\n    result = deleteIn(result, 'submitSucceeded');\n\n    if (payload && Object.keys(payload).length) {\n      var _error = payload._error,\n          fieldErrors = _objectWithoutProperties(payload, ['_error']);\n\n      if (_error) {\n        result = setIn(result, 'error', _error);\n      } else {\n        result = deleteIn(result, 'error');\n      }\n\n      if (Object.keys(fieldErrors).length) {\n        result = setIn(result, 'submitErrors', fromJS(fieldErrors));\n      } else {\n        result = deleteIn(result, 'submitErrors');\n      }\n\n      result = setIn(result, 'submitFailed', true);\n    } else {\n      result = deleteIn(result, 'error');\n      result = deleteIn(result, 'submitErrors');\n    }\n\n    return result;\n  }), _defineProperty(_behaviors, SET_SUBMIT_FAILED, function (state, _ref24) {\n    var fields = _ref24.meta.fields;\n    var result = state;\n    result = setIn(result, 'submitFailed', true);\n    result = deleteIn(result, 'submitSucceeded');\n    result = deleteIn(result, 'submitting');\n    fields.forEach(function (field) {\n      return result = setIn(result, 'fields.' + field + '.touched', true);\n    });\n\n    if (fields.length) {\n      result = setIn(result, 'anyTouched', true);\n    }\n\n    return result;\n  }), _defineProperty(_behaviors, SET_SUBMIT_SUCCEEDED, function (state) {\n    var result = state;\n    result = deleteIn(result, 'submitFailed');\n    result = setIn(result, 'submitSucceeded', true);\n    return result;\n  }), _defineProperty(_behaviors, TOUCH, function (state, _ref25) {\n    var fields = _ref25.meta.fields;\n    var result = state;\n    fields.forEach(function (field) {\n      return result = setIn(result, 'fields.' + field + '.touched', true);\n    });\n    result = setIn(result, 'anyTouched', true);\n    return result;\n  }), _defineProperty(_behaviors, UNREGISTER_FIELD, function (state, _ref26) {\n    var _ref26$payload = _ref26.payload,\n        name = _ref26$payload.name,\n        destroyOnUnmount = _ref26$payload.destroyOnUnmount;\n    var result = state;\n    var key = 'registeredFields[\\'' + name + '\\']';\n    var field = getIn(result, key);\n\n    if (!field) {\n      return result;\n    }\n\n    var count = getIn(field, 'count') - 1;\n\n    if (count <= 0 && destroyOnUnmount) {\n      // Note: Cannot use deleteWithCleanUp here because of the flat nature of registeredFields\n      result = deleteIn(result, key);\n\n      if (deepEqual(getIn(result, 'registeredFields'), empty)) {\n        result = deleteIn(result, 'registeredFields');\n      }\n\n      var syncErrors = getIn(result, 'syncErrors');\n\n      if (syncErrors) {\n        syncErrors = plainDeleteInWithCleanUp(syncErrors, name);\n\n        if (plain.deepEqual(syncErrors, plain.empty)) {\n          result = deleteIn(result, 'syncErrors');\n        } else {\n          result = setIn(result, 'syncErrors', syncErrors);\n        }\n      }\n\n      var syncWarnings = getIn(result, 'syncWarnings');\n\n      if (syncWarnings) {\n        syncWarnings = plainDeleteInWithCleanUp(syncWarnings, name);\n\n        if (plain.deepEqual(syncWarnings, plain.empty)) {\n          result = deleteIn(result, 'syncWarnings');\n        } else {\n          result = setIn(result, 'syncWarnings', syncWarnings);\n        }\n      }\n\n      result = deleteInWithCleanUp(result, 'submitErrors.' + name);\n      result = deleteInWithCleanUp(result, 'asyncErrors.' + name);\n    } else {\n      field = setIn(field, 'count', count);\n      result = setIn(result, key, field);\n    }\n\n    return result;\n  }), _defineProperty(_behaviors, UNTOUCH, function (state, _ref27) {\n    var fields = _ref27.meta.fields;\n    var result = state;\n    fields.forEach(function (field) {\n      return result = deleteIn(result, 'fields.' + field + '.touched');\n    });\n    var anyTouched = some(keys(getIn(result, 'registeredFields')), function (key) {\n      return getIn(result, 'fields.' + key + '.touched');\n    });\n    result = anyTouched ? setIn(result, 'anyTouched', true) : deleteIn(result, 'anyTouched');\n    return result;\n  }), _defineProperty(_behaviors, UPDATE_SYNC_ERRORS, function (state, _ref28) {\n    var _ref28$payload = _ref28.payload,\n        syncErrors = _ref28$payload.syncErrors,\n        error = _ref28$payload.error;\n    var result = state;\n\n    if (error) {\n      result = setIn(result, 'error', error);\n      result = setIn(result, 'syncError', true);\n    } else {\n      result = deleteIn(result, 'error');\n      result = deleteIn(result, 'syncError');\n    }\n\n    if (Object.keys(syncErrors).length) {\n      result = setIn(result, 'syncErrors', syncErrors);\n    } else {\n      result = deleteIn(result, 'syncErrors');\n    }\n\n    return result;\n  }), _defineProperty(_behaviors, UPDATE_SYNC_WARNINGS, function (state, _ref29) {\n    var _ref29$payload = _ref29.payload,\n        syncWarnings = _ref29$payload.syncWarnings,\n        warning = _ref29$payload.warning;\n    var result = state;\n\n    if (warning) {\n      result = setIn(result, 'warning', warning);\n    } else {\n      result = deleteIn(result, 'warning');\n    }\n\n    if (Object.keys(syncWarnings).length) {\n      result = setIn(result, 'syncWarnings', syncWarnings);\n    } else {\n      result = deleteIn(result, 'syncWarnings');\n    }\n\n    return result;\n  }), _behaviors);\n\n  var reducer = function reducer() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : empty;\n    var action = arguments[1];\n    var behavior = behaviors[action.type];\n    return behavior ? behavior(state, action) : state;\n  };\n\n  var byForm = function byForm(reducer) {\n    return function () {\n      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : empty;\n      var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        type: 'NONE'\n      };\n      var form = action && action.meta && action.meta.form;\n\n      if (!form || !isReduxFormAction(action)) {\n        return state;\n      }\n\n      if (action.type === DESTROY && action.meta && action.meta.form) {\n        return action.meta.form.reduce(function (result, form) {\n          return deleteInWithCleanUp(result, form);\n        }, state);\n      }\n\n      var formState = getIn(state, form);\n      var result = reducer(formState, action);\n      return result === formState ? state : setIn(state, form, result);\n    };\n  };\n  /**\n   * Adds additional functionality to the reducer\n   */\n\n\n  function decorate(target) {\n    target.plugin = function (reducers) {\n      var _this = this; // use 'function' keyword to enable 'this'\n\n\n      return decorate(function () {\n        var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : empty;\n        var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n          type: 'NONE'\n        };\n\n        var callPlugin = function callPlugin(processed, key) {\n          var previousState = getIn(processed, key);\n          var nextState = reducers[key](previousState, action, getIn(state, key));\n          return nextState !== previousState ? setIn(processed, key, nextState) : processed;\n        };\n\n        var processed = _this(state, action); // run through redux-form reducer\n\n\n        var form = action && action.meta && action.meta.form;\n\n        if (form) {\n          // this is an action aimed at forms, so only give it to the specified form's plugin\n          return reducers[form] ? callPlugin(processed, form) : processed;\n        } else {\n          // this is not a form-specific action, so send it to all the plugins\n          return Object.keys(reducers).reduce(callPlugin, processed);\n        }\n      });\n    };\n\n    return target;\n  }\n\n  return decorate(byForm(reducer));\n}\n\nexport default createReducer;","map":null,"metadata":{},"sourceType":"module"}