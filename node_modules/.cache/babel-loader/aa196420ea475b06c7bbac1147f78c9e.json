{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport { push } from 'react-router-redux';\nimport IconButton from '@material-ui/core/IconButton';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport classnames from 'classnames';\nimport { linkToRecord } from 'ra-core';\nimport DatagridCell from './DatagridCell';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var basePath = _a.basePath,\n      children = _a.children,\n      classes = _a.classes,\n      className = _a.className,\n      rowClick = _a.rowClick,\n      id = _a.id,\n      isLoading = _a.isLoading,\n      onToggleItem = _a.onToggleItem,\n      push = _a.push,\n      record = _a.record,\n      resource = _a.resource,\n      selected = _a.selected,\n      style = _a.style,\n      styles = _a.styles,\n      rest = __rest(_a, [\"basePath\", \"children\", \"classes\", \"className\", \"rowClick\", \"id\", \"isLoading\", \"onToggleItem\", \"push\", \"record\", \"resource\", \"selected\", \"style\", \"styles\"]);\n\n  return rest;\n};\n\nvar DatagridRow =\n/** @class */\nfunction (_super) {\n  __extends(DatagridRow, _super);\n\n  function DatagridRow(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.coomponentDidUpdate = function (prevProps, prevState) {\n      var colSpan = _this.computeColSpan(_this.props);\n\n      if (colSpan !== prevState.colSpan) {\n        _this.setState({\n          colspan: colspan\n        });\n      }\n    };\n\n    _this.handleToggleExpanded = function (event) {\n      _this.setState(function (state) {\n        return {\n          expanded: !state.expanded\n        };\n      });\n\n      event.stopPropagation();\n    };\n\n    _this.handleToggle = function (event) {\n      _this.props.onToggleItem(_this.props.id);\n\n      event.stopPropagation();\n    };\n\n    _this.handleClick = function (event) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, basePath, rowClick, id, record, path;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              _a = this.props, basePath = _a.basePath, rowClick = _a.rowClick, id = _a.id, record = _a.record;\n              if (!rowClick) return [2\n              /*return*/\n              ];\n              if (!(typeof rowClick === 'function')) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , rowClick(id, basePath, record)];\n\n            case 1:\n              path = _b.sent();\n              this.handleRedirection(path, event);\n              return [2\n              /*return*/\n              ];\n\n            case 2:\n              this.handleRedirection(rowClick, event);\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    _this.handleRedirection = function (path, event) {\n      var _a = _this.props,\n          basePath = _a.basePath,\n          id = _a.id,\n          push = _a.push;\n\n      if (path === 'edit') {\n        push(linkToRecord(basePath, id));\n        return;\n      }\n\n      if (path === 'show') {\n        push(linkToRecord(basePath, id, 'show'));\n        return;\n      }\n\n      if (path == 'expand') {\n        _this.handleToggleExpanded(event);\n\n        return;\n      }\n\n      push(path);\n    };\n\n    _this.computeColSpan = function (props) {\n      var children = props.children,\n          hasBulkActions = props.hasBulkActions;\n      return 1 + ( // show expand button\n      hasBulkActions ? 1 : 0) + // checkbox column\n      React.Children.toArray(children).filter(function (child) {\n        return !!child;\n      }).length // non-null children\n      ;\n    };\n\n    _this.state = {\n      expanded: false,\n      colSpan: _this.computeColSpan(props)\n    };\n    return _this;\n  }\n\n  DatagridRow.prototype.render = function () {\n    var _a;\n\n    var _b = this.props,\n        basePath = _b.basePath,\n        children = _b.children,\n        classes = _b.classes,\n        className = _b.className,\n        expand = _b.expand,\n        hasBulkActions = _b.hasBulkActions,\n        hover = _b.hover,\n        id = _b.id,\n        record = _b.record,\n        resource = _b.resource,\n        selected = _b.selected,\n        style = _b.style,\n        styles = _b.styles,\n        rest = __rest(_b, [\"basePath\", \"children\", \"classes\", \"className\", \"expand\", \"hasBulkActions\", \"hover\", \"id\", \"record\", \"resource\", \"selected\", \"style\", \"styles\"]);\n\n    var _c = this.state,\n        expanded = _c.expanded,\n        colSpan = _c.colSpan;\n    return React.createElement(Fragment, null, React.createElement(TableRow, __assign({\n      className: className,\n      key: id,\n      style: style,\n      hover: hover,\n      onClick: this.handleClick\n    }, sanitizeRestProps(rest)), expand && React.createElement(TableCell, {\n      padding: \"none\",\n      className: classes.expandIconCell\n    }, React.createElement(IconButton, {\n      className: classNames(classes.expandIcon, (_a = {}, _a[classes.expanded] = expanded, _a)),\n      component: \"div\",\n      tabIndex: -1,\n      \"aria-hidden\": \"true\",\n      role: \"expand\",\n      onClick: this.handleToggleExpanded\n    }, React.createElement(ExpandMoreIcon, null))), hasBulkActions && React.createElement(TableCell, {\n      padding: \"none\"\n    }, React.createElement(Checkbox, {\n      color: \"primary\",\n      className: \"select-item \" + classes.checkbox,\n      checked: selected,\n      onClick: this.handleToggle\n    })), React.Children.map(children, function (field, index) {\n      return field ? React.createElement(DatagridCell, __assign({\n        key: id + \"-\" + (field.props.source || index),\n        className: classnames(\"column-\" + field.props.source, classes.rowCell),\n        record: record,\n        id: id\n      }, {\n        field: field,\n        basePath: basePath,\n        resource: resource\n      })) : null;\n    })), expand && expanded && React.createElement(TableRow, {\n      key: id + \"-expand\"\n    }, React.createElement(TableCell, {\n      colSpan: colSpan,\n      role: \"expand-content\"\n    }, React.cloneElement(expand, {\n      record: record,\n      basePath: basePath,\n      resource: resource,\n      id: String(id)\n    }))));\n  };\n\n  return DatagridRow;\n}(Component);\n\nDatagridRow.propTypes = {\n  basePath: PropTypes.string,\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  expand: PropTypes.node,\n  hasBulkActions: PropTypes.bool.isRequired,\n  hover: PropTypes.bool,\n  id: PropTypes.any,\n  onToggleItem: PropTypes.func,\n  push: PropTypes.func,\n  record: PropTypes.object.isRequired,\n  resource: PropTypes.string,\n  rowClick: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  selected: PropTypes.bool,\n  style: PropTypes.object,\n  styles: PropTypes.object\n};\nDatagridRow.defaultProps = {\n  hasBulkActions: false,\n  hover: true,\n  record: {},\n  selected: false\n}; // wat? TypeScript looses the displayName if we don't set it explicitly\n\nDatagridRow.displayName = 'DatagridRow';\nexport default connect(null, {\n  push: push\n})(DatagridRow);","map":null,"metadata":{},"sourceType":"module"}