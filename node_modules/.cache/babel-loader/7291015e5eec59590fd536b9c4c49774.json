{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Input from '@material-ui/core/Input';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Chip from '@material-ui/core/Chip';\nimport { withStyles } from '@material-ui/core/styles';\nimport compose from 'recompose/compose';\nimport classnames from 'classnames';\nimport { addField, translate, FieldTitle } from 'ra-core';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var addLabel = _a.addLabel,\n      allowEmpty = _a.allowEmpty,\n      basePath = _a.basePath,\n      choices = _a.choices,\n      className = _a.className,\n      component = _a.component,\n      crudGetMatching = _a.crudGetMatching,\n      crudGetOne = _a.crudGetOne,\n      defaultValue = _a.defaultValue,\n      filter = _a.filter,\n      filterToQuery = _a.filterToQuery,\n      formClassName = _a.formClassName,\n      initializeForm = _a.initializeForm,\n      input = _a.input,\n      isRequired = _a.isRequired,\n      label = _a.label,\n      limitChoicesToValue = _a.limitChoicesToValue,\n      locale = _a.locale,\n      meta = _a.meta,\n      onChange = _a.onChange,\n      options = _a.options,\n      optionValue = _a.optionValue,\n      optionText = _a.optionText,\n      perPage = _a.perPage,\n      record = _a.record,\n      reference = _a.reference,\n      resource = _a.resource,\n      setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      sort = _a.sort,\n      source = _a.source,\n      textAlign = _a.textAlign,\n      translate = _a.translate,\n      translateChoice = _a.translateChoice,\n      validation = _a.validation,\n      rest = __rest(_a, [\"addLabel\", \"allowEmpty\", \"basePath\", \"choices\", \"className\", \"component\", \"crudGetMatching\", \"crudGetOne\", \"defaultValue\", \"filter\", \"filterToQuery\", \"formClassName\", \"initializeForm\", \"input\", \"isRequired\", \"label\", \"limitChoicesToValue\", \"locale\", \"meta\", \"onChange\", \"options\", \"optionValue\", \"optionText\", \"perPage\", \"record\", \"reference\", \"resource\", \"setFilter\", \"setPagination\", \"setSort\", \"sort\", \"source\", \"textAlign\", \"translate\", \"translateChoice\", \"validation\"]);\n\n  return rest;\n};\n\nvar styles = function styles(theme) {\n  return {\n    root: {},\n    chips: {\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    chip: {\n      margin: theme.spacing.unit / 4\n    },\n    select: {\n      height: 'auto',\n      overflow: 'auto'\n    }\n  };\n};\n/**\n * An Input component for a select box allowing multiple selections, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *    { id: 'programming', name: 'Programming' },\n *    { id: 'lifestyle', name: 'Lifestyle' },\n *    { id: 'photography', name: 'Photography' },\n * ];\n * <SelectArrayInput source=\"tags\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectArrayInput source=\"authors\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <SelectArrayInput source=\"authors\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.tags.programming' },\n *    { id: 'lifestyle', name: 'myroot.tags.lifestyle' },\n *    { id: 'photography', name: 'myroot.tags.photography' },\n * ];\n */\n\n\nvar SelectArrayInput =\n/** @class */\nfunction (_super) {\n  __extends(SelectArrayInput, _super);\n\n  function SelectArrayInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /*\n     * Using state to bypass a redux-form comparison but which prevents re-rendering\n     * @see https://github.com/erikras/redux-form/issues/2456\n     */\n\n\n    _this.state = {\n      value: _this.props.input.value || []\n    };\n\n    _this.handleChange = function (event) {\n      _this.props.input.onChange(event.target.value); // HACK: For some reason, redux-form does not consider this input touched without calling onBlur manually\n\n\n      _this.props.input.onBlur(event.target.value);\n\n      _this.setState({\n        value: event.target.value\n      });\n    };\n\n    _this.renderMenuItemOption = function (choice) {\n      var _a = _this.props,\n          optionText = _a.optionText,\n          translate = _a.translate,\n          translateChoice = _a.translateChoice;\n      if (React.isValidElement(optionText)) return React.cloneElement(optionText, {\n        record: choice\n      });\n      var choiceName = typeof optionText === 'function' ? optionText(choice) : get(choice, optionText);\n      return translateChoice ? translate(choiceName, {\n        _: choiceName\n      }) : choiceName;\n    };\n\n    _this.renderMenuItem = function (choice) {\n      var optionValue = _this.props.optionValue;\n      return React.createElement(MenuItem, {\n        key: get(choice, optionValue),\n        value: get(choice, optionValue)\n      }, _this.renderMenuItemOption(choice));\n    };\n\n    return _this;\n  }\n\n  SelectArrayInput.prototype.componentWillReceiveProps = function (nextProps) {\n    if (nextProps.input.value !== this.props.input.value) {\n      this.setState({\n        value: nextProps.input.value || []\n      });\n    }\n  };\n\n  SelectArrayInput.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        choices = _a.choices,\n        classes = _a.classes,\n        className = _a.className,\n        isRequired = _a.isRequired,\n        label = _a.label,\n        meta = _a.meta,\n        options = _a.options,\n        resource = _a.resource,\n        source = _a.source,\n        optionText = _a.optionText,\n        optionValue = _a.optionValue,\n        rest = __rest(_a, [\"choices\", \"classes\", \"className\", \"isRequired\", \"label\", \"meta\", \"options\", \"resource\", \"source\", \"optionText\", \"optionValue\"]);\n\n    if (typeof meta === 'undefined') {\n      throw new Error(\"The SelectInput component wasn't called within a redux-form <Field>. Did you decorate it and forget to add the addField prop to your component? See https://marmelab.com/react-admin/Inputs.html#writing-your-own-input-component for details.\");\n    }\n\n    var touched = meta.touched,\n        error = meta.error,\n        _b = meta.helperText,\n        helperText = _b === void 0 ? false : _b;\n    return React.createElement(FormControl, __assign({\n      margin: \"normal\",\n      className: classnames(classes.root, className),\n      error: !!(touched && error)\n    }, sanitizeRestProps(rest)), React.createElement(InputLabel, {\n      htmlFor: source\n    }, React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    })), React.createElement(Select, __assign({\n      autoWidth: true,\n      multiple: true,\n      input: React.createElement(Input, {\n        id: source\n      }),\n      value: this.state.value,\n      error: !!(touched && error),\n      renderValue: function renderValue(selected) {\n        return React.createElement(\"div\", {\n          className: classes.chips\n        }, selected.map(function (item) {\n          return choices.find(function (choice) {\n            return choice[optionValue] === item;\n          });\n        }).map(function (item) {\n          return React.createElement(Chip, {\n            key: get(item, optionValue),\n            label: _this.renderMenuItemOption(item),\n            className: classes.chip\n          });\n        }));\n      }\n    }, options, {\n      onChange: this.handleChange\n    }), choices.map(this.renderMenuItem)), touched && error && React.createElement(FormHelperText, {\n      error: true\n    }, error), helperText && React.createElement(FormHelperText, null, helperText));\n  };\n\n  return SelectArrayInput;\n}(Component);\n\nexport { SelectArrayInput };\nSelectArrayInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object),\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  input: PropTypes.object,\n  isRequired: PropTypes.bool,\n  label: PropTypes.string,\n  meta: PropTypes.object,\n  options: PropTypes.object,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]).isRequired,\n  optionValue: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  translate: PropTypes.func.isRequired,\n  translateChoice: PropTypes.bool\n};\nSelectArrayInput.defaultProps = {\n  classes: {},\n  choices: [],\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true\n};\nvar EnhancedSelectArrayInput = compose(addField, translate, withStyles(styles))(SelectArrayInput);\nexport default EnhancedSelectArrayInput;","map":null,"metadata":{},"sourceType":"module"}