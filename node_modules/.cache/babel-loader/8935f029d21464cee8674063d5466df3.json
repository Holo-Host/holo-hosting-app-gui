{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport debounce from 'lodash/debounce';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Quill from 'quill';\nimport { addField } from 'ra-core';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './styles';\n\nvar RichTextInput =\n/** @class */\nfunction (_super) {\n  __extends(RichTextInput, _super);\n\n  function RichTextInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onTextChange = function () {\n      var value = _this.editor.innerHTML == '<p><br></p>' ? '' : _this.editor.innerHTML;\n\n      _this.props.input.onChange(value);\n    };\n\n    _this.updateDivRef = function (ref) {\n      _this.divRef = ref;\n    };\n\n    return _this;\n  }\n\n  RichTextInput.prototype.componentDidMount = function () {\n    var _a = this.props,\n        value = _a.input.value,\n        toolbar = _a.toolbar,\n        options = _a.options;\n    this.quill = new Quill(this.divRef, __assign({\n      modules: {\n        toolbar: toolbar,\n        clipboard: {\n          matchVisual: false\n        }\n      },\n      theme: 'snow'\n    }, options));\n    this.quill.setContents(this.quill.clipboard.convert(value));\n    this.editor = this.divRef.querySelector('.ql-editor');\n    this.quill.on('text-change', debounce(this.onTextChange, 500));\n  };\n\n  RichTextInput.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.input.value !== this.props.input.value) {\n      var selection = this.quill.getSelection();\n      this.quill.setContents(this.quill.clipboard.convert(this.props.input.value));\n\n      if (selection && this.quill.hasFocus()) {\n        this.quill.setSelection(selection);\n      }\n    }\n  };\n\n  RichTextInput.prototype.componentWillUnmount = function () {\n    this.quill.off('text-change', this.onTextChange);\n    this.quill = null;\n  };\n\n  RichTextInput.prototype.render = function () {\n    var _a = this.props.meta,\n        error = _a.error,\n        _b = _a.helperText,\n        helperText = _b === void 0 ? false : _b;\n    return React.createElement(FormControl, {\n      error: error !== null && error != undefined,\n      fullWidth: this.props.fullWidth,\n      className: \"ra-rich-text-input\"\n    }, React.createElement(\"div\", {\n      ref: this.updateDivRef\n    }), error && React.createElement(FormHelperText, {\n      error: true\n    }, error), helperText && React.createElement(FormHelperText, null, helperText));\n  };\n\n  RichTextInput.propTypes = {\n    addLabel: PropTypes.bool.isRequired,\n    classes: PropTypes.object,\n    input: PropTypes.object,\n    label: PropTypes.string,\n    meta: PropTypes.object,\n    options: PropTypes.object,\n    source: PropTypes.string,\n    toolbar: PropTypes.oneOfType([PropTypes.array, PropTypes.bool]),\n    fullWidth: PropTypes.bool\n  };\n  RichTextInput.defaultProps = {\n    addLabel: true,\n    options: {},\n    record: {},\n    toolbar: true,\n    fullWidth: true\n  };\n  return RichTextInput;\n}(Component);\n\nexport { RichTextInput };\nvar RichRextInputWithField = addField(withStyles(styles)(RichTextInput));\nRichRextInputWithField.defaultProps = {\n  addLabel: true,\n  fullWidth: true\n};\nexport default RichRextInputWithField;","map":null,"metadata":{},"sourceType":"module"}