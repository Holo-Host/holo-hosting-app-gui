{"ast":null,"code":"/*!\n * inflection\n * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>\n * MIT Licensed\n *\n * @fileoverview\n * A port of inflection-js to node.js module.\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.inflection = factory();\n  }\n})(this, function () {\n  /**\n   * @description This is a list of nouns that use the same form for both singular and plural.\n   *              This list should remain entirely in lower case to correctly match Strings.\n   * @private\n   */\n  var uncountable_words = [// 'access',\n  'accommodation', 'adulthood', 'advertising', 'advice', 'aggression', 'aid', 'air', 'aircraft', 'alcohol', 'anger', 'applause', 'arithmetic', // 'art',\n  'assistance', 'athletics', // 'attention',\n  'bacon', 'baggage', // 'ballet',\n  // 'beauty',\n  'beef', // 'beer',\n  // 'behavior',\n  'biology', // 'billiards',\n  'blood', 'botany', // 'bowels',\n  'bread', // 'business',\n  'butter', 'carbon', 'cardboard', 'cash', 'chalk', 'chaos', 'chess', 'crossroads', 'countryside', // 'damage',\n  'dancing', // 'danger',\n  'deer', // 'delight',\n  // 'dessert',\n  'dignity', 'dirt', // 'distribution',\n  'dust', 'economics', 'education', 'electricity', // 'employment',\n  // 'energy',\n  'engineering', 'enjoyment', // 'entertainment',\n  'envy', 'equipment', 'ethics', 'evidence', 'evolution', // 'failure',\n  // 'faith',\n  'fame', 'fiction', // 'fish',\n  'flour', 'flu', 'food', // 'freedom',\n  // 'fruit',\n  'fuel', 'fun', // 'funeral',\n  'furniture', 'gallows', 'garbage', 'garlic', // 'gas',\n  'genetics', // 'glass',\n  'gold', 'golf', 'gossip', 'grammar', // 'grass',\n  'gratitude', 'grief', // 'ground',\n  'guilt', 'gymnastics', // 'hair',\n  'happiness', 'hardware', 'harm', 'hate', 'hatred', 'health', 'heat', // 'height',\n  'help', 'homework', 'honesty', 'honey', 'hospitality', 'housework', 'humour', 'hunger', 'hydrogen', 'ice', 'importance', 'inflation', 'information', // 'injustice',\n  'innocence', // 'intelligence',\n  'iron', 'irony', 'jam', // 'jealousy',\n  // 'jelly',\n  'jewelry', // 'joy',\n  'judo', // 'juice',\n  // 'justice',\n  'karate', // 'kindness',\n  'knowledge', // 'labour',\n  'lack', // 'land',\n  'laughter', 'lava', 'leather', 'leisure', 'lightning', 'linguine', 'linguini', 'linguistics', 'literature', 'litter', 'livestock', 'logic', 'loneliness', // 'love',\n  'luck', 'luggage', 'macaroni', 'machinery', 'magic', // 'mail',\n  'management', 'mankind', 'marble', 'mathematics', 'mayonnaise', 'measles', // 'meat',\n  // 'metal',\n  'methane', 'milk', 'minus', 'money', // 'moose',\n  'mud', 'music', 'mumps', 'nature', 'news', 'nitrogen', 'nonsense', 'nurture', 'nutrition', 'obedience', 'obesity', // 'oil',\n  'oxygen', // 'paper',\n  // 'passion',\n  'pasta', 'patience', // 'permission',\n  'physics', 'poetry', 'pollution', 'poverty', // 'power',\n  'pride', // 'production',\n  // 'progress',\n  // 'pronunciation',\n  'psychology', 'publicity', 'punctuation', // 'quality',\n  // 'quantity',\n  'quartz', 'racism', // 'rain',\n  // 'recreation',\n  'relaxation', 'reliability', 'research', 'respect', 'revenge', 'rice', 'rubbish', 'rum', 'safety', // 'salad',\n  // 'salt',\n  // 'sand',\n  // 'satire',\n  'scenery', 'seafood', 'seaside', 'series', 'shame', 'sheep', 'shopping', // 'silence',\n  'sleep', // 'slang'\n  'smoke', 'smoking', 'snow', 'soap', 'software', 'soil', // 'sorrow',\n  // 'soup',\n  'spaghetti', // 'speed',\n  'species', // 'spelling',\n  // 'sport',\n  'steam', // 'strength',\n  'stuff', 'stupidity', // 'success',\n  // 'sugar',\n  'sunshine', 'symmetry', // 'tea',\n  'tennis', 'thirst', 'thunder', 'timber', // 'time',\n  // 'toast',\n  // 'tolerance',\n  // 'trade',\n  'traffic', 'transportation', // 'travel',\n  'trust', // 'understanding',\n  'underwear', 'unemployment', 'unity', // 'usage',\n  'validity', 'veal', 'vegetation', 'vegetarianism', 'vengeance', 'violence', // 'vision',\n  'vitality', 'warmth', // 'water',\n  'wealth', 'weather', // 'weight',\n  'welfare', 'wheat', // 'whiskey',\n  // 'width',\n  'wildlife', // 'wine',\n  'wisdom', // 'wood',\n  // 'wool',\n  // 'work',\n  // 'yeast',\n  'yoga', 'zinc', 'zoology'];\n  /**\n   * @description These rules translate from the singular form of a noun to its plural form.\n   * @private\n   */\n\n  var regex = {\n    plural: {\n      men: new RegExp('^(m|wom)en$', 'gi'),\n      people: new RegExp('(pe)ople$', 'gi'),\n      children: new RegExp('(child)ren$', 'gi'),\n      tia: new RegExp('([ti])a$', 'gi'),\n      analyses: new RegExp('((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$', 'gi'),\n      hives: new RegExp('(hi|ti)ves$', 'gi'),\n      curves: new RegExp('(curve)s$', 'gi'),\n      lrves: new RegExp('([lr])ves$', 'gi'),\n      aves: new RegExp('([a])ves$', 'gi'),\n      foves: new RegExp('([^fo])ves$', 'gi'),\n      movies: new RegExp('(m)ovies$', 'gi'),\n      aeiouyies: new RegExp('([^aeiouy]|qu)ies$', 'gi'),\n      series: new RegExp('(s)eries$', 'gi'),\n      xes: new RegExp('(x|ch|ss|sh)es$', 'gi'),\n      mice: new RegExp('([m|l])ice$', 'gi'),\n      buses: new RegExp('(bus)es$', 'gi'),\n      oes: new RegExp('(o)es$', 'gi'),\n      shoes: new RegExp('(shoe)s$', 'gi'),\n      crises: new RegExp('(cris|ax|test)es$', 'gi'),\n      octopi: new RegExp('(octop|vir)i$', 'gi'),\n      aliases: new RegExp('(alias|canvas|status|campus)es$', 'gi'),\n      summonses: new RegExp('^(summons)es$', 'gi'),\n      oxen: new RegExp('^(ox)en', 'gi'),\n      matrices: new RegExp('(matr)ices$', 'gi'),\n      vertices: new RegExp('(vert|ind)ices$', 'gi'),\n      feet: new RegExp('^feet$', 'gi'),\n      teeth: new RegExp('^teeth$', 'gi'),\n      geese: new RegExp('^geese$', 'gi'),\n      quizzes: new RegExp('(quiz)zes$', 'gi'),\n      whereases: new RegExp('^(whereas)es$', 'gi'),\n      criteria: new RegExp('^(criteri)a$', 'gi'),\n      genera: new RegExp('^genera$', 'gi'),\n      ss: new RegExp('ss$', 'gi'),\n      s: new RegExp('s$', 'gi')\n    },\n    singular: {\n      man: new RegExp('^(m|wom)an$', 'gi'),\n      person: new RegExp('(pe)rson$', 'gi'),\n      child: new RegExp('(child)$', 'gi'),\n      ox: new RegExp('^(ox)$', 'gi'),\n      axis: new RegExp('(ax|test)is$', 'gi'),\n      octopus: new RegExp('(octop|vir)us$', 'gi'),\n      alias: new RegExp('(alias|status|canvas|campus)$', 'gi'),\n      summons: new RegExp('^(summons)$', 'gi'),\n      bus: new RegExp('(bu)s$', 'gi'),\n      buffalo: new RegExp('(buffal|tomat|potat)o$', 'gi'),\n      tium: new RegExp('([ti])um$', 'gi'),\n      sis: new RegExp('sis$', 'gi'),\n      ffe: new RegExp('(?:([^f])fe|([lr])f)$', 'gi'),\n      hive: new RegExp('(hi|ti)ve$', 'gi'),\n      aeiouyy: new RegExp('([^aeiouy]|qu)y$', 'gi'),\n      x: new RegExp('(x|ch|ss|sh)$', 'gi'),\n      matrix: new RegExp('(matr)ix$', 'gi'),\n      vertex: new RegExp('(vert|ind)ex$', 'gi'),\n      mouse: new RegExp('([m|l])ouse$', 'gi'),\n      foot: new RegExp('^foot$', 'gi'),\n      tooth: new RegExp('^tooth$', 'gi'),\n      goose: new RegExp('^goose$', 'gi'),\n      quiz: new RegExp('(quiz)$', 'gi'),\n      whereas: new RegExp('^(whereas)$', 'gi'),\n      criterion: new RegExp('^(criteri)on$', 'gi'),\n      genus: new RegExp('^genus$', 'gi'),\n      s: new RegExp('s$', 'gi'),\n      common: new RegExp('$', 'gi')\n    }\n  };\n  var plural_rules = [// do not replace if its already a plural word\n  [regex.plural.men], [regex.plural.people], [regex.plural.children], [regex.plural.tia], [regex.plural.analyses], [regex.plural.hives], [regex.plural.curves], [regex.plural.lrves], [regex.plural.foves], [regex.plural.aeiouyies], [regex.plural.series], [regex.plural.movies], [regex.plural.xes], [regex.plural.mice], [regex.plural.buses], [regex.plural.oes], [regex.plural.shoes], [regex.plural.crises], [regex.plural.octopi], [regex.plural.aliases], [regex.plural.summonses], [regex.plural.oxen], [regex.plural.matrices], [regex.plural.feet], [regex.plural.teeth], [regex.plural.geese], [regex.plural.quizzes], [regex.plural.whereases], [regex.plural.criteria], [regex.plural.genera], // original rule\n  [regex.singular.man, '$1en'], [regex.singular.person, '$1ople'], [regex.singular.child, '$1ren'], [regex.singular.ox, '$1en'], [regex.singular.axis, '$1es'], [regex.singular.octopus, '$1i'], [regex.singular.alias, '$1es'], [regex.singular.summons, '$1es'], [regex.singular.bus, '$1ses'], [regex.singular.buffalo, '$1oes'], [regex.singular.tium, '$1a'], [regex.singular.sis, 'ses'], [regex.singular.ffe, '$1$2ves'], [regex.singular.hive, '$1ves'], [regex.singular.aeiouyy, '$1ies'], [regex.singular.matrix, '$1ices'], [regex.singular.vertex, '$1ices'], [regex.singular.x, '$1es'], [regex.singular.mouse, '$1ice'], [regex.singular.foot, 'feet'], [regex.singular.tooth, 'teeth'], [regex.singular.goose, 'geese'], [regex.singular.quiz, '$1zes'], [regex.singular.whereas, '$1es'], [regex.singular.criterion, '$1a'], [regex.singular.genus, 'genera'], [regex.singular.s, 's'], [regex.singular.common, 's']];\n  /**\n   * @description These rules translate from the plural form of a noun to its singular form.\n   * @private\n   */\n\n  var singular_rules = [// do not replace if its already a singular word\n  [regex.singular.man], [regex.singular.person], [regex.singular.child], [regex.singular.ox], [regex.singular.axis], [regex.singular.octopus], [regex.singular.alias], [regex.singular.summons], [regex.singular.bus], [regex.singular.buffalo], [regex.singular.tium], [regex.singular.sis], [regex.singular.ffe], [regex.singular.hive], [regex.singular.aeiouyy], [regex.singular.x], [regex.singular.matrix], [regex.singular.mouse], [regex.singular.foot], [regex.singular.tooth], [regex.singular.goose], [regex.singular.quiz], [regex.singular.whereas], [regex.singular.criterion], [regex.singular.genus], // original rule\n  [regex.plural.men, '$1an'], [regex.plural.people, '$1rson'], [regex.plural.children, '$1'], [regex.plural.genera, 'genus'], [regex.plural.criteria, '$1on'], [regex.plural.tia, '$1um'], [regex.plural.analyses, '$1$2sis'], [regex.plural.hives, '$1ve'], [regex.plural.curves, '$1'], [regex.plural.lrves, '$1f'], [regex.plural.aves, '$1ve'], [regex.plural.foves, '$1fe'], [regex.plural.movies, '$1ovie'], [regex.plural.aeiouyies, '$1y'], [regex.plural.series, '$1eries'], [regex.plural.xes, '$1'], [regex.plural.mice, '$1ouse'], [regex.plural.buses, '$1'], [regex.plural.oes, '$1'], [regex.plural.shoes, '$1'], [regex.plural.crises, '$1is'], [regex.plural.octopi, '$1us'], [regex.plural.aliases, '$1'], [regex.plural.summonses, '$1'], [regex.plural.oxen, '$1'], [regex.plural.matrices, '$1ix'], [regex.plural.vertices, '$1ex'], [regex.plural.feet, 'foot'], [regex.plural.teeth, 'tooth'], [regex.plural.geese, 'goose'], [regex.plural.quizzes, '$1'], [regex.plural.whereases, '$1'], [regex.plural.ss, 'ss'], [regex.plural.s, '']];\n  /**\n   * @description This is a list of words that should not be capitalized for title case.\n   * @private\n   */\n\n  var non_titlecased_words = ['and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at', 'by', 'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'];\n  /**\n   * @description These are regular expressions used for converting between String formats.\n   * @private\n   */\n\n  var id_suffix = new RegExp('(_ids|_id)$', 'g');\n  var underbar = new RegExp('_', 'g');\n  var space_or_underbar = new RegExp('[\\ _]', 'g');\n  var uppercase = new RegExp('([A-Z])', 'g');\n  var underbar_prefix = new RegExp('^_');\n  var inflector = {\n    /**\n     * A helper method that applies rules based replacement to a String.\n     * @private\n     * @function\n     * @param {String} str String to modify and return based on the passed rules.\n     * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement\n     * @param {Array: [String]} skip Strings to skip if they match\n     * @param {String} override String to return as though this method succeeded (used to conform to APIs)\n     * @returns {String} Return passed String modified by passed rules.\n     * @example\n     *\n     *     this._apply_rules( 'cows', singular_rules ); // === 'cow'\n     */\n    _apply_rules: function _apply_rules(str, rules, skip, override) {\n      if (override) {\n        str = override;\n      } else {\n        var ignore = inflector.indexOf(skip, str.toLowerCase()) > -1;\n\n        if (!ignore) {\n          var i = 0;\n          var j = rules.length;\n\n          for (; i < j; i++) {\n            if (str.match(rules[i][0])) {\n              if (rules[i][1] !== undefined) {\n                str = str.replace(rules[i][0], rules[i][1]);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return str;\n    },\n\n    /**\n     * This lets us detect if an Array contains a given element.\n     * @public\n     * @function\n     * @param {Array} arr The subject array.\n     * @param {Object} item Object to locate in the Array.\n     * @param {Number} from_index Starts checking from this position in the Array.(optional)\n     * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)\n     * @returns {Number} Return index position in the Array of the passed item.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1\n     *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0\n     */\n    indexOf: function indexOf(arr, item, from_index, compare_func) {\n      if (!from_index) {\n        from_index = -1;\n      }\n\n      var index = -1;\n      var i = from_index;\n      var j = arr.length;\n\n      for (; i < j; i++) {\n        if (arr[i] === item || compare_func && compare_func(arr[i], item)) {\n          index = i;\n          break;\n        }\n      }\n\n      return index;\n    },\n\n    /**\n     * This function adds pluralization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {String} plural Overrides normal output with said String.(optional)\n     * @returns {String} Singular English language nouns are returned in plural form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.pluralize( 'person' ); // === 'people'\n     *     inflection.pluralize( 'octopus' ); // === 'octopi'\n     *     inflection.pluralize( 'Hat' ); // === 'Hats'\n     *     inflection.pluralize( 'person', 'guys' ); // === 'guys'\n     */\n    pluralize: function pluralize(str, plural) {\n      return inflector._apply_rules(str, plural_rules, uncountable_words, plural);\n    },\n\n    /**\n     * This function adds singularization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {String} singular Overrides normal output with said String.(optional)\n     * @returns {String} Plural English language nouns are returned in singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.singularize( 'people' ); // === 'person'\n     *     inflection.singularize( 'octopi' ); // === 'octopus'\n     *     inflection.singularize( 'Hats' ); // === 'Hat'\n     *     inflection.singularize( 'guys', 'person' ); // === 'person'\n     */\n    singularize: function singularize(str, singular) {\n      return inflector._apply_rules(str, singular_rules, uncountable_words, singular);\n    },\n\n    /**\n     * This function will pluralize or singularlize a String appropriately based on an integer value\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Number} count The number to base pluralization off of.\n     * @param {String} singular Overrides normal output with said String.(optional)\n     * @param {String} plural Overrides normal output with said String.(optional)\n     * @returns {String} English language nouns are returned in the plural or singular form based on the count.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.inflect( 'people' 1 ); // === 'person'\n     *     inflection.inflect( 'octopi' 1 ); // === 'octopus'\n     *     inflection.inflect( 'Hats' 1 ); // === 'Hat'\n     *     inflection.inflect( 'guys', 1 , 'person' ); // === 'person'\n     *     inflection.inflect( 'person', 2 ); // === 'people'\n     *     inflection.inflect( 'octopus', 2 ); // === 'octopi'\n     *     inflection.inflect( 'Hat', 2 ); // === 'Hats'\n     *     inflection.inflect( 'person', 2, null, 'guys' ); // === 'guys'\n     */\n    inflect: function inflect(str, count, singular, plural) {\n      count = parseInt(count, 10);\n      if (isNaN(count)) return str;\n\n      if (count === 0 || count > 1) {\n        return inflector._apply_rules(str, plural_rules, uncountable_words, plural);\n      } else {\n        return inflector._apply_rules(str, singular_rules, uncountable_words, singular);\n      }\n    },\n\n    /**\n     * This function adds camelization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n     *                                 Passing true will lowercase it.\n     * @returns {String} Lower case underscored words will be returned in camel case.\n     *                  additionally '/' is translated to '::'\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'\n     *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'\n     */\n    camelize: function camelize(str, low_first_letter) {\n      var str_path = str.split('/');\n      var i = 0;\n      var j = str_path.length;\n      var str_arr, init_x, k, l, first;\n\n      for (; i < j; i++) {\n        str_arr = str_path[i].split('_');\n        k = 0;\n        l = str_arr.length;\n\n        for (; k < l; k++) {\n          if (k !== 0) {\n            str_arr[k] = str_arr[k].toLowerCase();\n          }\n\n          first = str_arr[k].charAt(0);\n          first = low_first_letter && i === 0 && k === 0 ? first.toLowerCase() : first.toUpperCase();\n          str_arr[k] = first + str_arr[k].substring(1);\n        }\n\n        str_path[i] = str_arr.join('');\n      }\n\n      return str_path.join('::');\n    },\n\n    /**\n     * This function adds underscore support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)\n     *                  Passing true will return as entered.\n     * @returns {String} Camel cased words are returned as lower cased and underscored.\n     *                  additionally '::' is translated to '/'.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'\n     *     inflection.underscore( 'messageProperties' ); // === 'message_properties'\n     *     inflection.underscore( 'MP', true ); // === 'MP'\n     */\n    underscore: function underscore(str, all_upper_case) {\n      if (all_upper_case && str === str.toUpperCase()) return str;\n      var str_path = str.split('::');\n      var i = 0;\n      var j = str_path.length;\n\n      for (; i < j; i++) {\n        str_path[i] = str_path[i].replace(uppercase, '_$1');\n        str_path[i] = str_path[i].replace(underbar_prefix, '');\n      }\n\n      return str_path.join('/').toLowerCase();\n    },\n\n    /**\n     * This function adds humanize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)\n     *                                 Passing true will lowercase it.\n     * @returns {String} Lower case underscored words will be returned in humanized form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.humanize( 'message_properties' ); // === 'Message properties'\n     *     inflection.humanize( 'message_properties', true ); // === 'message properties'\n     */\n    humanize: function humanize(str, low_first_letter) {\n      str = str.toLowerCase();\n      str = str.replace(id_suffix, '');\n      str = str.replace(underbar, ' ');\n\n      if (!low_first_letter) {\n        str = inflector.capitalize(str);\n      }\n\n      return str;\n    },\n\n    /**\n     * This function adds capitalization support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} All characters will be lower case and the first will be upper.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'\n     *     inflection.capitalize( 'message properties', true ); // === 'Message properties'\n     */\n    capitalize: function capitalize(str) {\n      str = str.toLowerCase();\n      return str.substring(0, 1).toUpperCase() + str.substring(1);\n    },\n\n    /**\n     * This function replaces underscores with dashes in the string.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Replaces all spaces or underscores with dashes.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.dasherize( 'message_properties' ); // === 'message-properties'\n     *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'\n     */\n    dasherize: function dasherize(str) {\n      return str.replace(space_or_underbar, '-');\n    },\n\n    /**\n     * This function adds titleize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Capitalizes words as you would for a book title.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.titleize( 'message_properties' ); // === 'Message Properties'\n     *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'\n     */\n    titleize: function titleize(str) {\n      str = str.toLowerCase().replace(underbar, ' ');\n      var str_arr = str.split(' ');\n      var i = 0;\n      var j = str_arr.length;\n      var d, k, l;\n\n      for (; i < j; i++) {\n        d = str_arr[i].split('-');\n        k = 0;\n        l = d.length;\n\n        for (; k < l; k++) {\n          if (inflector.indexOf(non_titlecased_words, d[k].toLowerCase()) < 0) {\n            d[k] = inflector.capitalize(d[k]);\n          }\n        }\n\n        str_arr[i] = d.join('-');\n      }\n\n      str = str_arr.join(' ');\n      str = str.substring(0, 1).toUpperCase() + str.substring(1);\n      return str;\n    },\n\n    /**\n     * This function adds demodulize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Removes module names leaving only class names.(Ruby style)\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'\n     */\n    demodulize: function demodulize(str) {\n      var str_arr = str.split('::');\n      return str_arr[str_arr.length - 1];\n    },\n\n    /**\n     * This function adds tableize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Return camel cased words into their underscored plural form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'\n     */\n    tableize: function tableize(str) {\n      str = inflector.underscore(str);\n      str = inflector.pluralize(str);\n      return str;\n    },\n\n    /**\n     * This function adds classification support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Underscored plural nouns become the camel cased singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'\n     */\n    classify: function classify(str) {\n      str = inflector.camelize(str);\n      str = inflector.singularize(str);\n      return str;\n    },\n\n    /**\n     * This function adds foreign key support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,\n                                   you can pass true to skip it.(optional)\n     * @returns {String} Underscored plural nouns become the camel cased singular form.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'\n     *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'\n     */\n    foreign_key: function foreign_key(str, drop_id_ubar) {\n      str = inflector.demodulize(str);\n      str = inflector.underscore(str) + (drop_id_ubar ? '' : '_') + 'id';\n      return str;\n    },\n\n    /**\n     * This function adds ordinalize support to every String object.\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @returns {String} Return all found numbers their sequence like '22nd'.\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'\n     */\n    ordinalize: function ordinalize(str) {\n      var str_arr = str.split(' ');\n      var i = 0;\n      var j = str_arr.length;\n\n      for (; i < j; i++) {\n        var k = parseInt(str_arr[i], 10);\n\n        if (!isNaN(k)) {\n          var ltd = str_arr[i].substring(str_arr[i].length - 2);\n          var ld = str_arr[i].substring(str_arr[i].length - 1);\n          var suf = 'th';\n\n          if (ltd != '11' && ltd != '12' && ltd != '13') {\n            if (ld === '1') {\n              suf = 'st';\n            } else if (ld === '2') {\n              suf = 'nd';\n            } else if (ld === '3') {\n              suf = 'rd';\n            }\n          }\n\n          str_arr[i] += suf;\n        }\n      }\n\n      return str_arr.join(' ');\n    },\n\n    /**\n     * This function performs multiple inflection methods on a string\n     * @public\n     * @function\n     * @param {String} str The subject string.\n     * @param {Array} arr An array of inflection methods.\n     * @returns {String}\n     * @example\n     *\n     *     var inflection = require( 'inflection' );\n     *\n     *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'\n     */\n    transform: function transform(str, arr) {\n      var i = 0;\n      var j = arr.length;\n\n      for (; i < j; i++) {\n        var method = arr[i];\n\n        if (inflector.hasOwnProperty(method)) {\n          str = inflector[method](str);\n        }\n      }\n\n      return str;\n    }\n  };\n  /**\n   * @public\n   */\n\n  inflector.version = '1.12.0';\n  return inflector;\n});","map":null,"metadata":{},"sourceType":"script"}