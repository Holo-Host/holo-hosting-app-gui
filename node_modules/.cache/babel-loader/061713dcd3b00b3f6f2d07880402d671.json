{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport compose from 'recompose/compose';\nimport MuiButton from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport { withStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport { translate } from 'ra-core';\nimport Responsive from '../layout/Responsive';\nvar styles = {\n  button: {\n    display: 'inline-flex',\n    alignItems: 'center'\n  },\n  label: {\n    paddingLeft: '0.5em'\n  },\n  labelRightIcon: {\n    paddingRight: '0.5em'\n  },\n  smallIcon: {\n    fontSize: 20\n  },\n  mediumIcon: {\n    fontSize: 22\n  },\n  largeIcon: {\n    fontSize: 24\n  }\n};\n\nvar Button = function Button(_a) {\n  var _b = _a.alignIcon,\n      alignIcon = _b === void 0 ? 'left' : _b,\n      children = _a.children,\n      _c = _a.classes,\n      classes = _c === void 0 ? {} : _c,\n      className = _a.className,\n      _d = _a.color,\n      color = _d === void 0 ? 'primary' : _d,\n      disabled = _a.disabled,\n      label = _a.label,\n      _e = _a.size,\n      size = _e === void 0 ? 'small' : _e,\n      translate = _a.translate,\n      rest = __rest(_a, [\"alignIcon\", \"children\", \"classes\", \"className\", \"color\", \"disabled\", \"label\", \"size\", \"translate\"]);\n\n  var _f;\n\n  return React.createElement(Responsive, {\n    small: label && !disabled ? React.createElement(Tooltip, {\n      title: translate(label, {\n        _: label\n      })\n    }, React.createElement(IconButton, __assign({\n      \"aria-label\": translate(label, {\n        _: label\n      }),\n      className: className,\n      color: color\n    }, rest), children)) : React.createElement(IconButton, __assign({\n      className: className,\n      color: color,\n      disabled: disabled\n    }, rest), children),\n    medium: React.createElement(MuiButton, __assign({\n      className: classnames(classes.button, className),\n      color: color,\n      size: size,\n      \"aria-label\": label ? translate(label, {\n        _: label\n      }) : undefined,\n      disabled: disabled\n    }, rest), alignIcon === 'left' && children && React.cloneElement(children, {\n      className: classes[size + \"Icon\"]\n    }), label && React.createElement(\"span\", {\n      className: classnames((_f = {}, _f[classes.label] = alignIcon === 'left', _f[classes.labelRightIcon] = alignIcon !== 'left', _f))\n    }, translate(label, {\n      _: label\n    })), alignIcon === 'right' && children && React.cloneElement(children, {\n      className: classes[size + \"Icon\"]\n    }))\n  });\n};\n\nButton.propTypes = {\n  alignIcon: PropTypes.string,\n  children: PropTypes.element,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  color: PropTypes.string,\n  disabled: PropTypes.bool,\n  label: PropTypes.string,\n  size: PropTypes.string,\n  translate: PropTypes.func.isRequired\n};\nvar enhance = compose(withStyles(styles), translate);\nexport default enhance(Button);","map":null,"metadata":{},"sourceType":"module"}