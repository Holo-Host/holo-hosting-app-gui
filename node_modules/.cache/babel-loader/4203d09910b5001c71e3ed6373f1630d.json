{"ast":null,"code":"import { LOCATION_CHANGE } from 'react-router-redux';\nimport { destroy } from 'redux-form';\nimport isEqual from 'lodash/isEqual';\nimport { resetForm } from '../actions/formActions';\nimport { REDUX_FORM_NAME } from './constants';\n/**\n * This middleware ensure that whenever a location change happen, we get the\n * chance to properly reset the redux-form record form, preventing data to be\n * kept between different resources or form types (CREATE, EDIT).\n *\n * A middleware is needed instead of a saga because we need to control the actions\n * order: we need to ensure we reset the redux form BEFORE the location actually\n * changes. Otherwise, the new page which may contain a record redux-form might\n * initialize before our reset and loose its data.\n */\n\nvar formMiddleware = function formMiddleware() {\n  var previousLocation;\n  return function (next) {\n    return function (action) {\n      if (action.type !== LOCATION_CHANGE || action.payload.state && action.payload.state.skipFormReset) {\n        return next(action);\n      } // history allows one to redirect to the same location which can happen\n      // when using a special menu for a create page for instance. In this case,\n      // we don't want to reset the form.\n      // See https://github.com/marmelab/react-admin/issues/2291\n\n\n      if (isEqual(action.payload, previousLocation)) {\n        return next(action);\n      }\n\n      previousLocation = action.payload;\n      next(resetForm());\n      next(destroy(REDUX_FORM_NAME));\n      return next(action);\n    };\n  };\n};\n\nexport default formMiddleware;","map":null,"metadata":{},"sourceType":"module"}