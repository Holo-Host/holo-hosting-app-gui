{"ast":null,"code":"import buildApolloClient from 'ra-data-graphql-simple';\nexport default (function () {\n  var getGqlResource = function getGqlResource(resource) {\n    switch (resource) {\n      case 'customers':\n        return 'Customer';\n\n      case 'categories':\n        return 'Category';\n\n      case 'commands':\n        return 'Command';\n\n      case 'products':\n        return 'Product';\n\n      case 'reviews':\n        return 'Review';\n\n      default:\n        throw new Error(\"Unknown resource \".concat(resource));\n    }\n  };\n\n  return buildApolloClient({\n    clientOptions: {\n      uri: 'http://localhost:4000/graphql'\n    }\n  }).then(function (dataProvider) {\n    return function (type, resource, params) {\n      return dataProvider(type, getGqlResource(resource), params);\n    };\n  });\n});","map":{"version":3,"sources":["/home/lisa/Documents/gitrepos/holochain/holo/holo-hosting/No2_holo-hosting-app_GUI/holo-hosting-app_GUI/src/dataProvider/graphql.js"],"names":["buildApolloClient","getGqlResource","resource","Error","clientOptions","uri","then","dataProvider","type","params"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,wBAA9B;AAEA,gBAAe,YAAM;AACjB,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,QAAQ,EAAI;AAC/B,YAAQA,QAAR;AACI,WAAK,WAAL;AACI,eAAO,UAAP;;AAEJ,WAAK,YAAL;AACI,eAAO,UAAP;;AAEJ,WAAK,UAAL;AACI,eAAO,SAAP;;AAEJ,WAAK,UAAL;AACI,eAAO,SAAP;;AAEJ,WAAK,SAAL;AACI,eAAO,QAAP;;AAEJ;AACI,cAAM,IAAIC,KAAJ,4BAA8BD,QAA9B,EAAN;AAjBR;AAmBH,GApBD;;AAsBA,SAAOF,iBAAiB,CAAC;AACrBI,IAAAA,aAAa,EAAE;AACXC,MAAAA,GAAG,EAAE;AADM;AADM,GAAD,CAAjB,CAIJC,IAJI,CAIC,UAAAC,YAAY;AAAA,WAAI,UAACC,IAAD,EAAON,QAAP,EAAiBO,MAAjB;AAAA,aACpBF,YAAY,CAACC,IAAD,EAAOP,cAAc,CAACC,QAAD,CAArB,EAAiCO,MAAjC,CADQ;AAAA,KAAJ;AAAA,GAJb,CAAP;AAOH,CA9BD","sourcesContent":["import buildApolloClient from 'ra-data-graphql-simple';\n\nexport default () => {\n    const getGqlResource = resource => {\n        switch (resource) {\n            case 'customers':\n                return 'Customer';\n\n            case 'categories':\n                return 'Category';\n\n            case 'commands':\n                return 'Command';\n\n            case 'products':\n                return 'Product';\n\n            case 'reviews':\n                return 'Review';\n\n            default:\n                throw new Error(`Unknown resource ${resource}`);\n        }\n    };\n\n    return buildApolloClient({\n        clientOptions: {\n            uri: 'http://localhost:4000/graphql',\n        },\n    }).then(dataProvider => (type, resource, params) =>\n        dataProvider(type, getGqlResource(resource), params)\n    );\n};\n"]},"metadata":{},"sourceType":"module"}