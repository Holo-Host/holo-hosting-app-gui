{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport get from 'lodash/get';\nimport { crudGetManyAccumulate as crudGetManyAccumulateAction } from '../../actions';\nimport { getReferencesByIds } from '../../reducer/admin/references/oneToMany';\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n */\n\nvar UnconnectedReferenceArrayFieldController =\n/** @class */\nfunction (_super) {\n  __extends(UnconnectedReferenceArrayFieldController, _super);\n\n  function UnconnectedReferenceArrayFieldController() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  UnconnectedReferenceArrayFieldController.prototype.componentDidMount = function () {\n    this.fetchReferences();\n  };\n\n  UnconnectedReferenceArrayFieldController.prototype.componentWillReceiveProps = function (nextProps) {\n    if ((this.props.record || {\n      id: undefined\n    }).id !== (nextProps.record || {}).id) {\n      this.fetchReferences(nextProps);\n    }\n  };\n\n  UnconnectedReferenceArrayFieldController.prototype.fetchReferences = function (_a) {\n    var _b = _a === void 0 ? this.props : _a,\n        crudGetManyAccumulate = _b.crudGetManyAccumulate,\n        reference = _b.reference,\n        ids = _b.ids;\n\n    crudGetManyAccumulate(reference, ids);\n  };\n\n  UnconnectedReferenceArrayFieldController.prototype.render = function () {\n    var _a = this.props,\n        resource = _a.resource,\n        reference = _a.reference,\n        data = _a.data,\n        ids = _a.ids,\n        children = _a.children,\n        basePath = _a.basePath;\n    var referenceBasePath = basePath.replace(resource, reference); // FIXME obviously very weak\n\n    return children({\n      // tslint:disable-next-line:triple-equals\n      loadedOnce: data != undefined,\n      ids: ids,\n      data: data,\n      referenceBasePath: referenceBasePath,\n      currentSort: {\n        field: 'id',\n        order: 'ASC'\n      }\n    });\n  };\n\n  return UnconnectedReferenceArrayFieldController;\n}(Component);\n\nexport { UnconnectedReferenceArrayFieldController };\n\nvar mapStateToProps = function mapStateToProps(state, props) {\n  var record = props.record,\n      source = props.source,\n      reference = props.reference;\n  var ids = get(record, source) || [];\n  return {\n    data: getReferencesByIds(state, reference, ids),\n    ids: ids\n  };\n};\n\nvar ReferenceArrayFieldController = connect(mapStateToProps, {\n  crudGetManyAccumulate: crudGetManyAccumulateAction\n})(UnconnectedReferenceArrayFieldController);\nexport default ReferenceArrayFieldController;","map":null,"metadata":{},"sourceType":"module"}