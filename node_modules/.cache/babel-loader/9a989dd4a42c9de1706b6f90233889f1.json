{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { FETCH_END } from '../../../actions/fetchActions';\nimport { CREATE, DELETE, DELETE_MANY, GET_LIST, GET_MANY, GET_MANY_REFERENCE, GET_ONE, UPDATE, UPDATE_MANY } from '../../../dataFetchActions';\nimport getFetchedAt from '../../../util/getFetchedAt';\n/**\n * Make the fetchedAt property non enumerable\n */\n\nexport var hideFetchedAt = function hideFetchedAt(records) {\n  Object.defineProperty(records, 'fetchedAt', {\n    enumerable: false,\n    configurable: false,\n    writable: false\n  });\n  return records;\n};\n/**\n * Add new records to the pool, and remove outdated ones.\n *\n * This is the equivalent of a stale-while-revalidate caching strategy:\n * The cached data is displayed before fetching, and stale data is removed\n * only once fresh data is fetched.\n */\n\nexport var addRecords = function addRecords(newRecords, oldRecords) {\n  if (newRecords === void 0) {\n    newRecords = [];\n  }\n\n  var newRecordsById = newRecords.reduce(function (acc, record) {\n    var _a;\n\n    return __assign({}, acc, (_a = {}, _a[record.id] = record, _a));\n  }, {});\n  var newFetchedAt = getFetchedAt(newRecords.map(function (_a) {\n    var id = _a.id;\n    return id;\n  }), oldRecords.fetchedAt);\n  var records = Object.keys(newFetchedAt).reduce(function (acc, id) {\n    var _a;\n\n    return __assign({}, acc, (_a = {}, _a[id] = newRecordsById[id] || oldRecords[id], _a));\n  }, {\n    fetchedAt: newFetchedAt\n  });\n  return hideFetchedAt(records);\n};\n/**\n * Remove records from the pool\n */\n\nvar removeRecords = function removeRecords(removedRecordIds, oldRecords) {\n  if (removedRecordIds === void 0) {\n    removedRecordIds = [];\n  }\n\n  var records = Object.entries(oldRecords).filter(function (_a) {\n    var key = _a[0];\n    return !removedRecordIds.includes(key);\n  }).reduce(function (obj, _a) {\n    var key = _a[0],\n        val = _a[1];\n\n    var _b;\n\n    return __assign({}, obj, (_b = {}, _b[key] = val, _b));\n  }, {\n    fetchedAt: {}\n  });\n  records.fetchedAt = Object.entries(oldRecords.fetchedAt).filter(function (_a) {\n    var key = _a[0];\n    return !removedRecordIds.includes(key);\n  }).reduce(function (obj, _a) {\n    var key = _a[0],\n        val = _a[1];\n\n    var _b;\n\n    return __assign({}, obj, (_b = {}, _b[key] = val, _b));\n  }, {});\n  return hideFetchedAt(records);\n};\n\nvar initialState = hideFetchedAt({\n  fetchedAt: {}\n});\n\nvar dataReducer = function dataReducer(previousState, _a) {\n  if (previousState === void 0) {\n    previousState = initialState;\n  }\n\n  var payload = _a.payload,\n      meta = _a.meta;\n\n  if (meta && meta.optimistic) {\n    if (meta.fetch === UPDATE) {\n      var updatedRecord = __assign({}, previousState[payload.id], payload.data);\n\n      return addRecords([updatedRecord], previousState);\n    }\n\n    if (meta.fetch === UPDATE_MANY) {\n      var updatedRecords = payload.ids.map(function (id) {\n        return __assign({}, previousState[id], payload.data);\n      });\n      return addRecords(updatedRecords, previousState);\n    }\n\n    if (meta.fetch === DELETE) {\n      return removeRecords([payload.id], previousState);\n    }\n\n    if (meta.fetch === DELETE_MANY) {\n      return removeRecords(payload.ids, previousState);\n    }\n  }\n\n  if (!meta || !meta.fetchResponse || meta.fetchStatus !== FETCH_END) {\n    return previousState;\n  }\n\n  switch (meta.fetchResponse) {\n    case GET_LIST:\n    case GET_MANY:\n    case GET_MANY_REFERENCE:\n      return addRecords(payload.data, previousState);\n\n    case GET_ONE:\n    case UPDATE:\n    case CREATE:\n      return addRecords([payload.data], previousState);\n\n    default:\n      return previousState;\n  }\n};\n\nexport var getRecord = function getRecord(state, id) {\n  return state[id];\n};\nexport default dataReducer;","map":null,"metadata":{},"sourceType":"module"}