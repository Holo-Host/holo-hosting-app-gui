{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { cloneElement, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { isRequired, FieldTitle, withDefaultValue } from 'ra-core';\nimport { FieldArray } from 'redux-form';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport sanitizeRestProps from './sanitizeRestProps';\n/**\n * To edit arrays of data embedded inside a record, <ArrayInput> creates a list of sub-forms.\n *\n *  @example\n *\n *      import { ArrayInput, SimpleFormIterator, DateInput, UrlInput } from 'react-admin';\n *\n *      <ArrayInput source=\"backlinks\">\n *          <SimpleFormIterator>\n *              <DateInput source=\"date\" />\n *              <UrlInput source=\"url\" />\n *          </SimpleFormIterator>\n *      </ArrayInput>\n *\n * <ArrayInput> allows the edition of embedded arrays, like the backlinks field\n * in the following post record:\n *\n * {\n *   id: 123\n *   backlinks: [\n *         {\n *             date: '2012-08-10T00:00:00.000Z',\n *             url: 'http://example.com/foo/bar.html',\n *         },\n *         {\n *             date: '2012-08-14T00:00:00.000Z',\n *             url: 'https://blog.johndoe.com/2012/08/12/foobar.html',\n *         }\n *    ]\n * }\n *\n * <ArrayInput> expects a single child, which must be a *form iterator* component.\n * A form iterator is a component accepting a fields object\n * as passed by redux-form's <FieldArray> component, and defining a layout for\n * an array of fields. For instance, the <SimpleFormIterator> component\n * displays an array of fields in an unordered list (<ul>), one sub-form by\n * list item (<li>). It also provides controls for adding and removing\n * a sub-record (a backlink in this example).\n *\n * @see https://redux-form.com/7.3.0/examples/fieldarrays/\n */\n\nvar ArrayInput =\n/** @class */\nfunction (_super) {\n  __extends(ArrayInput, _super);\n\n  function ArrayInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.renderFieldArray = function (fieldProps) {\n      var _a = _this.props,\n          children = _a.children,\n          record = _a.record,\n          resource = _a.resource,\n          source = _a.source;\n      return cloneElement(children, __assign({}, fieldProps, {\n        record: record,\n        resource: resource,\n        source: source\n      }));\n    };\n\n    return _this;\n  }\n\n  ArrayInput.prototype.render = function () {\n    var _a = this.props,\n        className = _a.className,\n        defaultValue = _a.defaultValue,\n        label = _a.label,\n        source = _a.source,\n        resource = _a.resource,\n        validate = _a.validate,\n        rest = __rest(_a, [\"className\", \"defaultValue\", \"label\", \"source\", \"resource\", \"validate\"]);\n\n    return React.createElement(FormControl, __assign({\n      fullWidth: true,\n      margin: \"normal\",\n      className: className\n    }, sanitizeRestProps(rest)), React.createElement(InputLabel, {\n      htmlFor: source,\n      shrink: true\n    }, React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired(validate)\n    })), React.createElement(FieldArray, {\n      name: source,\n      defaultValue: defaultValue,\n      component: this.renderFieldArray,\n      validate: validate,\n      isRequired: isRequired(validate)\n    }));\n  };\n\n  return ArrayInput;\n}(Component);\n\nexport { ArrayInput };\nArrayInput.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  defaultValue: PropTypes.any,\n  isRequired: PropTypes.bool,\n  label: PropTypes.string,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  record: PropTypes.object,\n  options: PropTypes.object,\n  validate: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)])\n};\nArrayInput.defaultProps = {\n  options: {},\n  fullWidth: true\n};\nexport default withDefaultValue(ArrayInput);","map":null,"metadata":{},"sourceType":"module"}