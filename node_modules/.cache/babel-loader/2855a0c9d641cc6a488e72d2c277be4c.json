{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.styles = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/extends\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/possibleConstructorReturn\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _reactEventListener = _interopRequireDefault(require(\"react-event-listener\"));\n\nvar _debounce = _interopRequireDefault(require(\"debounce\"));\n\nvar _normalizeScrollLeft = require(\"normalize-scroll-left\");\n\nvar _scroll = _interopRequireDefault(require(\"scroll\"));\n\nvar _ScrollbarSize = _interopRequireDefault(require(\"./ScrollbarSize\"));\n\nvar _withStyles = _interopRequireDefault(require(\"../styles/withStyles\"));\n\nvar _TabIndicator = _interopRequireDefault(require(\"./TabIndicator\"));\n\nvar _TabScrollButton = _interopRequireDefault(require(\"./TabScrollButton\"));\n/* eslint-disable no-restricted-globals */\n// < 1kb payload overhead when lodash/debounce is > 3kb.\n\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      overflow: 'hidden',\n      minHeight: 48,\n      WebkitOverflowScrolling: 'touch' // Add iOS momentum scrolling.\n\n    },\n    flexContainer: {\n      display: 'flex'\n    },\n    scroller: {\n      position: 'relative',\n      display: 'inline-block',\n      flex: '1 1 auto',\n      whiteSpace: 'nowrap'\n    },\n    fixed: {\n      overflowX: 'hidden',\n      width: '100%'\n    },\n    scrollable: {\n      overflowX: 'scroll'\n    },\n    centered: {\n      justifyContent: 'center'\n    },\n    scrollButtons: {},\n    scrollButtonsAuto: (0, _defineProperty2.default)({}, theme.breakpoints.down('xs'), {\n      display: 'none'\n    }),\n    indicator: {}\n  };\n};\n\nexports.styles = styles;\n\nvar Tabs =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(Tabs, _React$Component);\n\n  function Tabs() {\n    var _ref;\n\n    var _temp, _this;\n\n    (0, _classCallCheck2.default)(this, Tabs);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return (0, _possibleConstructorReturn2.default)(_this, (_temp = _this = (0, _possibleConstructorReturn2.default)(this, (_ref = Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call.apply(_ref, [this].concat(args))), _this.tabs = null, _this.valueToIndex = new Map(), _this.handleResize = (0, _debounce.default)(function () {\n      _this.updateIndicatorState(_this.props);\n\n      _this.updateScrollButtonState();\n    }, 166), _this.handleTabsScroll = (0, _debounce.default)(function () {\n      _this.updateScrollButtonState();\n    }, 166), _this.state = {\n      indicatorStyle: {},\n      scrollerStyle: {\n        marginBottom: 0\n      },\n      showLeftScroll: false,\n      showRightScroll: false,\n      mounted: false\n    }, _this.getConditionalElements = function () {\n      var _this$props = _this.props,\n          classes = _this$props.classes,\n          scrollable = _this$props.scrollable,\n          ScrollButtonComponent = _this$props.ScrollButtonComponent,\n          scrollButtons = _this$props.scrollButtons,\n          theme = _this$props.theme;\n      var conditionalElements = {};\n      conditionalElements.scrollbarSizeListener = scrollable ? _react.default.createElement(_ScrollbarSize.default, {\n        onLoad: _this.handleScrollbarSizeChange,\n        onChange: _this.handleScrollbarSizeChange\n      }) : null;\n      var showScrollButtons = scrollable && (scrollButtons === 'auto' || scrollButtons === 'on');\n      conditionalElements.scrollButtonLeft = showScrollButtons ? _react.default.createElement(ScrollButtonComponent, {\n        direction: theme && theme.direction === 'rtl' ? 'right' : 'left',\n        onClick: _this.handleLeftScrollClick,\n        visible: _this.state.showLeftScroll,\n        className: (0, _classnames.default)(classes.scrollButtons, (0, _defineProperty2.default)({}, classes.scrollButtonsAuto, scrollButtons === 'auto'))\n      }) : null;\n      conditionalElements.scrollButtonRight = showScrollButtons ? _react.default.createElement(ScrollButtonComponent, {\n        direction: theme && theme.direction === 'rtl' ? 'left' : 'right',\n        onClick: _this.handleRightScrollClick,\n        visible: _this.state.showRightScroll,\n        className: (0, _classnames.default)(classes.scrollButtons, (0, _defineProperty2.default)({}, classes.scrollButtonsAuto, scrollButtons === 'auto'))\n      }) : null;\n      return conditionalElements;\n    }, _this.getTabsMeta = function (value, direction) {\n      var tabsMeta;\n\n      if (_this.tabs) {\n        var rect = _this.tabs.getBoundingClientRect(); // create a new object with ClientRect class props + scrollLeft\n\n\n        tabsMeta = {\n          clientWidth: _this.tabs ? _this.tabs.clientWidth : 0,\n          scrollLeft: _this.tabs ? _this.tabs.scrollLeft : 0,\n          scrollLeftNormalized: _this.tabs ? (0, _normalizeScrollLeft.getNormalizedScrollLeft)(_this.tabs, direction) : 0,\n          scrollWidth: _this.tabs ? _this.tabs.scrollWidth : 0,\n          left: rect.left,\n          right: rect.right\n        };\n      }\n\n      var tabMeta;\n\n      if (_this.tabs && value !== false) {\n        var children = _this.tabs.children[0].children;\n\n        if (children.length > 0) {\n          var tab = children[_this.valueToIndex.get(value)];\n\n          process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(tab, \"Material-UI: the value provided `\".concat(value, \"` is invalid\")) : void 0;\n          tabMeta = tab ? tab.getBoundingClientRect() : null;\n        }\n      }\n\n      return {\n        tabsMeta: tabsMeta,\n        tabMeta: tabMeta\n      };\n    }, _this.handleLeftScrollClick = function () {\n      if (_this.tabs) {\n        _this.moveTabsScroll(-_this.tabs.clientWidth);\n      }\n    }, _this.handleRightScrollClick = function () {\n      if (_this.tabs) {\n        _this.moveTabsScroll(_this.tabs.clientWidth);\n      }\n    }, _this.handleScrollbarSizeChange = function (_ref2) {\n      var scrollbarHeight = _ref2.scrollbarHeight;\n\n      _this.setState({\n        scrollerStyle: {\n          marginBottom: -scrollbarHeight\n        }\n      });\n    }, _this.moveTabsScroll = function (delta) {\n      var theme = _this.props.theme;\n\n      if (_this.tabs) {\n        var multiplier = theme.direction === 'rtl' ? -1 : 1;\n        var nextScrollLeft = _this.tabs.scrollLeft + delta * multiplier; // Fix for Edge\n\n        var invert = theme.direction === 'rtl' && (0, _normalizeScrollLeft.detectScrollType)() === 'reverse' ? -1 : 1;\n\n        _scroll.default.left(_this.tabs, invert * nextScrollLeft);\n      }\n    }, _this.scrollSelectedIntoView = function () {\n      var _this$props2 = _this.props,\n          theme = _this$props2.theme,\n          value = _this$props2.value;\n\n      var _this$getTabsMeta = _this.getTabsMeta(value, theme.direction),\n          tabsMeta = _this$getTabsMeta.tabsMeta,\n          tabMeta = _this$getTabsMeta.tabMeta;\n\n      if (!tabMeta || !tabsMeta) {\n        return;\n      }\n\n      if (tabMeta.left < tabsMeta.left) {\n        // left side of button is out of view\n        var nextScrollLeft = tabsMeta.scrollLeft + (tabMeta.left - tabsMeta.left);\n\n        _scroll.default.left(_this.tabs, nextScrollLeft);\n      } else if (tabMeta.right > tabsMeta.right) {\n        // right side of button is out of view\n        var _nextScrollLeft = tabsMeta.scrollLeft + (tabMeta.right - tabsMeta.right);\n\n        _scroll.default.left(_this.tabs, _nextScrollLeft);\n      }\n    }, _this.updateScrollButtonState = function () {\n      var _this$props3 = _this.props,\n          scrollable = _this$props3.scrollable,\n          scrollButtons = _this$props3.scrollButtons,\n          theme = _this$props3.theme;\n\n      if (_this.tabs && scrollable && scrollButtons !== 'off') {\n        var _this$tabs = _this.tabs,\n            scrollWidth = _this$tabs.scrollWidth,\n            clientWidth = _this$tabs.clientWidth;\n        var scrollLeft = (0, _normalizeScrollLeft.getNormalizedScrollLeft)(_this.tabs, theme.direction);\n        var showLeftScroll = theme.direction === 'rtl' ? scrollWidth > clientWidth + scrollLeft : scrollLeft > 0;\n        var showRightScroll = theme.direction === 'rtl' ? scrollLeft > 0 : scrollWidth > clientWidth + scrollLeft;\n\n        if (showLeftScroll !== _this.state.showLeftScroll || showRightScroll !== _this.state.showRightScroll) {\n          _this.setState({\n            showLeftScroll: showLeftScroll,\n            showRightScroll: showRightScroll\n          });\n        }\n      }\n    }, _temp));\n  }\n\n  (0, _createClass2.default)(Tabs, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // eslint-disable-next-line react/no-did-mount-set-state\n      this.setState({\n        mounted: true\n      });\n      this.updateIndicatorState(this.props);\n      this.updateScrollButtonState();\n\n      if (this.props.action) {\n        this.props.action({\n          updateIndicator: this.handleResize\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      this.updateScrollButtonState(); // The index might have changed at the same time.\n      // We need to check again the right indicator position.\n\n      this.updateIndicatorState(this.props);\n\n      if (this.state.indicatorStyle !== prevState.indicatorStyle) {\n        this.scrollSelectedIntoView();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.handleResize.clear();\n      this.handleTabsScroll.clear();\n    }\n  }, {\n    key: \"updateIndicatorState\",\n    value: function updateIndicatorState(props) {\n      var theme = props.theme,\n          value = props.value;\n\n      var _getTabsMeta = this.getTabsMeta(value, theme.direction),\n          tabsMeta = _getTabsMeta.tabsMeta,\n          tabMeta = _getTabsMeta.tabMeta;\n\n      var left = 0;\n\n      if (tabMeta && tabsMeta) {\n        var correction = theme.direction === 'rtl' ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;\n        left = tabMeta.left - tabsMeta.left + correction;\n      }\n\n      var indicatorStyle = {\n        left: left,\n        // May be wrong until the font is loaded.\n        width: tabMeta ? tabMeta.width : 0\n      };\n\n      if ((indicatorStyle.left !== this.state.indicatorStyle.left || indicatorStyle.width !== this.state.indicatorStyle.width) && !isNaN(indicatorStyle.left) && !isNaN(indicatorStyle.width)) {\n        this.setState({\n          indicatorStyle: indicatorStyle\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames3,\n          _this2 = this;\n\n      var _props = this.props,\n          action = _props.action,\n          centered = _props.centered,\n          childrenProp = _props.children,\n          classes = _props.classes,\n          classNameProp = _props.className,\n          Component = _props.component,\n          fullWidth = _props.fullWidth,\n          indicatorColor = _props.indicatorColor,\n          onChange = _props.onChange,\n          scrollable = _props.scrollable,\n          ScrollButtonComponent = _props.ScrollButtonComponent,\n          scrollButtons = _props.scrollButtons,\n          _props$TabIndicatorPr = _props.TabIndicatorProps,\n          TabIndicatorProps = _props$TabIndicatorPr === void 0 ? {} : _props$TabIndicatorPr,\n          textColor = _props.textColor,\n          theme = _props.theme,\n          value = _props.value,\n          other = (0, _objectWithoutProperties2.default)(_props, [\"action\", \"centered\", \"children\", \"classes\", \"className\", \"component\", \"fullWidth\", \"indicatorColor\", \"onChange\", \"scrollable\", \"ScrollButtonComponent\", \"scrollButtons\", \"TabIndicatorProps\", \"textColor\", \"theme\", \"value\"]);\n      process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(!centered || !scrollable, 'Material-UI: you can not use the `centered={true}` and `scrollable={true}` properties ' + 'at the same time on a `Tabs` component.') : void 0;\n      var className = (0, _classnames.default)(classes.root, classNameProp);\n      var scrollerClassName = (0, _classnames.default)(classes.scroller, (_classNames3 = {}, (0, _defineProperty2.default)(_classNames3, classes.fixed, !scrollable), (0, _defineProperty2.default)(_classNames3, classes.scrollable, scrollable), _classNames3));\n      var flexContainerClassName = (0, _classnames.default)(classes.flexContainer, (0, _defineProperty2.default)({}, classes.centered, centered && !scrollable));\n\n      var indicator = _react.default.createElement(_TabIndicator.default, (0, _extends2.default)({\n        className: classes.indicator,\n        color: indicatorColor\n      }, TabIndicatorProps, {\n        style: (0, _objectSpread2.default)({}, this.state.indicatorStyle, TabIndicatorProps.style)\n      }));\n\n      this.valueToIndex = new Map();\n      var childIndex = 0;\n\n      var children = _react.default.Children.map(childrenProp, function (child) {\n        if (!_react.default.isValidElement(child)) {\n          return null;\n        }\n\n        process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(child.type !== _react.default.Fragment, [\"Material-UI: the Tabs component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n')) : void 0;\n        var childValue = child.props.value === undefined ? childIndex : child.props.value;\n\n        _this2.valueToIndex.set(childValue, childIndex);\n\n        var selected = childValue === value;\n        childIndex += 1;\n        return _react.default.cloneElement(child, {\n          fullWidth: fullWidth,\n          indicator: selected && !_this2.state.mounted && indicator,\n          selected: selected,\n          onChange: onChange,\n          textColor: textColor,\n          value: childValue\n        });\n      });\n\n      var conditionalElements = this.getConditionalElements();\n      return _react.default.createElement(Component, (0, _extends2.default)({\n        className: className\n      }, other), _react.default.createElement(_reactEventListener.default, {\n        target: \"window\",\n        onResize: this.handleResize\n      }), conditionalElements.scrollbarSizeListener, _react.default.createElement(\"div\", {\n        className: classes.flexContainer\n      }, conditionalElements.scrollButtonLeft, _react.default.createElement(\"div\", {\n        className: scrollerClassName,\n        style: this.state.scrollerStyle,\n        ref: function ref(node) {\n          _this2.tabs = node;\n        },\n        role: \"tablist\",\n        onScroll: this.handleTabsScroll\n      }, _react.default.createElement(\"div\", {\n        className: flexContainerClassName\n      }, children), this.state.mounted && indicator), conditionalElements.scrollButtonRight));\n    }\n  }]);\n  return Tabs;\n}(_react.default.Component);\n\nTabs.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Callback fired when the component mounts.\n   * This is useful when you want to trigger an action programmatically.\n   * It currently only supports `updateIndicator()` action.\n   *\n   * @param {object} actions This object contains all possible actions\n   * that can be triggered programmatically.\n   */\n  action: _propTypes.default.func,\n\n  /**\n   * If `true`, the tabs will be centered.\n   * This property is intended for large views.\n   */\n  centered: _propTypes.default.bool,\n\n  /**\n   * The content of the component.\n   */\n  children: _propTypes.default.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: _propTypes.default.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object]),\n\n  /**\n   * If `true`, the tabs will grow to use all the available space.\n   * This property is intended for small views, like on mobile.\n   */\n  fullWidth: _propTypes.default.bool,\n\n  /**\n   * Determines the color of the indicator.\n   */\n  indicatorColor: _propTypes.default.oneOf(['secondary', 'primary']),\n\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {object} event The event source of the callback\n   * @param {number} value We default to the index of the child\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * True invokes scrolling properties and allow for horizontally scrolling\n   * (or swiping) the tab bar.\n   */\n  scrollable: _propTypes.default.bool,\n\n  /**\n   * The component used to render the scroll buttons.\n   */\n  ScrollButtonComponent: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func, _propTypes.default.object]),\n\n  /**\n   * Determine behavior of scroll buttons when tabs are set to scroll\n   * `auto` will only present them on medium and larger viewports\n   * `on` will always present them\n   * `off` will never present them\n   */\n  scrollButtons: _propTypes.default.oneOf(['auto', 'on', 'off']),\n\n  /**\n   * Properties applied to the `TabIndicator` element.\n   */\n  TabIndicatorProps: _propTypes.default.object,\n\n  /**\n   * Determines the color of the `Tab`.\n   */\n  textColor: _propTypes.default.oneOf(['secondary', 'primary', 'inherit']),\n\n  /**\n   * @ignore\n   */\n  theme: _propTypes.default.object.isRequired,\n\n  /**\n   * The value of the currently selected `Tab`.\n   * If you don't want any selected `Tab`, you can set this property to `false`.\n   */\n  value: _propTypes.default.any\n} : {};\nTabs.defaultProps = {\n  centered: false,\n  component: 'div',\n  fullWidth: false,\n  indicatorColor: 'secondary',\n  scrollable: false,\n  ScrollButtonComponent: _TabScrollButton.default,\n  scrollButtons: 'auto',\n  textColor: 'inherit'\n};\n\nvar _default = (0, _withStyles.default)(styles, {\n  name: 'MuiTabs',\n  withTheme: true\n})(Tabs);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}