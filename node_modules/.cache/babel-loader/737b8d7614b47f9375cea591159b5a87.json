{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TableCell from '@material-ui/core/TableCell';\nimport classnames from 'classnames';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var cellClassName = _a.cellClassName,\n      className = _a.className,\n      field = _a.field,\n      formClassName = _a.formClassName,\n      headerClassName = _a.headerClassName,\n      record = _a.record,\n      basePath = _a.basePath,\n      resource = _a.resource,\n      rest = __rest(_a, [\"cellClassName\", \"className\", \"field\", \"formClassName\", \"headerClassName\", \"record\", \"basePath\", \"resource\"]);\n\n  return rest;\n};\n\nexport var DatagridCell = function DatagridCell(_a) {\n  var className = _a.className,\n      field = _a.field,\n      record = _a.record,\n      basePath = _a.basePath,\n      resource = _a.resource,\n      rest = __rest(_a, [\"className\", \"field\", \"record\", \"basePath\", \"resource\"]);\n\n  return React.createElement(TableCell, __assign({\n    className: classnames(className, field.props.cellClassName),\n    numeric: field.props.textAlign === 'right',\n    padding: \"none\"\n  }, sanitizeRestProps(rest)), React.cloneElement(field, {\n    record: record,\n    basePath: field.props.basePath || basePath,\n    resource: resource\n  }));\n};\nDatagridCell.propTypes = {\n  className: PropTypes.string,\n  field: PropTypes.element,\n  record: PropTypes.object,\n  basePath: PropTypes.string,\n  resource: PropTypes.string\n}; // wat? TypeScript looses the displayName if we don't set it explicitly\n\nDatagridCell.displayName = 'DatagridCell';\nexport default DatagridCell;","map":null,"metadata":{},"sourceType":"module"}