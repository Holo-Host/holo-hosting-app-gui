{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { createElement } from 'react';\n\nvar InferredElement =\n/** @class */\nfunction () {\n  function InferredElement(type, props, children) {\n    this.type = type;\n    this.props = props;\n    this.children = children;\n  }\n\n  InferredElement.prototype.getElement = function (props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (!this.isDefined()) {\n      return;\n    }\n\n    return this.children ? createElement(this.type.component, __assign({}, this.props, props), this.children.length > 0 ? this.children.map(function (child, index) {\n      return child.getElement({\n        key: index\n      });\n    }) : this.children.getElement()) : createElement(this.type.component, __assign({}, this.props, props));\n  };\n\n  InferredElement.prototype.getProps = function () {\n    return this.props;\n  };\n\n  InferredElement.prototype.isDefined = function () {\n    return !!this.type;\n  };\n\n  InferredElement.prototype.getRepresentation = function () {\n    if (!this.isDefined()) {\n      return;\n    }\n\n    if (this.type.representation) {\n      return this.type.representation(this.props, this.children);\n    }\n\n    return \"<\" + (this.type.component.displayName || this.type.component.name) + \" source=\\\"\" + this.props.source + \"\\\" />\";\n  };\n\n  return InferredElement;\n}();\n\nexport default InferredElement;","map":null,"metadata":{},"sourceType":"module"}